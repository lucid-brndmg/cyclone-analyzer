// Generated from grammar/CycloneParser.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import CycloneParserListener from './CycloneParserListener.js';
const serializedATN = [4,1,121,1033,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,5,3,
216,8,3,10,3,12,3,219,9,3,1,4,5,4,222,8,4,10,4,12,4,225,9,4,1,5,1,5,3,5,
229,8,5,1,6,1,6,1,6,1,6,3,6,235,8,6,1,7,5,7,238,8,7,10,7,12,7,241,9,7,1,
7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,5,9,255,8,9,10,9,12,9,258,
9,9,1,9,5,9,261,8,9,10,9,12,9,264,9,9,1,9,5,9,267,8,9,10,9,12,9,270,9,9,
1,9,5,9,273,8,9,10,9,12,9,276,9,9,1,9,3,9,279,8,9,1,9,1,9,1,10,5,10,284,
8,10,10,10,12,10,287,9,10,1,10,1,10,1,10,1,10,1,11,1,11,5,11,295,8,11,10,
11,12,11,298,9,11,1,11,1,11,1,12,1,12,3,12,304,8,12,1,12,1,12,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,3,13,315,8,13,1,13,1,13,1,13,3,13,320,8,13,1,13,
1,13,1,14,1,14,1,15,1,15,1,15,5,15,329,8,15,10,15,12,15,332,9,15,1,15,1,
15,3,15,336,8,15,1,15,1,15,3,15,340,8,15,3,15,342,8,15,1,16,1,16,1,16,1,
16,5,16,348,8,16,10,16,12,16,351,9,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,
359,8,17,1,18,1,18,1,18,1,18,1,18,5,18,366,8,18,10,18,12,18,369,9,18,1,18,
1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,5,20,382,8,20,10,20,12,
20,385,9,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,393,8,21,1,21,3,21,396,8,
21,1,21,3,21,399,8,21,1,22,1,22,1,22,1,22,5,22,405,8,22,10,22,12,22,408,
9,22,1,23,1,23,1,23,1,23,1,23,5,23,415,8,23,10,23,12,23,418,9,23,1,23,1,
23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,5,25,430,8,25,10,25,12,25,433,
9,25,1,26,1,26,1,26,1,26,1,26,5,26,440,8,26,10,26,12,26,443,9,26,1,26,1,
26,1,27,1,27,1,27,3,27,450,8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,
1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,5,32,468,8,32,10,32,12,32,471,9,
32,1,33,1,33,1,33,5,33,476,8,33,10,33,12,33,479,9,33,1,34,1,34,1,34,5,34,
484,8,34,10,34,12,34,487,9,34,1,35,1,35,1,35,1,35,3,35,493,8,35,1,36,1,36,
1,36,3,36,498,8,36,1,37,1,37,1,37,1,37,1,38,1,38,3,38,506,8,38,1,38,1,38,
3,38,510,8,38,3,38,512,8,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,520,8,38,
1,38,1,38,3,38,524,8,38,1,38,1,38,3,38,528,8,38,1,38,1,38,3,38,532,8,38,
3,38,534,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,543,8,38,1,38,1,38,
3,38,547,8,38,1,38,1,38,3,38,551,8,38,1,39,1,39,1,39,1,39,1,39,1,39,5,39,
559,8,39,10,39,12,39,562,9,39,1,39,1,39,3,39,566,8,39,3,39,568,8,39,1,39,
1,39,1,39,1,39,1,39,1,39,1,39,5,39,577,8,39,10,39,12,39,580,9,39,1,39,1,
39,3,39,584,8,39,3,39,586,8,39,4,39,588,8,39,11,39,12,39,589,1,39,1,39,3,
39,594,8,39,1,39,1,39,3,39,598,8,39,3,39,600,8,39,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,5,39,609,8,39,10,39,12,39,612,9,39,1,39,1,39,3,39,616,8,39,
3,39,618,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,627,8,39,10,39,12,
39,630,9,39,1,39,1,39,3,39,634,8,39,3,39,636,8,39,4,39,638,8,39,11,39,12,
39,639,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,649,8,39,1,39,1,39,3,39,653,
8,39,3,39,655,8,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,
1,43,1,43,3,43,670,8,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,4,
53,696,8,53,11,53,12,53,697,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,
5,55,709,8,55,10,55,12,55,712,9,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,
57,1,57,1,57,5,57,724,8,57,10,57,12,57,727,9,57,1,57,1,57,1,58,1,58,1,58,
1,58,5,58,735,8,58,10,58,12,58,738,9,58,1,58,1,58,1,59,1,59,1,60,1,60,1,
60,3,60,747,8,60,1,61,1,61,3,61,751,8,61,1,62,1,62,1,62,1,62,1,62,1,63,1,
63,1,64,1,64,1,64,1,64,1,64,5,64,765,8,64,10,64,12,64,768,9,64,1,64,1,64,
1,65,1,65,1,66,1,66,1,66,3,66,777,8,66,1,66,3,66,780,8,66,1,67,1,67,1,67,
1,68,1,68,1,69,3,69,788,8,69,1,69,1,69,1,69,3,69,793,8,69,1,69,1,69,1,70,
3,70,798,8,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,3,72,808,8,72,1,73,
1,73,1,73,5,73,813,8,73,10,73,12,73,816,9,73,1,74,1,74,1,74,5,74,821,8,74,
10,74,12,74,824,9,74,1,75,1,75,1,75,5,75,829,8,75,10,75,12,75,832,9,75,1,
76,1,76,1,76,5,76,837,8,76,10,76,12,76,840,9,76,1,77,1,77,1,77,5,77,845,
8,77,10,77,12,77,848,9,77,1,78,1,78,1,78,5,78,853,8,78,10,78,12,78,856,9,
78,1,79,1,79,1,79,5,79,861,8,79,10,79,12,79,864,9,79,1,80,1,80,1,80,5,80,
869,8,80,10,80,12,80,872,9,80,1,81,1,81,1,81,5,81,877,8,81,10,81,12,81,880,
9,81,1,82,1,82,1,82,5,82,885,8,82,10,82,12,82,888,9,82,1,83,1,83,1,83,5,
83,893,8,83,10,83,12,83,896,9,83,1,84,1,84,1,84,5,84,901,8,84,10,84,12,84,
904,9,84,1,85,1,85,1,85,1,85,1,85,3,85,911,8,85,1,86,1,86,1,86,1,86,1,86,
1,86,3,86,919,8,86,3,86,921,8,86,1,87,1,87,1,87,1,87,1,87,4,87,928,8,87,
11,87,12,87,929,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,
89,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,
5,92,958,8,92,10,92,12,92,961,9,92,1,92,4,92,964,8,92,11,92,12,92,965,1,
92,1,92,1,93,1,93,3,93,972,8,93,1,93,1,93,5,93,976,8,93,10,93,12,93,979,
9,93,1,93,1,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,
96,1,96,1,96,1,96,3,96,998,8,96,1,97,1,97,1,97,3,97,1003,8,97,1,98,1,98,
1,98,1,98,1,99,1,99,1,99,1,99,1,99,5,99,1014,8,99,10,99,12,99,1017,9,99,
1,99,1,99,1,100,1,100,1,100,1,100,1,100,3,100,1026,8,100,1,101,1,101,1,101,
1,101,1,101,1,101,0,0,102,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
196,198,200,202,0,22,1,0,53,60,1,0,63,64,1,0,61,62,1,0,65,67,1,0,70,71,1,
0,1,2,2,0,86,86,94,94,3,0,87,87,96,96,105,105,2,0,88,88,92,92,1,0,90,91,
1,0,80,83,1,0,51,52,2,0,111,111,118,118,2,0,73,75,77,77,1,0,102,103,2,0,
11,11,42,47,2,0,21,21,50,50,2,0,12,13,17,18,1,0,48,49,2,0,20,20,28,28,2,
0,26,27,39,39,1,0,36,37,1062,0,204,1,0,0,0,2,206,1,0,0,0,4,212,1,0,0,0,6,
217,1,0,0,0,8,223,1,0,0,0,10,228,1,0,0,0,12,234,1,0,0,0,14,239,1,0,0,0,16,
245,1,0,0,0,18,249,1,0,0,0,20,285,1,0,0,0,22,292,1,0,0,0,24,301,1,0,0,0,
26,307,1,0,0,0,28,323,1,0,0,0,30,341,1,0,0,0,32,343,1,0,0,0,34,354,1,0,0,
0,36,360,1,0,0,0,38,372,1,0,0,0,40,376,1,0,0,0,42,389,1,0,0,0,44,400,1,0,
0,0,46,409,1,0,0,0,48,421,1,0,0,0,50,426,1,0,0,0,52,434,1,0,0,0,54,446,1,
0,0,0,56,453,1,0,0,0,58,457,1,0,0,0,60,460,1,0,0,0,62,462,1,0,0,0,64,464,
1,0,0,0,66,472,1,0,0,0,68,480,1,0,0,0,70,492,1,0,0,0,72,497,1,0,0,0,74,499,
1,0,0,0,76,550,1,0,0,0,78,654,1,0,0,0,80,656,1,0,0,0,82,658,1,0,0,0,84,660,
1,0,0,0,86,669,1,0,0,0,88,671,1,0,0,0,90,673,1,0,0,0,92,675,1,0,0,0,94,677,
1,0,0,0,96,679,1,0,0,0,98,681,1,0,0,0,100,683,1,0,0,0,102,685,1,0,0,0,104,
690,1,0,0,0,106,695,1,0,0,0,108,699,1,0,0,0,110,703,1,0,0,0,112,715,1,0,
0,0,114,719,1,0,0,0,116,730,1,0,0,0,118,741,1,0,0,0,120,746,1,0,0,0,122,
750,1,0,0,0,124,752,1,0,0,0,126,757,1,0,0,0,128,759,1,0,0,0,130,771,1,0,
0,0,132,773,1,0,0,0,134,781,1,0,0,0,136,784,1,0,0,0,138,787,1,0,0,0,140,
797,1,0,0,0,142,801,1,0,0,0,144,804,1,0,0,0,146,809,1,0,0,0,148,817,1,0,
0,0,150,825,1,0,0,0,152,833,1,0,0,0,154,841,1,0,0,0,156,849,1,0,0,0,158,
857,1,0,0,0,160,865,1,0,0,0,162,873,1,0,0,0,164,881,1,0,0,0,166,889,1,0,
0,0,168,897,1,0,0,0,170,910,1,0,0,0,172,920,1,0,0,0,174,922,1,0,0,0,176,
933,1,0,0,0,178,938,1,0,0,0,180,943,1,0,0,0,182,948,1,0,0,0,184,954,1,0,
0,0,186,969,1,0,0,0,188,982,1,0,0,0,190,986,1,0,0,0,192,997,1,0,0,0,194,
999,1,0,0,0,196,1004,1,0,0,0,198,1008,1,0,0,0,200,1020,1,0,0,0,202,1027,
1,0,0,0,204,205,5,118,0,0,205,1,1,0,0,0,206,207,5,101,0,0,207,208,3,4,2,
0,208,209,5,11,0,0,209,210,3,86,43,0,210,211,5,25,0,0,211,3,1,0,0,0,212,
213,7,0,0,0,213,5,1,0,0,0,214,216,3,142,71,0,215,214,1,0,0,0,216,219,1,0,
0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,7,1,0,0,0,219,217,1,0,0,0,220,222,
3,24,12,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,
0,224,9,1,0,0,0,225,223,1,0,0,0,226,229,3,54,27,0,227,229,3,56,28,0,228,
226,1,0,0,0,228,227,1,0,0,0,229,11,1,0,0,0,230,235,3,114,57,0,231,235,3,
110,55,0,232,235,3,102,51,0,233,235,3,182,91,0,234,230,1,0,0,0,234,231,1,
0,0,0,234,232,1,0,0,0,234,233,1,0,0,0,235,13,1,0,0,0,236,238,3,2,1,0,237,
236,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,1,0,
0,0,241,239,1,0,0,0,242,243,3,16,8,0,243,244,5,0,0,1,244,15,1,0,0,0,245,
246,7,1,0,0,246,247,3,0,0,0,247,248,3,18,9,0,248,17,1,0,0,0,249,256,5,15,
0,0,250,255,3,114,57,0,251,255,3,110,55,0,252,255,3,102,51,0,253,255,3,182,
91,0,254,250,1,0,0,0,254,251,1,0,0,0,254,252,1,0,0,0,254,253,1,0,0,0,255,
258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,262,1,0,0,0,258,256,1,0,
0,0,259,261,3,20,10,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,
263,1,0,0,0,263,268,1,0,0,0,264,262,1,0,0,0,265,267,3,24,12,0,266,265,1,
0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,274,1,0,0,0,270,
268,1,0,0,0,271,273,3,34,17,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,
0,0,0,274,275,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,277,279,3,40,20,0,
278,277,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,281,5,22,0,0,281,19,
1,0,0,0,282,284,3,84,42,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,
0,285,286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,7,2,0,0,289,290,
3,0,0,0,290,291,3,22,11,0,291,21,1,0,0,0,292,296,5,15,0,0,293,295,3,142,
71,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,
299,1,0,0,0,298,296,1,0,0,0,299,300,5,22,0,0,300,23,1,0,0,0,301,303,7,3,
0,0,302,304,3,0,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,
306,3,26,13,0,306,25,1,0,0,0,307,308,5,15,0,0,308,309,3,0,0,0,309,310,3,
28,14,0,310,311,3,30,15,0,311,314,1,0,0,0,312,313,7,4,0,0,313,315,3,82,41,
0,314,312,1,0,0,0,314,315,1,0,0,0,315,319,1,0,0,0,316,317,3,134,67,0,317,
318,5,25,0,0,318,320,1,0,0,0,319,316,1,0,0,0,319,320,1,0,0,0,320,321,1,0,
0,0,321,322,5,22,0,0,322,27,1,0,0,0,323,324,7,5,0,0,324,29,1,0,0,0,325,330,
3,0,0,0,326,327,5,8,0,0,327,329,3,0,0,0,328,326,1,0,0,0,329,332,1,0,0,0,
330,328,1,0,0,0,330,331,1,0,0,0,331,342,1,0,0,0,332,330,1,0,0,0,333,335,
5,27,0,0,334,336,3,32,16,0,335,334,1,0,0,0,335,336,1,0,0,0,336,342,1,0,0,
0,337,339,5,28,0,0,338,340,3,32,16,0,339,338,1,0,0,0,339,340,1,0,0,0,340,
342,1,0,0,0,341,325,1,0,0,0,341,333,1,0,0,0,341,337,1,0,0,0,342,31,1,0,0,
0,343,344,5,16,0,0,344,349,3,0,0,0,345,346,5,8,0,0,346,348,3,0,0,0,347,345,
1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,
351,349,1,0,0,0,352,353,5,23,0,0,353,33,1,0,0,0,354,355,5,72,0,0,355,356,
3,0,0,0,356,358,3,38,19,0,357,359,3,36,18,0,358,357,1,0,0,0,358,359,1,0,
0,0,359,35,1,0,0,0,360,361,5,99,0,0,361,362,5,19,0,0,362,367,3,0,0,0,363,
364,5,8,0,0,364,366,3,0,0,0,365,363,1,0,0,0,366,369,1,0,0,0,367,365,1,0,
0,0,367,368,1,0,0,0,368,370,1,0,0,0,369,367,1,0,0,0,370,371,5,24,0,0,371,
37,1,0,0,0,372,373,5,15,0,0,373,374,3,142,71,0,374,375,5,22,0,0,375,39,1,
0,0,0,376,377,5,85,0,0,377,383,5,15,0,0,378,382,3,54,27,0,379,382,3,56,28,
0,380,382,3,138,69,0,381,378,1,0,0,0,381,379,1,0,0,0,381,380,1,0,0,0,382,
385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,383,1,0,
0,0,386,387,3,42,21,0,387,388,5,22,0,0,388,41,1,0,0,0,389,390,7,6,0,0,390,
392,3,44,22,0,391,393,3,48,24,0,392,391,1,0,0,0,392,393,1,0,0,0,393,395,
1,0,0,0,394,396,3,52,26,0,395,394,1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,
0,397,399,3,46,23,0,398,397,1,0,0,0,398,399,1,0,0,0,399,43,1,0,0,0,400,401,
7,7,0,0,401,406,3,88,44,0,402,403,5,8,0,0,403,405,3,88,44,0,404,402,1,0,
0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,45,1,0,0,0,408,406,
1,0,0,0,409,410,7,8,0,0,410,411,5,19,0,0,411,416,3,0,0,0,412,413,5,8,0,0,
413,415,3,0,0,0,414,412,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,
1,0,0,0,417,419,1,0,0,0,418,416,1,0,0,0,419,420,5,24,0,0,420,47,1,0,0,0,
421,422,7,9,0,0,422,423,5,19,0,0,423,424,3,50,25,0,424,425,5,24,0,0,425,
49,1,0,0,0,426,431,3,60,30,0,427,428,5,8,0,0,428,430,3,60,30,0,429,427,1,
0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,51,1,0,0,0,433,
431,1,0,0,0,434,435,5,93,0,0,435,436,5,19,0,0,436,441,3,0,0,0,437,438,5,
8,0,0,438,440,3,0,0,0,439,437,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,
442,1,0,0,0,442,444,1,0,0,0,443,441,1,0,0,0,444,445,5,24,0,0,445,53,1,0,
0,0,446,447,5,95,0,0,447,449,3,0,0,0,448,450,3,58,29,0,449,448,1,0,0,0,449,
450,1,0,0,0,450,451,1,0,0,0,451,452,5,25,0,0,452,55,1,0,0,0,453,454,3,0,
0,0,454,455,3,58,29,0,455,456,5,25,0,0,456,57,1,0,0,0,457,458,5,11,0,0,458,
459,3,62,31,0,459,59,1,0,0,0,460,461,3,62,31,0,461,61,1,0,0,0,462,463,3,
64,32,0,463,63,1,0,0,0,464,469,3,66,33,0,465,466,5,40,0,0,466,468,3,66,33,
0,467,465,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,65,
1,0,0,0,471,469,1,0,0,0,472,477,3,68,34,0,473,474,5,41,0,0,474,476,3,68,
34,0,475,473,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,
67,1,0,0,0,479,477,1,0,0,0,480,485,3,70,35,0,481,482,5,32,0,0,482,484,3,
70,35,0,483,481,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,
486,69,1,0,0,0,487,485,1,0,0,0,488,489,5,31,0,0,489,493,3,70,35,0,490,493,
3,72,36,0,491,493,3,74,37,0,492,488,1,0,0,0,492,490,1,0,0,0,492,491,1,0,
0,0,493,71,1,0,0,0,494,498,3,76,38,0,495,498,3,78,39,0,496,498,3,92,46,0,
497,494,1,0,0,0,497,495,1,0,0,0,497,496,1,0,0,0,498,73,1,0,0,0,499,500,5,
19,0,0,500,501,3,62,31,0,501,502,5,24,0,0,502,75,1,0,0,0,503,505,5,48,0,
0,504,506,3,88,44,0,505,504,1,0,0,0,505,506,1,0,0,0,506,512,1,0,0,0,507,
509,5,49,0,0,508,510,3,88,44,0,509,508,1,0,0,0,509,510,1,0,0,0,510,512,1,
0,0,0,511,503,1,0,0,0,511,507,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,
523,3,0,0,0,514,515,5,32,0,0,515,516,5,15,0,0,516,519,3,88,44,0,517,518,
5,5,0,0,518,520,3,88,44,0,519,517,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,
0,521,522,5,22,0,0,522,524,1,0,0,0,523,514,1,0,0,0,523,524,1,0,0,0,524,551,
1,0,0,0,525,527,5,48,0,0,526,528,3,88,44,0,527,526,1,0,0,0,527,528,1,0,0,
0,528,534,1,0,0,0,529,531,5,49,0,0,530,532,3,88,44,0,531,530,1,0,0,0,531,
532,1,0,0,0,532,534,1,0,0,0,533,525,1,0,0,0,533,529,1,0,0,0,533,534,1,0,
0,0,534,535,1,0,0,0,535,536,5,19,0,0,536,546,3,0,0,0,537,538,5,32,0,0,538,
539,5,15,0,0,539,542,3,88,44,0,540,541,5,5,0,0,541,543,3,88,44,0,542,540,
1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,545,5,22,0,0,545,547,1,0,0,0,
546,537,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,549,5,24,0,0,549,551,
1,0,0,0,550,511,1,0,0,0,550,533,1,0,0,0,551,77,1,0,0,0,552,568,3,0,0,0,553,
565,3,80,40,0,554,555,5,16,0,0,555,560,3,0,0,0,556,557,5,8,0,0,557,559,3,
0,0,0,558,556,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,
563,1,0,0,0,562,560,1,0,0,0,563,564,5,23,0,0,564,566,1,0,0,0,565,554,1,0,
0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,552,1,0,0,0,567,553,1,0,0,0,568,
587,1,0,0,0,569,585,5,1,0,0,570,586,3,0,0,0,571,583,3,80,40,0,572,573,5,
16,0,0,573,578,3,0,0,0,574,575,5,8,0,0,575,577,3,0,0,0,576,574,1,0,0,0,577,
580,1,0,0,0,578,576,1,0,0,0,578,579,1,0,0,0,579,581,1,0,0,0,580,578,1,0,
0,0,581,582,5,23,0,0,582,584,1,0,0,0,583,572,1,0,0,0,583,584,1,0,0,0,584,
586,1,0,0,0,585,570,1,0,0,0,585,571,1,0,0,0,586,588,1,0,0,0,587,569,1,0,
0,0,588,589,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,655,1,0,0,0,591,
593,5,48,0,0,592,594,3,88,44,0,593,592,1,0,0,0,593,594,1,0,0,0,594,600,1,
0,0,0,595,597,5,49,0,0,596,598,3,88,44,0,597,596,1,0,0,0,597,598,1,0,0,0,
598,600,1,0,0,0,599,591,1,0,0,0,599,595,1,0,0,0,599,600,1,0,0,0,600,601,
1,0,0,0,601,617,5,19,0,0,602,618,3,0,0,0,603,615,3,80,40,0,604,605,5,16,
0,0,605,610,3,0,0,0,606,607,5,8,0,0,607,609,3,0,0,0,608,606,1,0,0,0,609,
612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,610,1,0,
0,0,613,614,5,23,0,0,614,616,1,0,0,0,615,604,1,0,0,0,615,616,1,0,0,0,616,
618,1,0,0,0,617,602,1,0,0,0,617,603,1,0,0,0,618,637,1,0,0,0,619,635,5,1,
0,0,620,636,3,0,0,0,621,633,3,80,40,0,622,623,5,16,0,0,623,628,3,0,0,0,624,
625,5,8,0,0,625,627,3,0,0,0,626,624,1,0,0,0,627,630,1,0,0,0,628,626,1,0,
0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,628,1,0,0,0,631,632,5,23,0,0,632,
634,1,0,0,0,633,622,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,620,1,0,
0,0,635,621,1,0,0,0,636,638,1,0,0,0,637,619,1,0,0,0,638,639,1,0,0,0,639,
637,1,0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,652,5,24,0,0,642,643,5,32,
0,0,643,644,5,15,0,0,644,645,3,88,44,0,645,648,1,0,0,0,646,647,5,5,0,0,647,
649,3,88,44,0,648,646,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,651,5,
22,0,0,651,653,1,0,0,0,652,642,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,
567,1,0,0,0,654,599,1,0,0,0,655,79,1,0,0,0,656,657,5,33,0,0,657,81,1,0,0,
0,658,659,5,115,0,0,659,83,1,0,0,0,660,661,7,10,0,0,661,85,1,0,0,0,662,670,
3,88,44,0,663,670,3,90,45,0,664,670,3,92,46,0,665,670,3,94,47,0,666,670,
3,96,48,0,667,670,3,100,50,0,668,670,3,98,49,0,669,662,1,0,0,0,669,663,1,
0,0,0,669,664,1,0,0,0,669,665,1,0,0,0,669,666,1,0,0,0,669,667,1,0,0,0,669,
668,1,0,0,0,670,87,1,0,0,0,671,672,5,111,0,0,672,89,1,0,0,0,673,674,5,113,
0,0,674,91,1,0,0,0,675,676,5,116,0,0,676,93,1,0,0,0,677,678,5,115,0,0,678,
95,1,0,0,0,679,680,5,114,0,0,680,97,1,0,0,0,681,682,5,112,0,0,682,99,1,0,
0,0,683,684,5,117,0,0,684,101,1,0,0,0,685,686,5,68,0,0,686,687,3,0,0,0,687,
688,3,104,52,0,688,689,5,25,0,0,689,103,1,0,0,0,690,691,5,15,0,0,691,692,
3,106,53,0,692,693,5,22,0,0,693,105,1,0,0,0,694,696,3,108,54,0,695,694,1,
0,0,0,696,697,1,0,0,0,697,695,1,0,0,0,697,698,1,0,0,0,698,107,1,0,0,0,699,
700,3,120,60,0,700,701,3,132,66,0,701,702,5,25,0,0,702,109,1,0,0,0,703,704,
5,69,0,0,704,705,3,120,60,0,705,710,3,112,56,0,706,707,5,8,0,0,707,709,3,
112,56,0,708,706,1,0,0,0,709,712,1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,
711,713,1,0,0,0,712,710,1,0,0,0,713,714,5,25,0,0,714,111,1,0,0,0,715,716,
3,0,0,0,716,717,5,11,0,0,717,718,3,136,68,0,718,113,1,0,0,0,719,720,3,120,
60,0,720,725,3,132,66,0,721,722,5,8,0,0,722,724,3,132,66,0,723,721,1,0,0,
0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,728,1,0,0,0,727,725,
1,0,0,0,728,729,5,25,0,0,729,115,1,0,0,0,730,731,3,120,60,0,731,736,3,132,
66,0,732,733,5,8,0,0,733,735,3,132,66,0,734,732,1,0,0,0,735,738,1,0,0,0,
736,734,1,0,0,0,736,737,1,0,0,0,737,739,1,0,0,0,738,736,1,0,0,0,739,740,
5,25,0,0,740,117,1,0,0,0,741,742,7,11,0,0,742,119,1,0,0,0,743,747,3,126,
63,0,744,747,3,128,64,0,745,747,3,124,62,0,746,743,1,0,0,0,746,744,1,0,0,
0,746,745,1,0,0,0,747,121,1,0,0,0,748,751,3,126,63,0,749,751,3,124,62,0,
750,748,1,0,0,0,750,749,1,0,0,0,751,123,1,0,0,0,752,753,5,110,0,0,753,754,
5,16,0,0,754,755,7,12,0,0,755,756,5,23,0,0,756,125,1,0,0,0,757,758,7,13,
0,0,758,127,1,0,0,0,759,760,5,78,0,0,760,761,5,15,0,0,761,766,3,130,65,0,
762,763,5,8,0,0,763,765,3,130,65,0,764,762,1,0,0,0,765,768,1,0,0,0,766,764,
1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,766,1,0,0,0,769,770,5,22,0,0,
770,129,1,0,0,0,771,772,3,0,0,0,772,131,1,0,0,0,773,776,3,0,0,0,774,775,
5,11,0,0,775,777,3,136,68,0,776,774,1,0,0,0,776,777,1,0,0,0,777,779,1,0,
0,0,778,780,3,134,67,0,779,778,1,0,0,0,779,780,1,0,0,0,780,133,1,0,0,0,781,
782,5,79,0,0,782,783,3,144,72,0,783,135,1,0,0,0,784,785,3,144,72,0,785,137,
1,0,0,0,786,788,3,202,101,0,787,786,1,0,0,0,787,788,1,0,0,0,788,789,1,0,
0,0,789,790,5,97,0,0,790,792,3,140,70,0,791,793,3,36,18,0,792,791,1,0,0,
0,792,793,1,0,0,0,793,794,1,0,0,0,794,795,5,25,0,0,795,139,1,0,0,0,796,798,
7,14,0,0,797,796,1,0,0,0,797,798,1,0,0,0,798,799,1,0,0,0,799,800,3,144,72,
0,800,141,1,0,0,0,801,802,3,144,72,0,802,803,5,25,0,0,803,143,1,0,0,0,804,
807,3,146,73,0,805,806,7,15,0,0,806,808,3,144,72,0,807,805,1,0,0,0,807,808,
1,0,0,0,808,145,1,0,0,0,809,814,3,148,74,0,810,811,5,30,0,0,811,813,3,148,
74,0,812,810,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,
147,1,0,0,0,816,814,1,0,0,0,817,822,3,150,75,0,818,819,5,40,0,0,819,821,
3,150,75,0,820,818,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,
0,823,149,1,0,0,0,824,822,1,0,0,0,825,830,3,152,76,0,826,827,5,41,0,0,827,
829,3,152,76,0,828,826,1,0,0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,
0,0,0,831,151,1,0,0,0,832,830,1,0,0,0,833,838,3,154,77,0,834,835,5,32,0,
0,835,837,3,154,77,0,836,834,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,838,
839,1,0,0,0,839,153,1,0,0,0,840,838,1,0,0,0,841,846,3,156,78,0,842,843,5,
4,0,0,843,845,3,156,78,0,844,842,1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,
846,847,1,0,0,0,847,155,1,0,0,0,848,846,1,0,0,0,849,854,3,158,79,0,850,851,
5,34,0,0,851,853,3,158,79,0,852,850,1,0,0,0,853,856,1,0,0,0,854,852,1,0,
0,0,854,855,1,0,0,0,855,157,1,0,0,0,856,854,1,0,0,0,857,862,3,160,80,0,858,
859,7,16,0,0,859,861,3,160,80,0,860,858,1,0,0,0,861,864,1,0,0,0,862,860,
1,0,0,0,862,863,1,0,0,0,863,159,1,0,0,0,864,862,1,0,0,0,865,870,3,162,81,
0,866,867,7,17,0,0,867,869,3,162,81,0,868,866,1,0,0,0,869,872,1,0,0,0,870,
868,1,0,0,0,870,871,1,0,0,0,871,161,1,0,0,0,872,870,1,0,0,0,873,878,3,164,
82,0,874,875,7,18,0,0,875,877,3,164,82,0,876,874,1,0,0,0,877,880,1,0,0,0,
878,876,1,0,0,0,878,879,1,0,0,0,879,163,1,0,0,0,880,878,1,0,0,0,881,886,
3,166,83,0,882,883,7,19,0,0,883,885,3,166,83,0,884,882,1,0,0,0,885,888,1,
0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,165,1,0,0,0,888,886,1,0,0,0,889,
894,3,168,84,0,890,891,7,20,0,0,891,893,3,168,84,0,892,890,1,0,0,0,893,896,
1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,167,1,0,0,0,896,894,1,0,0,0,
897,902,3,170,85,0,898,899,5,38,0,0,899,901,3,170,85,0,900,898,1,0,0,0,901,
904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,169,1,0,0,0,904,902,1,0,
0,0,905,906,5,28,0,0,906,911,3,170,85,0,907,908,5,20,0,0,908,911,3,170,85,
0,909,911,3,172,86,0,910,905,1,0,0,0,910,907,1,0,0,0,910,909,1,0,0,0,911,
171,1,0,0,0,912,913,5,31,0,0,913,921,3,170,85,0,914,915,5,35,0,0,915,921,
3,170,85,0,916,918,3,192,96,0,917,919,7,21,0,0,918,917,1,0,0,0,918,919,1,
0,0,0,919,921,1,0,0,0,920,912,1,0,0,0,920,914,1,0,0,0,920,916,1,0,0,0,921,
173,1,0,0,0,922,923,5,104,0,0,923,924,5,19,0,0,924,927,3,144,72,0,925,926,
5,8,0,0,926,928,3,144,72,0,927,925,1,0,0,0,928,929,1,0,0,0,929,927,1,0,0,
0,929,930,1,0,0,0,930,931,1,0,0,0,931,932,5,24,0,0,932,175,1,0,0,0,933,934,
5,100,0,0,934,935,5,19,0,0,935,936,3,0,0,0,936,937,5,24,0,0,937,177,1,0,
0,0,938,939,5,98,0,0,939,940,5,19,0,0,940,941,3,194,97,0,941,942,5,24,0,
0,942,179,1,0,0,0,943,944,5,84,0,0,944,945,5,19,0,0,945,946,3,0,0,0,946,
947,5,24,0,0,947,181,1,0,0,0,948,949,5,106,0,0,949,950,3,0,0,0,950,951,5,
5,0,0,951,952,3,122,61,0,952,953,3,184,92,0,953,183,1,0,0,0,954,955,3,186,
93,0,955,959,5,15,0,0,956,958,3,116,58,0,957,956,1,0,0,0,958,961,1,0,0,0,
959,957,1,0,0,0,959,960,1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,962,964,
3,142,71,0,963,962,1,0,0,0,964,965,1,0,0,0,965,963,1,0,0,0,965,966,1,0,0,
0,966,967,1,0,0,0,967,968,5,22,0,0,968,185,1,0,0,0,969,971,5,19,0,0,970,
972,3,188,94,0,971,970,1,0,0,0,971,972,1,0,0,0,972,977,1,0,0,0,973,974,5,
8,0,0,974,976,3,188,94,0,975,973,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,
977,978,1,0,0,0,978,980,1,0,0,0,979,977,1,0,0,0,980,981,5,24,0,0,981,187,
1,0,0,0,982,983,3,0,0,0,983,984,5,5,0,0,984,985,3,122,61,0,985,189,1,0,0,
0,986,987,5,107,0,0,987,988,3,144,72,0,988,191,1,0,0,0,989,998,3,196,98,
0,990,998,3,194,97,0,991,998,3,86,43,0,992,998,3,178,89,0,993,998,3,176,
88,0,994,998,3,174,87,0,995,998,3,190,95,0,996,998,3,198,99,0,997,989,1,
0,0,0,997,990,1,0,0,0,997,991,1,0,0,0,997,992,1,0,0,0,997,993,1,0,0,0,997,
994,1,0,0,0,997,995,1,0,0,0,997,996,1,0,0,0,998,193,1,0,0,0,999,1002,3,0,
0,0,1000,1001,5,9,0,0,1001,1003,3,0,0,0,1002,1000,1,0,0,0,1002,1003,1,0,
0,0,1003,195,1,0,0,0,1004,1005,5,19,0,0,1005,1006,3,144,72,0,1006,1007,5,
24,0,0,1007,197,1,0,0,0,1008,1009,3,0,0,0,1009,1010,5,19,0,0,1010,1015,3,
144,72,0,1011,1012,5,8,0,0,1012,1014,3,144,72,0,1013,1011,1,0,0,0,1014,1017,
1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,1018,1,0,0,0,1017,1015,
1,0,0,0,1018,1019,5,24,0,0,1019,199,1,0,0,0,1020,1021,5,108,0,0,1021,1022,
3,196,98,0,1022,1025,3,142,71,0,1023,1024,5,109,0,0,1024,1026,3,142,71,0,
1025,1023,1,0,0,0,1025,1026,1,0,0,0,1026,201,1,0,0,0,1027,1028,5,3,0,0,1028,
1029,5,71,0,0,1029,1030,5,5,0,0,1030,1031,3,0,0,0,1031,203,1,0,0,0,107,217,
223,228,234,239,254,256,262,268,274,278,285,296,303,314,319,330,335,339,
341,349,358,367,381,383,392,395,398,406,416,431,441,449,469,477,485,492,
497,505,509,511,519,523,527,531,533,542,546,550,560,565,567,578,583,585,
589,593,597,599,610,615,617,628,633,635,639,648,652,654,669,697,710,725,
736,746,750,766,776,779,787,792,797,807,814,822,830,838,846,854,862,870,
878,886,894,902,910,918,920,929,959,965,971,977,997,1002,1015,1025];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CycloneParser extends antlr4.Parser {

    static grammarFileName = "CycloneParser.g4";
    static literalNames = [ null, "'->'", "'<->'", "'@'", "'|'", "':'", 
                            "'::'", "':='", "','", "'.'", "'..'", "'='", 
                            "'>'", "'>='", "'#'", "'{'", "'['", "'<'", "'<='", 
                            "'('", "'-'", "'!='", "'}'", "']'", "')'", "';'", 
                            "'/'", "'*'", "'+'", "'xor'", "'=>'", "'!'", 
                            "'^'", "'_'", "'&'", "'~'", "'++'", "'--'", 
                            "'**'", "'%'", "'||'", "'&&'", "'+='", "'-='", 
                            "'*='", "'/='", "'<<='", "'>>='", "'<<'", "'>>'", 
                            "'=='", "'global'", "'native'", "'debug'", "'log'", 
                            "'output'", "'trace'", "'precision'", "'timeout'", 
                            "'detect'", "'bvdisplay'", "'state'", "'node'", 
                            "'machine'", "'graph'", "'transition'", "'trans'", 
                            "'edge'", "'record'", "'const'", "'on'", "'label'", 
                            "'invariant'", "'int'", "'bool'", "'real'", 
                            "'char'", "'string'", "'enum'", "'where'", "'start'", 
                            "'final'", "'abstract'", "'normal'", "'prev'", 
                            "'goal'", "'check'", "'for'", "'stop'", "'at'", 
                            "'via'", "'condition'", "'reach'", "'with'", 
                            "'enumerate'", "'let'", "'each'", "'assert'", 
                            "'initial'", "'in'", "'fresh'", "'option-'", 
                            "'always'", "'some'", "'one'", "'upto'", "'function'", 
                            "'return'", "'if'", "'else'", "'bv'" ];
    static symbolicNames = [ null, "ARROW", "BI_ARROW", "AT_SIGN", "BAR", 
                             "COLON", "COLON_COLON", "COLON_EQUAL", "COMMA", 
                             "DOT", "DOTDOT", "EQUAL", "GREATER", "GREATER_EQUAL", 
                             "HASH", "LBRACE", "LBRACK", "LESS", "LESS_EQUAL", 
                             "LPAREN", "MINUS", "NOT_EQUAL", "RBRACE", "RBRACK", 
                             "RPAREN", "SEMI", "SLASH", "STAR", "PLUS", 
                             "XOR", "IMPLIES", "NOT", "HAT", "P_OP_ONE", 
                             "BIT_AND", "BIT_NEGATION", "PLUS_PLUS", "MINUS_MINUS", 
                             "TIMES_TIMES", "MOD", "OR", "AND", "ASSIGN_PLUS_EQ", 
                             "ASSIGN_MINUS_EQ", "ASSIGN_TIMES_EQ", "ASSIGN_DIV_EQ", 
                             "ASSIGN_SHIFT_LEFT", "ASSIGN_SHIFT_RIGHT", 
                             "SHIFT_LEFT", "SHIFT_RIGHT", "DOUBLE_EQUAL", 
                             "GLOBAL", "NATIVE", "DEBUG", "LOG", "OUTPUT", 
                             "TRACE", "PRECISION", "TIMEOUT", "DETECT", 
                             "BVDISPLAY", "STATE", "NODE", "MACHINE", "GRAPH", 
                             "TRANS1", "TRANS2", "EDGE", "RECORD", "CONST", 
                             "ON", "LABEL", "INVARIANT", "INT", "BOOL", 
                             "REAL", "CHAR", "STRING", "ENUM", "WHERE", 
                             "START", "FINAL", "ABSTRACT", "NORMAL", "PREV", 
                             "GOAL", "CHECK", "FOR", "STOP", "AT", "VIA", 
                             "CONDITION", "REACH", "WITH", "ENUMERATE", 
                             "LET", "EACH", "ASSERT", "INITIAL", "IN", "FRESH", 
                             "OPTION", "ALWAYS", "SOME", "ONE", "UPTO", 
                             "FUNCTION", "RETURN", "IF", "ELSE", "BV", "INTLITERAL", 
                             "BVLITERAL", "REALLITERAL", "CHARLITERAL", 
                             "STRINGLITERAL", "BOOLLITERAL", "ENUMLITERAL", 
                             "IDENT", "ML_COMMENT", "SL_COMMENT", "WS" ];
    static ruleNames = [ "identifier", "compOptions", "optionName", "statementList", 
                         "transList", "letOrPathAssignExpr", "globalDefinitions", 
                         "program", "machineDecl", "machineScope", "stateExpr", 
                         "stateScope", "trans", "transScope", "transOp", 
                         "transDef", "transExclExpr", "invariantExpression", 
                         "inExpr", "invariantScope", "goal", "checkExpr", 
                         "forExpr", "stopExpr", "viaExpr", "pathExprList", 
                         "withExpr", "letExpr", "pathAssignStatement", "pathCondAssignExpr", 
                         "pathExpr", "pathCondition", "orPathCondition", 
                         "andPathCondition", "xorPathCondition", "unaryPathCondition", 
                         "primaryCondition", "parPathCondition", "stateIncExpr", 
                         "pathPrimaryExpr", "pathOp", "label", "stateModifier", 
                         "literal", "intLiteral", "realLiteral", "boolLiteral", 
                         "stringLiteral", "charLiteral", "bvLiteral", "enumLiteral", 
                         "record", "recordScope", "recordVariableDeclGroup", 
                         "recordVariableDecl", "globalConstantGroup", "globalConstantDecl", 
                         "globalVariableGroup", "localVariableGroup", "modifier", 
                         "type", "primitiveBvType", "bvType", "primitiveType", 
                         "enumType", "enumDecl", "variableDeclarator", "whereExpr", 
                         "variableInitializer", "assertExpr", "assertMainExpr", 
                         "statement", "expression", "conditionalImpliesExpression", 
                         "conditionalOrExpression", "conditionalAndExpression", 
                         "conditionalXorExpression", "bitwiseOrExpression", 
                         "bitwiseAndExpression", "equalityExpression", "relationalExpression", 
                         "bitShiftExpression", "additiveExpression", "multiplicativeExpression", 
                         "powExpression", "unaryExpression", "unaryExpressionNotPlusMinus", 
                         "oneExpr", "freshExpr", "initialExpr", "prevExpr", 
                         "functionDeclaration", "functionBodyScope", "functionParamsDecl", 
                         "functionParam", "returnExpr", "primary", "dotIdentifierExpr", 
                         "parExpression", "funCall", "iteStatement", "annotationExpr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CycloneParser.ruleNames;
        this.literalNames = CycloneParser.literalNames;
        this.symbolicNames = CycloneParser.symbolicNames;
    }



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CycloneParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 204;
	        this.match(CycloneParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compOptions() {
	    let localctx = new CompOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CycloneParser.RULE_compOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 206;
	        this.match(CycloneParser.OPTION);
	        this.state = 207;
	        this.optionName();
	        this.state = 208;
	        this.match(CycloneParser.EQUAL);
	        this.state = 209;
	        this.literal();
	        this.state = 210;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionName() {
	    let localctx = new OptionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CycloneParser.RULE_optionName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 212;
	        _la = this._input.LA(1);
	        if(!(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 255) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CycloneParser.RULE_statementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 217;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 70147) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2089541) !== 0)) {
	            this.state = 214;
	            this.statement();
	            this.state = 219;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transList() {
	    let localctx = new TransListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CycloneParser.RULE_transList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 7) !== 0)) {
	            this.state = 220;
	            this.trans();
	            this.state = 225;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letOrPathAssignExpr() {
	    let localctx = new LetOrPathAssignExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CycloneParser.RULE_letOrPathAssignExpr);
	    try {
	        this.state = 228;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 226;
	            this.letExpr();
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 227;
	            this.pathAssignStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalDefinitions() {
	    let localctx = new GlobalDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CycloneParser.RULE_globalDefinitions);
	    try {
	        this.state = 234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	        case 78:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 230;
	            this.globalVariableGroup();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 231;
	            this.globalConstantGroup();
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 232;
	            this.record();
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 233;
	            this.functionDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CycloneParser.RULE_program);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===101) {
	            this.state = 236;
	            this.compOptions();
	            this.state = 241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 242;
	        this.machineDecl();
	        this.state = 243;
	        this.match(CycloneParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machineDecl() {
	    let localctx = new MachineDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CycloneParser.RULE_machineDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===64)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 246;
	        this.identifier();
	        this.state = 247;
	        this.machineScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machineScope() {
	    let localctx = new MachineScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CycloneParser.RULE_machineScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        this.match(CycloneParser.LBRACE);
	        this.state = 256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 1763) !== 0) || _la===106 || _la===110) {
	            this.state = 254;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 73:
	            case 74:
	            case 75:
	            case 77:
	            case 78:
	            case 110:
	                this.state = 250;
	                this.globalVariableGroup();
	                break;
	            case 69:
	                this.state = 251;
	                this.globalConstantGroup();
	                break;
	            case 68:
	                this.state = 252;
	                this.record();
	                break;
	            case 106:
	                this.state = 253;
	                this.functionDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 7864323) !== 0)) {
	            this.state = 259;
	            this.stateExpr();
	            this.state = 264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 7) !== 0)) {
	            this.state = 265;
	            this.trans();
	            this.state = 270;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===72) {
	            this.state = 271;
	            this.invariantExpression();
	            this.state = 276;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 278;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 277;
	            this.goal();
	        }

	        this.state = 280;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateExpr() {
	    let localctx = new StateExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CycloneParser.RULE_stateExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 15) !== 0)) {
	            this.state = 282;
	            this.stateModifier();
	            this.state = 287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 288;
	        _la = this._input.LA(1);
	        if(!(_la===61 || _la===62)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 289;
	        this.identifier();
	        this.state = 290;
	        this.stateScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateScope() {
	    let localctx = new StateScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CycloneParser.RULE_stateScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 292;
	        this.match(CycloneParser.LBRACE);
	        this.state = 296;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 70147) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2089541) !== 0)) {
	            this.state = 293;
	            this.statement();
	            this.state = 298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 299;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trans() {
	    let localctx = new TransContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CycloneParser.RULE_trans);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 301;
	        _la = this._input.LA(1);
	        if(!(((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 303;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 302;
	            this.identifier();
	        }

	        this.state = 305;
	        this.transScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transScope() {
	    let localctx = new TransScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CycloneParser.RULE_transScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 307;
	        this.match(CycloneParser.LBRACE);
	        this.state = 308;
	        this.identifier();

	        this.state = 309;
	        this.transOp();
	        this.state = 310;
	        this.transDef();
	        this.state = 314;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===70 || _la===71) {
	            this.state = 312;
	            _la = this._input.LA(1);
	            if(!(_la===70 || _la===71)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 313;
	            this.label();
	        }

	        this.state = 319;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 316;
	            this.whereExpr();
	            this.state = 317;
	            this.match(CycloneParser.SEMI);
	        }

	        this.state = 321;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transOp() {
	    let localctx = new TransOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CycloneParser.RULE_transOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 323;
	        _la = this._input.LA(1);
	        if(!(_la===1 || _la===2)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transDef() {
	    let localctx = new TransDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CycloneParser.RULE_transDef);
	    var _la = 0;
	    try {
	        this.state = 341;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 325;
	            this.identifier();
	            this.state = 330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===8) {
	                this.state = 326;
	                this.match(CycloneParser.COMMA);
	                this.state = 327;
	                this.identifier();
	                this.state = 332;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 333;
	            this.match(CycloneParser.STAR);
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 334;
	                this.transExclExpr();
	            }

	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 337;
	            this.match(CycloneParser.PLUS);
	            this.state = 339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 338;
	                this.transExclExpr();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transExclExpr() {
	    let localctx = new TransExclExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CycloneParser.RULE_transExclExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 343;
	        this.match(CycloneParser.LBRACK);
	        this.state = 344;
	        this.identifier();
	        this.state = 349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 345;
	            this.match(CycloneParser.COMMA);
	            this.state = 346;
	            this.identifier();
	            this.state = 351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 352;
	        this.match(CycloneParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantExpression() {
	    let localctx = new InvariantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CycloneParser.RULE_invariantExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354;
	        this.match(CycloneParser.INVARIANT);
	        this.state = 355;
	        this.identifier();
	        this.state = 356;
	        this.invariantScope();
	        this.state = 358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 357;
	            this.inExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inExpr() {
	    let localctx = new InExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CycloneParser.RULE_inExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 360;
	        this.match(CycloneParser.IN);
	        this.state = 361;
	        this.match(CycloneParser.LPAREN);
	        this.state = 362;
	        this.identifier();
	        this.state = 367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 363;
	            this.match(CycloneParser.COMMA);
	            this.state = 364;
	            this.identifier();
	            this.state = 369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 370;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantScope() {
	    let localctx = new InvariantScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CycloneParser.RULE_invariantScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this.match(CycloneParser.LBRACE);

	        this.state = 373;
	        this.statement();
	        this.state = 374;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goal() {
	    let localctx = new GoalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CycloneParser.RULE_goal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 376;
	        this.match(CycloneParser.GOAL);
	        this.state = 377;
	        this.match(CycloneParser.LBRACE);
	        this.state = 383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3 || ((((_la - 95)) & ~0x1f) === 0 && ((1 << (_la - 95)) & 8388613) !== 0)) {
	            this.state = 381;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 95:
	                this.state = 378;
	                this.letExpr();
	                break;
	            case 118:
	                this.state = 379;
	                this.pathAssignStatement();
	                break;
	            case 3:
	            case 97:
	                this.state = 380;
	                this.assertExpr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 386;
	        this.checkExpr();
	        this.state = 387;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkExpr() {
	    let localctx = new CheckExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CycloneParser.RULE_checkExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        _la = this._input.LA(1);
	        if(!(_la===86 || _la===94)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 390;
	        this.forExpr();
	        this.state = 392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90 || _la===91) {
	            this.state = 391;
	            this.viaExpr();
	        }

	        this.state = 395;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 394;
	            this.withExpr();
	        }

	        this.state = 398;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88 || _la===92) {
	            this.state = 397;
	            this.stopExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forExpr() {
	    let localctx = new ForExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CycloneParser.RULE_forExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 400;
	        _la = this._input.LA(1);
	        if(!(((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 262657) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 401;
	        this.intLiteral();
	        this.state = 406;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 402;
	            this.match(CycloneParser.COMMA);
	            this.state = 403;
	            this.intLiteral();
	            this.state = 408;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopExpr() {
	    let localctx = new StopExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CycloneParser.RULE_stopExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 409;
	        _la = this._input.LA(1);
	        if(!(_la===88 || _la===92)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 410;
	        this.match(CycloneParser.LPAREN);
	        this.state = 411;
	        this.identifier();
	        this.state = 416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 412;
	            this.match(CycloneParser.COMMA);
	            this.state = 413;
	            this.identifier();
	            this.state = 418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 419;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viaExpr() {
	    let localctx = new ViaExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CycloneParser.RULE_viaExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        _la = this._input.LA(1);
	        if(!(_la===90 || _la===91)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 422;
	        this.match(CycloneParser.LPAREN);
	        this.state = 423;
	        this.pathExprList();
	        this.state = 424;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExprList() {
	    let localctx = new PathExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CycloneParser.RULE_pathExprList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 426;
	        this.pathExpr();
	        this.state = 431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 427;
	            this.match(CycloneParser.COMMA);
	            this.state = 428;
	            this.pathExpr();
	            this.state = 433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withExpr() {
	    let localctx = new WithExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CycloneParser.RULE_withExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 434;
	        this.match(CycloneParser.WITH);
	        this.state = 435;
	        this.match(CycloneParser.LPAREN);

	        this.state = 436;
	        this.identifier();
	        this.state = 441;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 437;
	            this.match(CycloneParser.COMMA);
	            this.state = 438;
	            this.identifier();
	            this.state = 443;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 444;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letExpr() {
	    let localctx = new LetExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CycloneParser.RULE_letExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 446;
	        this.match(CycloneParser.LET);
	        this.state = 447;
	        this.identifier();
	        this.state = 449;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 448;
	            this.pathCondAssignExpr();
	        }

	        this.state = 451;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAssignStatement() {
	    let localctx = new PathAssignStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CycloneParser.RULE_pathAssignStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.identifier();
	        this.state = 454;
	        this.pathCondAssignExpr();
	        this.state = 455;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondAssignExpr() {
	    let localctx = new PathCondAssignExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CycloneParser.RULE_pathCondAssignExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.match(CycloneParser.EQUAL);
	        this.state = 458;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExpr() {
	    let localctx = new PathExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CycloneParser.RULE_pathExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondition() {
	    let localctx = new PathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CycloneParser.RULE_pathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this.orPathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orPathCondition() {
	    let localctx = new OrPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CycloneParser.RULE_orPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 464;
	        this.andPathCondition();
	        this.state = 469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===40) {
	            this.state = 465;
	            this.match(CycloneParser.OR);
	            this.state = 466;
	            this.andPathCondition();
	            this.state = 471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andPathCondition() {
	    let localctx = new AndPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CycloneParser.RULE_andPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 472;
	        this.xorPathCondition();
	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===41) {
	            this.state = 473;
	            this.match(CycloneParser.AND);
	            this.state = 474;
	            this.xorPathCondition();
	            this.state = 479;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xorPathCondition() {
	    let localctx = new XorPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CycloneParser.RULE_xorPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 480;
	        this.unaryPathCondition();
	        this.state = 485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===32) {
	            this.state = 481;
	            this.match(CycloneParser.HAT);
	            this.state = 482;
	            this.unaryPathCondition();
	            this.state = 487;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryPathCondition() {
	    let localctx = new UnaryPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CycloneParser.RULE_unaryPathCondition);
	    try {
	        this.state = 492;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 488;
	            this.match(CycloneParser.NOT);
	            this.state = 489;
	            this.unaryPathCondition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 490;
	            this.primaryCondition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 491;
	            this.parPathCondition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryCondition() {
	    let localctx = new PrimaryConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CycloneParser.RULE_primaryCondition);
	    try {
	        this.state = 497;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 494;
	            this.stateIncExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 495;
	            this.pathPrimaryExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 496;
	            this.boolLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parPathCondition() {
	    let localctx = new ParPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CycloneParser.RULE_parPathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this.match(CycloneParser.LPAREN);
	        this.state = 500;
	        this.pathCondition();
	        this.state = 501;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateIncExpr() {
	    let localctx = new StateIncExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CycloneParser.RULE_stateIncExpr);
	    var _la = 0;
	    try {
	        this.state = 550;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 511;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 48:
	            	this.state = 503;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 505;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 504;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 49:
	            	this.state = 507;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 509;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 508;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 118:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 513;
	            this.identifier();
	            this.state = 523;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	            if(la_===1) {
	                this.state = 514;
	                this.match(CycloneParser.HAT);
	                this.state = 515;
	                this.match(CycloneParser.LBRACE);
	                this.state = 516;
	                this.intLiteral();
	                this.state = 519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 517;
	                    this.match(CycloneParser.COLON);
	                    this.state = 518;
	                    this.intLiteral();
	                }

	                this.state = 521;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 533;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 48:
	            	this.state = 525;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 527;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 526;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 49:
	            	this.state = 529;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 531;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 530;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 535;
	            this.match(CycloneParser.LPAREN);
	            this.state = 536;
	            this.identifier();
	            this.state = 546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 537;
	                this.match(CycloneParser.HAT);
	                this.state = 538;
	                this.match(CycloneParser.LBRACE);
	                this.state = 539;
	                this.intLiteral();
	                this.state = 542;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 540;
	                    this.match(CycloneParser.COLON);
	                    this.state = 541;
	                    this.intLiteral();
	                }

	                this.state = 544;
	                this.match(CycloneParser.RBRACE);
	            }

	            this.state = 548;
	            this.match(CycloneParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimaryExpr() {
	    let localctx = new PathPrimaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CycloneParser.RULE_pathPrimaryExpr);
	    var _la = 0;
	    try {
	        this.state = 654;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 567;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 118:
	                this.state = 552;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 553;
	                this.pathOp();
	                this.state = 565;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 554;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 555;
	                    this.identifier();
	                    this.state = 560;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 556;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 557;
	                        this.identifier();
	                        this.state = 562;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 563;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 587; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 569;
	                this.match(CycloneParser.ARROW);
	                this.state = 585;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 118:
	                    this.state = 570;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 571;
	                    this.pathOp();
	                    this.state = 583;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 572;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 573;
	                        this.identifier();
	                        this.state = 578;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 574;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 575;
	                            this.identifier();
	                            this.state = 580;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 581;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 589; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            break;
	        case 19:
	        case 48:
	        case 49:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 599;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 48:
	            	this.state = 591;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 593;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 592;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 49:
	            	this.state = 595;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 597;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 596;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 601;
	            this.match(CycloneParser.LPAREN);
	            this.state = 617;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 118:
	                this.state = 602;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 603;
	                this.pathOp();
	                this.state = 615;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 604;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 605;
	                    this.identifier();
	                    this.state = 610;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 606;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 607;
	                        this.identifier();
	                        this.state = 612;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 613;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 637; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 619;
	                this.match(CycloneParser.ARROW);
	                this.state = 635;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 118:
	                    this.state = 620;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 621;
	                    this.pathOp();
	                    this.state = 633;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 622;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 623;
	                        this.identifier();
	                        this.state = 628;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 624;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 625;
	                            this.identifier();
	                            this.state = 630;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 631;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 639; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            this.state = 641;
	            this.match(CycloneParser.RPAREN);
	            this.state = 652;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	            if(la_===1) {
	                this.state = 642;
	                this.match(CycloneParser.HAT);
	                this.state = 643;
	                this.match(CycloneParser.LBRACE);
	                this.state = 644;
	                this.intLiteral();
	                this.state = 648;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 646;
	                    this.match(CycloneParser.COLON);
	                    this.state = 647;
	                    this.intLiteral();
	                }

	                this.state = 650;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOp() {
	    let localctx = new PathOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CycloneParser.RULE_pathOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 656;
	        this.match(CycloneParser.P_OP_ONE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CycloneParser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateModifier() {
	    let localctx = new StateModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CycloneParser.RULE_stateModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 660;
	        _la = this._input.LA(1);
	        if(!(((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CycloneParser.RULE_literal);
	    try {
	        this.state = 669;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 662;
	            this.intLiteral();
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 663;
	            this.realLiteral();
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 664;
	            this.boolLiteral();
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 665;
	            this.stringLiteral();
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 666;
	            this.charLiteral();
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 667;
	            this.enumLiteral();
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 668;
	            this.bvLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intLiteral() {
	    let localctx = new IntLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CycloneParser.RULE_intLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 671;
	        this.match(CycloneParser.INTLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realLiteral() {
	    let localctx = new RealLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CycloneParser.RULE_realLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this.match(CycloneParser.REALLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolLiteral() {
	    let localctx = new BoolLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CycloneParser.RULE_boolLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 675;
	        this.match(CycloneParser.BOOLLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CycloneParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLiteral() {
	    let localctx = new CharLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CycloneParser.RULE_charLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 679;
	        this.match(CycloneParser.CHARLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bvLiteral() {
	    let localctx = new BvLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CycloneParser.RULE_bvLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 681;
	        this.match(CycloneParser.BVLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumLiteral() {
	    let localctx = new EnumLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CycloneParser.RULE_enumLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this.match(CycloneParser.ENUMLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	record() {
	    let localctx = new RecordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CycloneParser.RULE_record);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this.match(CycloneParser.RECORD);
	        this.state = 686;
	        this.identifier();
	        this.state = 687;
	        this.recordScope();
	        this.state = 688;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordScope() {
	    let localctx = new RecordScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CycloneParser.RULE_recordScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 690;
	        this.match(CycloneParser.LBRACE);
	        this.state = 691;
	        this.recordVariableDeclGroup();
	        this.state = 692;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDeclGroup() {
	    let localctx = new RecordVariableDeclGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CycloneParser.RULE_recordVariableDeclGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 694;
	            this.recordVariableDecl();
	            this.state = 697; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 55) !== 0) || _la===110);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDecl() {
	    let localctx = new RecordVariableDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CycloneParser.RULE_recordVariableDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 699;
	        this.type();
	        this.state = 700;
	        this.variableDeclarator();
	        this.state = 701;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstantGroup() {
	    let localctx = new GlobalConstantGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CycloneParser.RULE_globalConstantGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 703;
	        this.match(CycloneParser.CONST);
	        this.state = 704;
	        this.type();
	        this.state = 705;
	        this.globalConstantDecl();
	        this.state = 710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 706;
	            this.match(CycloneParser.COMMA);
	            this.state = 707;
	            this.globalConstantDecl();
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 713;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstantDecl() {
	    let localctx = new GlobalConstantDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CycloneParser.RULE_globalConstantDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715;
	        this.identifier();
	        this.state = 716;
	        this.match(CycloneParser.EQUAL);
	        this.state = 717;
	        this.variableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalVariableGroup() {
	    let localctx = new GlobalVariableGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CycloneParser.RULE_globalVariableGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 719;
	        this.type();
	        this.state = 720;
	        this.variableDeclarator();
	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 721;
	            this.match(CycloneParser.COMMA);
	            this.state = 722;
	            this.variableDeclarator();
	            this.state = 727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 728;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableGroup() {
	    let localctx = new LocalVariableGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CycloneParser.RULE_localVariableGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 730;
	        this.type();
	        this.state = 731;
	        this.variableDeclarator();
	        this.state = 736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 732;
	            this.match(CycloneParser.COMMA);
	            this.state = 733;
	            this.variableDeclarator();
	            this.state = 738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 739;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CycloneParser.RULE_modifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        _la = this._input.LA(1);
	        if(!(_la===51 || _la===52)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CycloneParser.RULE_type);
	    try {
	        this.state = 746;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 743;
	            this.primitiveType();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 744;
	            this.enumType();
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 745;
	            this.bvType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveBvType() {
	    let localctx = new PrimitiveBvTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CycloneParser.RULE_primitiveBvType);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 748;
	            this.primitiveType();
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 749;
	            this.bvType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bvType() {
	    let localctx = new BvTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CycloneParser.RULE_bvType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this.match(CycloneParser.BV);
	        this.state = 753;
	        this.match(CycloneParser.LBRACK);
	        this.state = 754;
	        _la = this._input.LA(1);
	        if(!(_la===111 || _la===118)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 755;
	        this.match(CycloneParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CycloneParser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        _la = this._input.LA(1);
	        if(!(((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 23) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumType() {
	    let localctx = new EnumTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CycloneParser.RULE_enumType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.match(CycloneParser.ENUM);
	        this.state = 760;
	        this.match(CycloneParser.LBRACE);
	        this.state = 761;
	        this.enumDecl();
	        this.state = 766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 762;
	            this.match(CycloneParser.COMMA);
	            this.state = 763;
	            this.enumDecl();
	            this.state = 768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 769;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDecl() {
	    let localctx = new EnumDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CycloneParser.RULE_enumDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 771;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CycloneParser.RULE_variableDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 773;
	        this.identifier();
	        this.state = 776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 774;
	            this.match(CycloneParser.EQUAL);
	            this.state = 775;
	            this.variableInitializer();
	        }

	        this.state = 779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 778;
	            this.whereExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereExpr() {
	    let localctx = new WhereExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CycloneParser.RULE_whereExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 781;
	        this.match(CycloneParser.WHERE);
	        this.state = 782;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CycloneParser.RULE_variableInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 784;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertExpr() {
	    let localctx = new AssertExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CycloneParser.RULE_assertExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 786;
	            this.annotationExpr();
	        }

	        this.state = 789;
	        this.match(CycloneParser.ASSERT);
	        this.state = 790;
	        this.assertMainExpr();
	        this.state = 792;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 791;
	            this.inExpr();
	        }

	        this.state = 794;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertMainExpr() {
	    let localctx = new AssertMainExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CycloneParser.RULE_assertMainExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102 || _la===103) {
	            this.state = 796;
	            _la = this._input.LA(1);
	            if(!(_la===102 || _la===103)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 799;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CycloneParser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 801;
	        this.expression();
	        this.state = 802;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CycloneParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 804;
	        this.conditionalImpliesExpression();
	        this.state = 807;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        if(la_===1) {
	            this.state = 805;
	            _la = this._input.LA(1);
	            if(!(_la===11 || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 63) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 806;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalImpliesExpression() {
	    let localctx = new ConditionalImpliesExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CycloneParser.RULE_conditionalImpliesExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 809;
	        this.conditionalOrExpression();
	        this.state = 814;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 810;
	                this.match(CycloneParser.IMPLIES);
	                this.state = 811;
	                this.conditionalOrExpression(); 
	            }
	            this.state = 816;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpression() {
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CycloneParser.RULE_conditionalOrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 817;
	        this.conditionalAndExpression();
	        this.state = 822;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 818;
	                this.match(CycloneParser.OR);
	                this.state = 819;
	                this.conditionalAndExpression(); 
	            }
	            this.state = 824;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpression() {
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CycloneParser.RULE_conditionalAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 825;
	        this.conditionalXorExpression();
	        this.state = 830;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 826;
	                this.match(CycloneParser.AND);
	                this.state = 827;
	                this.conditionalXorExpression(); 
	            }
	            this.state = 832;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalXorExpression() {
	    let localctx = new ConditionalXorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CycloneParser.RULE_conditionalXorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 833;
	        this.bitwiseOrExpression();
	        this.state = 838;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 834;
	                this.match(CycloneParser.HAT);
	                this.state = 835;
	                this.bitwiseOrExpression(); 
	            }
	            this.state = 840;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseOrExpression() {
	    let localctx = new BitwiseOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CycloneParser.RULE_bitwiseOrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this.bitwiseAndExpression();
	        this.state = 846;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 842;
	                this.match(CycloneParser.BAR);
	                this.state = 843;
	                this.bitwiseAndExpression(); 
	            }
	            this.state = 848;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseAndExpression() {
	    let localctx = new BitwiseAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CycloneParser.RULE_bitwiseAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 849;
	        this.equalityExpression();
	        this.state = 854;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 850;
	                this.match(CycloneParser.BIT_AND);
	                this.state = 851;
	                this.equalityExpression(); 
	            }
	            this.state = 856;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CycloneParser.RULE_equalityExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 857;
	        this.relationalExpression();
	        this.state = 862;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 858;
	                _la = this._input.LA(1);
	                if(!(_la===21 || _la===50)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 859;
	                this.relationalExpression(); 
	            }
	            this.state = 864;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CycloneParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        this.bitShiftExpression();
	        this.state = 870;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 866;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 405504) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 867;
	                this.bitShiftExpression(); 
	            }
	            this.state = 872;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitShiftExpression() {
	    let localctx = new BitShiftExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CycloneParser.RULE_bitShiftExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 873;
	        this.additiveExpression();
	        this.state = 878;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 874;
	                _la = this._input.LA(1);
	                if(!(_la===48 || _la===49)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 875;
	                this.additiveExpression(); 
	            }
	            this.state = 880;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CycloneParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 881;
	        this.multiplicativeExpression();
	        this.state = 886;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 882;
	                _la = this._input.LA(1);
	                if(!(_la===20 || _la===28)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 883;
	                this.multiplicativeExpression(); 
	            }
	            this.state = 888;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CycloneParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 889;
	        this.powExpression();
	        this.state = 894;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 890;
	                _la = this._input.LA(1);
	                if(!(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 8195) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 891;
	                this.powExpression(); 
	            }
	            this.state = 896;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powExpression() {
	    let localctx = new PowExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CycloneParser.RULE_powExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 897;
	        this.unaryExpression();
	        this.state = 902;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 898;
	                this.match(CycloneParser.TIMES_TIMES);
	                this.state = 899;
	                this.unaryExpression(); 
	            }
	            this.state = 904;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CycloneParser.RULE_unaryExpression);
	    try {
	        this.state = 910;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 905;
	            this.match(CycloneParser.PLUS);
	            this.state = 906;
	            this.unaryExpression();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 907;
	            this.match(CycloneParser.MINUS);
	            this.state = 908;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 31:
	        case 35:
	        case 98:
	        case 100:
	        case 104:
	        case 107:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 909;
	            this.unaryExpressionNotPlusMinus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpressionNotPlusMinus() {
	    let localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CycloneParser.RULE_unaryExpressionNotPlusMinus);
	    var _la = 0;
	    try {
	        this.state = 920;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 31:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 912;
	            this.match(CycloneParser.NOT);
	            this.state = 913;
	            this.unaryExpression();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 914;
	            this.match(CycloneParser.BIT_NEGATION);
	            this.state = 915;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 98:
	        case 100:
	        case 104:
	        case 107:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 916;
	            this.primary();
	            this.state = 918;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	            if(la_===1) {
	                this.state = 917;
	                _la = this._input.LA(1);
	                if(!(_la===36 || _la===37)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oneExpr() {
	    let localctx = new OneExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CycloneParser.RULE_oneExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        this.match(CycloneParser.ONE);
	        this.state = 923;
	        this.match(CycloneParser.LPAREN);
	        this.state = 924;
	        this.expression();
	        this.state = 927; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 925;
	            this.match(CycloneParser.COMMA);
	            this.state = 926;
	            this.expression();
	            this.state = 929; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===8);
	        this.state = 931;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freshExpr() {
	    let localctx = new FreshExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CycloneParser.RULE_freshExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        this.match(CycloneParser.FRESH);
	        this.state = 934;
	        this.match(CycloneParser.LPAREN);
	        this.state = 935;
	        this.identifier();
	        this.state = 936;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initialExpr() {
	    let localctx = new InitialExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CycloneParser.RULE_initialExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 938;
	        this.match(CycloneParser.INITIAL);
	        this.state = 939;
	        this.match(CycloneParser.LPAREN);
	        this.state = 940;
	        this.dotIdentifierExpr();
	        this.state = 941;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prevExpr() {
	    let localctx = new PrevExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CycloneParser.RULE_prevExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 943;
	        this.match(CycloneParser.PREV);
	        this.state = 944;
	        this.match(CycloneParser.LPAREN);
	        this.state = 945;
	        this.identifier();
	        this.state = 946;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CycloneParser.RULE_functionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 948;
	        this.match(CycloneParser.FUNCTION);

	        this.state = 949;
	        this.identifier();
	        this.state = 950;
	        this.match(CycloneParser.COLON);
	        this.state = 951;
	        this.primitiveBvType();
	        this.state = 952;
	        this.functionBodyScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBodyScope() {
	    let localctx = new FunctionBodyScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CycloneParser.RULE_functionBodyScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 954;
	        this.functionParamsDecl();
	        this.state = 955;
	        this.match(CycloneParser.LBRACE);
	        this.state = 959;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 55) !== 0) || _la===110) {
	            this.state = 956;
	            this.localVariableGroup();
	            this.state = 961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 963; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 962;
	            this.statement();
	            this.state = 965; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 70147) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2089541) !== 0));
	        this.state = 967;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParamsDecl() {
	    let localctx = new FunctionParamsDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CycloneParser.RULE_functionParamsDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this.match(CycloneParser.LPAREN);
	        this.state = 971;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 970;
	            this.functionParam();
	        }

	        this.state = 977;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 973;
	            this.match(CycloneParser.COMMA);
	            this.state = 974;
	            this.functionParam();
	            this.state = 979;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 980;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParam() {
	    let localctx = new FunctionParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CycloneParser.RULE_functionParam);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 982;
	        this.identifier();
	        this.state = 983;
	        this.match(CycloneParser.COLON);
	        this.state = 984;
	        this.primitiveBvType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnExpr() {
	    let localctx = new ReturnExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CycloneParser.RULE_returnExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 986;
	        this.match(CycloneParser.RETURN);
	        this.state = 987;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, CycloneParser.RULE_primary);
	    try {
	        this.state = 997;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 989;
	            this.parExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 990;
	            this.dotIdentifierExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 991;
	            this.literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 992;
	            this.initialExpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 993;
	            this.freshExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 994;
	            this.oneExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 995;
	            this.returnExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 996;
	            this.funCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotIdentifierExpr() {
	    let localctx = new DotIdentifierExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CycloneParser.RULE_dotIdentifierExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 999;
	        this.identifier();
	        this.state = 1002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 1000;
	            this.match(CycloneParser.DOT);
	            this.state = 1001;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parExpression() {
	    let localctx = new ParExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, CycloneParser.RULE_parExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1004;
	        this.match(CycloneParser.LPAREN);
	        this.state = 1005;
	        this.expression();
	        this.state = 1006;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funCall() {
	    let localctx = new FunCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, CycloneParser.RULE_funCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1008;
	        this.identifier();
	        this.state = 1009;
	        this.match(CycloneParser.LPAREN);
	        this.state = 1010;
	        this.expression();
	        this.state = 1015;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 1011;
	            this.match(CycloneParser.COMMA);
	            this.state = 1012;
	            this.expression();
	            this.state = 1017;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1018;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteStatement() {
	    let localctx = new IteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, CycloneParser.RULE_iteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1020;
	        this.match(CycloneParser.IF);
	        this.state = 1021;
	        this.parExpression();
	        this.state = 1022;
	        this.statement();
	        this.state = 1025;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 1023;
	            this.match(CycloneParser.ELSE);
	            this.state = 1024;
	            this.statement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationExpr() {
	    let localctx = new AnnotationExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, CycloneParser.RULE_annotationExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1027;
	        this.match(CycloneParser.AT_SIGN);
	        this.state = 1028;
	        this.match(CycloneParser.LABEL);
	        this.state = 1029;
	        this.match(CycloneParser.COLON);
	        this.state = 1030;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CycloneParser.EOF = antlr4.Token.EOF;
CycloneParser.ARROW = 1;
CycloneParser.BI_ARROW = 2;
CycloneParser.AT_SIGN = 3;
CycloneParser.BAR = 4;
CycloneParser.COLON = 5;
CycloneParser.COLON_COLON = 6;
CycloneParser.COLON_EQUAL = 7;
CycloneParser.COMMA = 8;
CycloneParser.DOT = 9;
CycloneParser.DOTDOT = 10;
CycloneParser.EQUAL = 11;
CycloneParser.GREATER = 12;
CycloneParser.GREATER_EQUAL = 13;
CycloneParser.HASH = 14;
CycloneParser.LBRACE = 15;
CycloneParser.LBRACK = 16;
CycloneParser.LESS = 17;
CycloneParser.LESS_EQUAL = 18;
CycloneParser.LPAREN = 19;
CycloneParser.MINUS = 20;
CycloneParser.NOT_EQUAL = 21;
CycloneParser.RBRACE = 22;
CycloneParser.RBRACK = 23;
CycloneParser.RPAREN = 24;
CycloneParser.SEMI = 25;
CycloneParser.SLASH = 26;
CycloneParser.STAR = 27;
CycloneParser.PLUS = 28;
CycloneParser.XOR = 29;
CycloneParser.IMPLIES = 30;
CycloneParser.NOT = 31;
CycloneParser.HAT = 32;
CycloneParser.P_OP_ONE = 33;
CycloneParser.BIT_AND = 34;
CycloneParser.BIT_NEGATION = 35;
CycloneParser.PLUS_PLUS = 36;
CycloneParser.MINUS_MINUS = 37;
CycloneParser.TIMES_TIMES = 38;
CycloneParser.MOD = 39;
CycloneParser.OR = 40;
CycloneParser.AND = 41;
CycloneParser.ASSIGN_PLUS_EQ = 42;
CycloneParser.ASSIGN_MINUS_EQ = 43;
CycloneParser.ASSIGN_TIMES_EQ = 44;
CycloneParser.ASSIGN_DIV_EQ = 45;
CycloneParser.ASSIGN_SHIFT_LEFT = 46;
CycloneParser.ASSIGN_SHIFT_RIGHT = 47;
CycloneParser.SHIFT_LEFT = 48;
CycloneParser.SHIFT_RIGHT = 49;
CycloneParser.DOUBLE_EQUAL = 50;
CycloneParser.GLOBAL = 51;
CycloneParser.NATIVE = 52;
CycloneParser.DEBUG = 53;
CycloneParser.LOG = 54;
CycloneParser.OUTPUT = 55;
CycloneParser.TRACE = 56;
CycloneParser.PRECISION = 57;
CycloneParser.TIMEOUT = 58;
CycloneParser.DETECT = 59;
CycloneParser.BVDISPLAY = 60;
CycloneParser.STATE = 61;
CycloneParser.NODE = 62;
CycloneParser.MACHINE = 63;
CycloneParser.GRAPH = 64;
CycloneParser.TRANS1 = 65;
CycloneParser.TRANS2 = 66;
CycloneParser.EDGE = 67;
CycloneParser.RECORD = 68;
CycloneParser.CONST = 69;
CycloneParser.ON = 70;
CycloneParser.LABEL = 71;
CycloneParser.INVARIANT = 72;
CycloneParser.INT = 73;
CycloneParser.BOOL = 74;
CycloneParser.REAL = 75;
CycloneParser.CHAR = 76;
CycloneParser.STRING = 77;
CycloneParser.ENUM = 78;
CycloneParser.WHERE = 79;
CycloneParser.START = 80;
CycloneParser.FINAL = 81;
CycloneParser.ABSTRACT = 82;
CycloneParser.NORMAL = 83;
CycloneParser.PREV = 84;
CycloneParser.GOAL = 85;
CycloneParser.CHECK = 86;
CycloneParser.FOR = 87;
CycloneParser.STOP = 88;
CycloneParser.AT = 89;
CycloneParser.VIA = 90;
CycloneParser.CONDITION = 91;
CycloneParser.REACH = 92;
CycloneParser.WITH = 93;
CycloneParser.ENUMERATE = 94;
CycloneParser.LET = 95;
CycloneParser.EACH = 96;
CycloneParser.ASSERT = 97;
CycloneParser.INITIAL = 98;
CycloneParser.IN = 99;
CycloneParser.FRESH = 100;
CycloneParser.OPTION = 101;
CycloneParser.ALWAYS = 102;
CycloneParser.SOME = 103;
CycloneParser.ONE = 104;
CycloneParser.UPTO = 105;
CycloneParser.FUNCTION = 106;
CycloneParser.RETURN = 107;
CycloneParser.IF = 108;
CycloneParser.ELSE = 109;
CycloneParser.BV = 110;
CycloneParser.INTLITERAL = 111;
CycloneParser.BVLITERAL = 112;
CycloneParser.REALLITERAL = 113;
CycloneParser.CHARLITERAL = 114;
CycloneParser.STRINGLITERAL = 115;
CycloneParser.BOOLLITERAL = 116;
CycloneParser.ENUMLITERAL = 117;
CycloneParser.IDENT = 118;
CycloneParser.ML_COMMENT = 119;
CycloneParser.SL_COMMENT = 120;
CycloneParser.WS = 121;

CycloneParser.RULE_identifier = 0;
CycloneParser.RULE_compOptions = 1;
CycloneParser.RULE_optionName = 2;
CycloneParser.RULE_statementList = 3;
CycloneParser.RULE_transList = 4;
CycloneParser.RULE_letOrPathAssignExpr = 5;
CycloneParser.RULE_globalDefinitions = 6;
CycloneParser.RULE_program = 7;
CycloneParser.RULE_machineDecl = 8;
CycloneParser.RULE_machineScope = 9;
CycloneParser.RULE_stateExpr = 10;
CycloneParser.RULE_stateScope = 11;
CycloneParser.RULE_trans = 12;
CycloneParser.RULE_transScope = 13;
CycloneParser.RULE_transOp = 14;
CycloneParser.RULE_transDef = 15;
CycloneParser.RULE_transExclExpr = 16;
CycloneParser.RULE_invariantExpression = 17;
CycloneParser.RULE_inExpr = 18;
CycloneParser.RULE_invariantScope = 19;
CycloneParser.RULE_goal = 20;
CycloneParser.RULE_checkExpr = 21;
CycloneParser.RULE_forExpr = 22;
CycloneParser.RULE_stopExpr = 23;
CycloneParser.RULE_viaExpr = 24;
CycloneParser.RULE_pathExprList = 25;
CycloneParser.RULE_withExpr = 26;
CycloneParser.RULE_letExpr = 27;
CycloneParser.RULE_pathAssignStatement = 28;
CycloneParser.RULE_pathCondAssignExpr = 29;
CycloneParser.RULE_pathExpr = 30;
CycloneParser.RULE_pathCondition = 31;
CycloneParser.RULE_orPathCondition = 32;
CycloneParser.RULE_andPathCondition = 33;
CycloneParser.RULE_xorPathCondition = 34;
CycloneParser.RULE_unaryPathCondition = 35;
CycloneParser.RULE_primaryCondition = 36;
CycloneParser.RULE_parPathCondition = 37;
CycloneParser.RULE_stateIncExpr = 38;
CycloneParser.RULE_pathPrimaryExpr = 39;
CycloneParser.RULE_pathOp = 40;
CycloneParser.RULE_label = 41;
CycloneParser.RULE_stateModifier = 42;
CycloneParser.RULE_literal = 43;
CycloneParser.RULE_intLiteral = 44;
CycloneParser.RULE_realLiteral = 45;
CycloneParser.RULE_boolLiteral = 46;
CycloneParser.RULE_stringLiteral = 47;
CycloneParser.RULE_charLiteral = 48;
CycloneParser.RULE_bvLiteral = 49;
CycloneParser.RULE_enumLiteral = 50;
CycloneParser.RULE_record = 51;
CycloneParser.RULE_recordScope = 52;
CycloneParser.RULE_recordVariableDeclGroup = 53;
CycloneParser.RULE_recordVariableDecl = 54;
CycloneParser.RULE_globalConstantGroup = 55;
CycloneParser.RULE_globalConstantDecl = 56;
CycloneParser.RULE_globalVariableGroup = 57;
CycloneParser.RULE_localVariableGroup = 58;
CycloneParser.RULE_modifier = 59;
CycloneParser.RULE_type = 60;
CycloneParser.RULE_primitiveBvType = 61;
CycloneParser.RULE_bvType = 62;
CycloneParser.RULE_primitiveType = 63;
CycloneParser.RULE_enumType = 64;
CycloneParser.RULE_enumDecl = 65;
CycloneParser.RULE_variableDeclarator = 66;
CycloneParser.RULE_whereExpr = 67;
CycloneParser.RULE_variableInitializer = 68;
CycloneParser.RULE_assertExpr = 69;
CycloneParser.RULE_assertMainExpr = 70;
CycloneParser.RULE_statement = 71;
CycloneParser.RULE_expression = 72;
CycloneParser.RULE_conditionalImpliesExpression = 73;
CycloneParser.RULE_conditionalOrExpression = 74;
CycloneParser.RULE_conditionalAndExpression = 75;
CycloneParser.RULE_conditionalXorExpression = 76;
CycloneParser.RULE_bitwiseOrExpression = 77;
CycloneParser.RULE_bitwiseAndExpression = 78;
CycloneParser.RULE_equalityExpression = 79;
CycloneParser.RULE_relationalExpression = 80;
CycloneParser.RULE_bitShiftExpression = 81;
CycloneParser.RULE_additiveExpression = 82;
CycloneParser.RULE_multiplicativeExpression = 83;
CycloneParser.RULE_powExpression = 84;
CycloneParser.RULE_unaryExpression = 85;
CycloneParser.RULE_unaryExpressionNotPlusMinus = 86;
CycloneParser.RULE_oneExpr = 87;
CycloneParser.RULE_freshExpr = 88;
CycloneParser.RULE_initialExpr = 89;
CycloneParser.RULE_prevExpr = 90;
CycloneParser.RULE_functionDeclaration = 91;
CycloneParser.RULE_functionBodyScope = 92;
CycloneParser.RULE_functionParamsDecl = 93;
CycloneParser.RULE_functionParam = 94;
CycloneParser.RULE_returnExpr = 95;
CycloneParser.RULE_primary = 96;
CycloneParser.RULE_dotIdentifierExpr = 97;
CycloneParser.RULE_parExpression = 98;
CycloneParser.RULE_funCall = 99;
CycloneParser.RULE_iteStatement = 100;
CycloneParser.RULE_annotationExpr = 101;

class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_identifier;
    }

	IDENT() {
	    return this.getToken(CycloneParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class CompOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_compOptions;
    }

	OPTION() {
	    return this.getToken(CycloneParser.OPTION, 0);
	};

	optionName() {
	    return this.getTypedRuleContext(OptionNameContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCompOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCompOptions(this);
		}
	}


}



class OptionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_optionName;
    }

	DEBUG() {
	    return this.getToken(CycloneParser.DEBUG, 0);
	};

	LOG() {
	    return this.getToken(CycloneParser.LOG, 0);
	};

	OUTPUT() {
	    return this.getToken(CycloneParser.OUTPUT, 0);
	};

	TRACE() {
	    return this.getToken(CycloneParser.TRACE, 0);
	};

	PRECISION() {
	    return this.getToken(CycloneParser.PRECISION, 0);
	};

	TIMEOUT() {
	    return this.getToken(CycloneParser.TIMEOUT, 0);
	};

	DETECT() {
	    return this.getToken(CycloneParser.DETECT, 0);
	};

	BVDISPLAY() {
	    return this.getToken(CycloneParser.BVDISPLAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOptionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOptionName(this);
		}
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStatementList(this);
		}
	}


}



class TransListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transList;
    }

	trans = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransContext);
	    } else {
	        return this.getTypedRuleContext(TransContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransList(this);
		}
	}


}



class LetOrPathAssignExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_letOrPathAssignExpr;
    }

	letExpr() {
	    return this.getTypedRuleContext(LetExprContext,0);
	};

	pathAssignStatement() {
	    return this.getTypedRuleContext(PathAssignStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLetOrPathAssignExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLetOrPathAssignExpr(this);
		}
	}


}



class GlobalDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalDefinitions;
    }

	globalVariableGroup() {
	    return this.getTypedRuleContext(GlobalVariableGroupContext,0);
	};

	globalConstantGroup() {
	    return this.getTypedRuleContext(GlobalConstantGroupContext,0);
	};

	record() {
	    return this.getTypedRuleContext(RecordContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalDefinitions(this);
		}
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_program;
    }

	machineDecl() {
	    return this.getTypedRuleContext(MachineDeclContext,0);
	};

	EOF() {
	    return this.getToken(CycloneParser.EOF, 0);
	};

	compOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompOptionsContext);
	    } else {
	        return this.getTypedRuleContext(CompOptionsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitProgram(this);
		}
	}


}



class MachineDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machineDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	machineScope() {
	    return this.getTypedRuleContext(MachineScopeContext,0);
	};

	MACHINE() {
	    return this.getToken(CycloneParser.MACHINE, 0);
	};

	GRAPH() {
	    return this.getToken(CycloneParser.GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachineDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachineDecl(this);
		}
	}


}



class MachineScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machineScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	stateExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateExprContext);
	    } else {
	        return this.getTypedRuleContext(StateExprContext,i);
	    }
	};

	trans = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransContext);
	    } else {
	        return this.getTypedRuleContext(TransContext,i);
	    }
	};

	invariantExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InvariantExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InvariantExpressionContext,i);
	    }
	};

	goal() {
	    return this.getTypedRuleContext(GoalContext,0);
	};

	globalVariableGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalVariableGroupContext);
	    } else {
	        return this.getTypedRuleContext(GlobalVariableGroupContext,i);
	    }
	};

	globalConstantGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalConstantGroupContext);
	    } else {
	        return this.getTypedRuleContext(GlobalConstantGroupContext,i);
	    }
	};

	record = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordContext);
	    } else {
	        return this.getTypedRuleContext(RecordContext,i);
	    }
	};

	functionDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachineScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachineScope(this);
		}
	}


}



class StateExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	stateScope() {
	    return this.getTypedRuleContext(StateScopeContext,0);
	};

	STATE() {
	    return this.getToken(CycloneParser.STATE, 0);
	};

	NODE() {
	    return this.getToken(CycloneParser.NODE, 0);
	};

	stateModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateModifierContext);
	    } else {
	        return this.getTypedRuleContext(StateModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateExpr(this);
		}
	}


}



class StateScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateScope(this);
		}
	}


}



class TransContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_trans;
    }

	transScope() {
	    return this.getTypedRuleContext(TransScopeContext,0);
	};

	TRANS1() {
	    return this.getToken(CycloneParser.TRANS1, 0);
	};

	TRANS2() {
	    return this.getToken(CycloneParser.TRANS2, 0);
	};

	EDGE() {
	    return this.getToken(CycloneParser.EDGE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTrans(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTrans(this);
		}
	}


}



class TransScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	transOp() {
	    return this.getTypedRuleContext(TransOpContext,0);
	};

	transDef() {
	    return this.getTypedRuleContext(TransDefContext,0);
	};

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	ON() {
	    return this.getToken(CycloneParser.ON, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransScope(this);
		}
	}


}



class TransOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transOp;
    }

	ARROW() {
	    return this.getToken(CycloneParser.ARROW, 0);
	};

	BI_ARROW() {
	    return this.getToken(CycloneParser.BI_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransOp(this);
		}
	}


}



class TransDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transDef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	STAR() {
	    return this.getToken(CycloneParser.STAR, 0);
	};

	transExclExpr() {
	    return this.getTypedRuleContext(TransExclExprContext,0);
	};

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransDef(this);
		}
	}


}



class TransExclExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transExclExpr;
    }

	LBRACK() {
	    return this.getToken(CycloneParser.LBRACK, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RBRACK() {
	    return this.getToken(CycloneParser.RBRACK, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransExclExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransExclExpr(this);
		}
	}


}



class InvariantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantExpression;
    }

	INVARIANT() {
	    return this.getToken(CycloneParser.INVARIANT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	invariantScope() {
	    return this.getTypedRuleContext(InvariantScopeContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantExpression(this);
		}
	}


}



class InExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_inExpr;
    }

	IN() {
	    return this.getToken(CycloneParser.IN, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInExpr(this);
		}
	}


}



class InvariantScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantScope(this);
		}
	}


}



class GoalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_goal;
    }

	GOAL() {
	    return this.getToken(CycloneParser.GOAL, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	checkExpr() {
	    return this.getTypedRuleContext(CheckExprContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	letExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetExprContext);
	    } else {
	        return this.getTypedRuleContext(LetExprContext,i);
	    }
	};

	pathAssignStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathAssignStatementContext);
	    } else {
	        return this.getTypedRuleContext(PathAssignStatementContext,i);
	    }
	};

	assertExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssertExprContext);
	    } else {
	        return this.getTypedRuleContext(AssertExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGoal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGoal(this);
		}
	}


}



class CheckExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_checkExpr;
    }

	forExpr() {
	    return this.getTypedRuleContext(ForExprContext,0);
	};

	CHECK() {
	    return this.getToken(CycloneParser.CHECK, 0);
	};

	ENUMERATE() {
	    return this.getToken(CycloneParser.ENUMERATE, 0);
	};

	viaExpr() {
	    return this.getTypedRuleContext(ViaExprContext,0);
	};

	withExpr() {
	    return this.getTypedRuleContext(WithExprContext,0);
	};

	stopExpr() {
	    return this.getTypedRuleContext(StopExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCheckExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCheckExpr(this);
		}
	}


}



class ForExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_forExpr;
    }

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	FOR() {
	    return this.getToken(CycloneParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(CycloneParser.EACH, 0);
	};

	UPTO() {
	    return this.getToken(CycloneParser.UPTO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterForExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitForExpr(this);
		}
	}


}



class StopExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stopExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	REACH() {
	    return this.getToken(CycloneParser.REACH, 0);
	};

	STOP() {
	    return this.getToken(CycloneParser.STOP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStopExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStopExpr(this);
		}
	}


}



class ViaExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_viaExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	pathExprList() {
	    return this.getTypedRuleContext(PathExprListContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	VIA() {
	    return this.getToken(CycloneParser.VIA, 0);
	};

	CONDITION() {
	    return this.getToken(CycloneParser.CONDITION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterViaExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitViaExpr(this);
		}
	}


}



class PathExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathExprList;
    }

	pathExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExprContext);
	    } else {
	        return this.getTypedRuleContext(PathExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathExprList(this);
		}
	}


}



class WithExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_withExpr;
    }

	WITH() {
	    return this.getToken(CycloneParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWithExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWithExpr(this);
		}
	}


}



class LetExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_letExpr;
    }

	LET() {
	    return this.getToken(CycloneParser.LET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	pathCondAssignExpr() {
	    return this.getTypedRuleContext(PathCondAssignExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLetExpr(this);
		}
	}


}



class PathAssignStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathAssignStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	pathCondAssignExpr() {
	    return this.getTypedRuleContext(PathCondAssignExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathAssignStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathAssignStatement(this);
		}
	}


}



class PathCondAssignExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondAssignExpr;
    }

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondAssignExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondAssignExpr(this);
		}
	}


}



class PathExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathExpr;
    }

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathExpr(this);
		}
	}


}



class PathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondition;
    }

	orPathCondition() {
	    return this.getTypedRuleContext(OrPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondition(this);
		}
	}


}



class OrPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_orPathCondition;
    }

	andPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(AndPathConditionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOrPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOrPathCondition(this);
		}
	}


}



class AndPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_andPathCondition;
    }

	xorPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XorPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(XorPathConditionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAndPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAndPathCondition(this);
		}
	}


}



class XorPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_xorPathCondition;
    }

	unaryPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryPathConditionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterXorPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitXorPathCondition(this);
		}
	}


}



class UnaryPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryPathCondition;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryPathCondition() {
	    return this.getTypedRuleContext(UnaryPathConditionContext,0);
	};

	primaryCondition() {
	    return this.getTypedRuleContext(PrimaryConditionContext,0);
	};

	parPathCondition() {
	    return this.getTypedRuleContext(ParPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryPathCondition(this);
		}
	}


}



class PrimaryConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primaryCondition;
    }

	stateIncExpr() {
	    return this.getTypedRuleContext(StateIncExprContext,0);
	};

	pathPrimaryExpr() {
	    return this.getTypedRuleContext(PathPrimaryExprContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimaryCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimaryCondition(this);
		}
	}


}



class ParPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parPathCondition;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParPathCondition(this);
		}
	}


}



class StateIncExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateIncExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateIncExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateIncExpr(this);
		}
	}


}



class PathPrimaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathPrimaryExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	pathOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathOpContext);
	    } else {
	        return this.getTypedRuleContext(PathOpContext,i);
	    }
	};

	ARROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.ARROW);
	    } else {
	        return this.getToken(CycloneParser.ARROW, i);
	    }
	};


	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LBRACK);
	    } else {
	        return this.getToken(CycloneParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.RBRACK);
	    } else {
	        return this.getToken(CycloneParser.RBRACK, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathPrimaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathPrimaryExpr(this);
		}
	}


}



class PathOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathOp;
    }

	P_OP_ONE() {
	    return this.getToken(CycloneParser.P_OP_ONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathOp(this);
		}
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_label;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLabel(this);
		}
	}


}



class StateModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateModifier;
    }

	START() {
	    return this.getToken(CycloneParser.START, 0);
	};

	FINAL() {
	    return this.getToken(CycloneParser.FINAL, 0);
	};

	ABSTRACT() {
	    return this.getToken(CycloneParser.ABSTRACT, 0);
	};

	NORMAL() {
	    return this.getToken(CycloneParser.NORMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateModifier(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_literal;
    }

	intLiteral() {
	    return this.getTypedRuleContext(IntLiteralContext,0);
	};

	realLiteral() {
	    return this.getTypedRuleContext(RealLiteralContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	charLiteral() {
	    return this.getTypedRuleContext(CharLiteralContext,0);
	};

	enumLiteral() {
	    return this.getTypedRuleContext(EnumLiteralContext,0);
	};

	bvLiteral() {
	    return this.getTypedRuleContext(BvLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class IntLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_intLiteral;
    }

	INTLITERAL() {
	    return this.getToken(CycloneParser.INTLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIntLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIntLiteral(this);
		}
	}


}



class RealLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_realLiteral;
    }

	REALLITERAL() {
	    return this.getToken(CycloneParser.REALLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRealLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRealLiteral(this);
		}
	}


}



class BoolLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_boolLiteral;
    }

	BOOLLITERAL() {
	    return this.getToken(CycloneParser.BOOLLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBoolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBoolLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stringLiteral;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class CharLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_charLiteral;
    }

	CHARLITERAL() {
	    return this.getToken(CycloneParser.CHARLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCharLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCharLiteral(this);
		}
	}


}



class BvLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bvLiteral;
    }

	BVLITERAL() {
	    return this.getToken(CycloneParser.BVLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBvLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBvLiteral(this);
		}
	}


}



class EnumLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumLiteral;
    }

	ENUMLITERAL() {
	    return this.getToken(CycloneParser.ENUMLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumLiteral(this);
		}
	}


}



class RecordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_record;
    }

	RECORD() {
	    return this.getToken(CycloneParser.RECORD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	recordScope() {
	    return this.getTypedRuleContext(RecordScopeContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecord(this);
		}
	}


}



class RecordScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	recordVariableDeclGroup() {
	    return this.getTypedRuleContext(RecordVariableDeclGroupContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordScope(this);
		}
	}


}



class RecordVariableDeclGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDeclGroup;
    }

	recordVariableDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordVariableDeclContext);
	    } else {
	        return this.getTypedRuleContext(RecordVariableDeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDeclGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDeclGroup(this);
		}
	}


}



class RecordVariableDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDecl;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator() {
	    return this.getTypedRuleContext(VariableDeclaratorContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDecl(this);
		}
	}


}



class GlobalConstantGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalConstantGroup;
    }

	CONST() {
	    return this.getToken(CycloneParser.CONST, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	globalConstantDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalConstantDeclContext);
	    } else {
	        return this.getTypedRuleContext(GlobalConstantDeclContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalConstantGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalConstantGroup(this);
		}
	}


}



class GlobalConstantDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalConstantDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalConstantDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalConstantDecl(this);
		}
	}


}



class GlobalVariableGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalVariableGroup;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalVariableGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalVariableGroup(this);
		}
	}


}



class LocalVariableGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_localVariableGroup;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLocalVariableGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLocalVariableGroup(this);
		}
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_modifier;
    }

	GLOBAL() {
	    return this.getToken(CycloneParser.GLOBAL, 0);
	};

	NATIVE() {
	    return this.getToken(CycloneParser.NATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitModifier(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_type;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enumType() {
	    return this.getTypedRuleContext(EnumTypeContext,0);
	};

	bvType() {
	    return this.getTypedRuleContext(BvTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitType(this);
		}
	}


}



class PrimitiveBvTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primitiveBvType;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	bvType() {
	    return this.getTypedRuleContext(BvTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimitiveBvType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimitiveBvType(this);
		}
	}


}



class BvTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bvType;
    }

	BV() {
	    return this.getToken(CycloneParser.BV, 0);
	};

	LBRACK() {
	    return this.getToken(CycloneParser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(CycloneParser.RBRACK, 0);
	};

	INTLITERAL() {
	    return this.getToken(CycloneParser.INTLITERAL, 0);
	};

	IDENT() {
	    return this.getToken(CycloneParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBvType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBvType(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primitiveType;
    }

	INT() {
	    return this.getToken(CycloneParser.INT, 0);
	};

	BOOL() {
	    return this.getToken(CycloneParser.BOOL, 0);
	};

	REAL() {
	    return this.getToken(CycloneParser.REAL, 0);
	};

	STRING() {
	    return this.getToken(CycloneParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class EnumTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumType;
    }

	ENUM() {
	    return this.getToken(CycloneParser.ENUM, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	enumDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumDeclContext);
	    } else {
	        return this.getTypedRuleContext(EnumDeclContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumType(this);
		}
	}


}



class EnumDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumDecl(this);
		}
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableDeclarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}


}



class WhereExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_whereExpr;
    }

	WHERE() {
	    return this.getToken(CycloneParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWhereExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWhereExpr(this);
		}
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}


}



class AssertExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_assertExpr;
    }

	ASSERT() {
	    return this.getToken(CycloneParser.ASSERT, 0);
	};

	assertMainExpr() {
	    return this.getTypedRuleContext(AssertMainExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	annotationExpr() {
	    return this.getTypedRuleContext(AnnotationExprContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAssertExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAssertExpr(this);
		}
	}


}



class AssertMainExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_assertMainExpr;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ALWAYS() {
	    return this.getToken(CycloneParser.ALWAYS, 0);
	};

	SOME() {
	    return this.getToken(CycloneParser.SOME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAssertMainExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAssertMainExpr(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_statement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_expression;
    }

	conditionalImpliesExpression() {
	    return this.getTypedRuleContext(ConditionalImpliesExpressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	ASSIGN_PLUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_PLUS_EQ, 0);
	};

	ASSIGN_MINUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_MINUS_EQ, 0);
	};

	ASSIGN_TIMES_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_TIMES_EQ, 0);
	};

	ASSIGN_DIV_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_DIV_EQ, 0);
	};

	ASSIGN_SHIFT_LEFT() {
	    return this.getToken(CycloneParser.ASSIGN_SHIFT_LEFT, 0);
	};

	ASSIGN_SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.ASSIGN_SHIFT_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConditionalImpliesExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalImpliesExpression;
    }

	conditionalOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExpressionContext,i);
	    }
	};

	IMPLIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.IMPLIES);
	    } else {
	        return this.getToken(CycloneParser.IMPLIES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalImpliesExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalImpliesExpression(this);
		}
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalAndExpression;
    }

	conditionalXorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalXorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalXorExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}


}



class ConditionalXorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalXorExpression;
    }

	bitwiseOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseOrExpressionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalXorExpression(this);
		}
	}


}



class BitwiseOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bitwiseOrExpression;
    }

	bitwiseAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseAndExpressionContext,i);
	    }
	};

	BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.BAR);
	    } else {
	        return this.getToken(CycloneParser.BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBitwiseOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBitwiseOrExpression(this);
		}
	}


}



class BitwiseAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bitwiseAndExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	BIT_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.BIT_AND);
	    } else {
	        return this.getToken(CycloneParser.BIT_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBitwiseAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBitwiseAndExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	DOUBLE_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.DOUBLE_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.DOUBLE_EQUAL, i);
	    }
	};


	NOT_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.NOT_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.NOT_EQUAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_relationalExpression;
    }

	bitShiftExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitShiftExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitShiftExpressionContext,i);
	    }
	};

	LESS_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.LESS_EQUAL, i);
	    }
	};


	GREATER_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.GREATER_EQUAL, i);
	    }
	};


	LESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS);
	    } else {
	        return this.getToken(CycloneParser.LESS, i);
	    }
	};


	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER);
	    } else {
	        return this.getToken(CycloneParser.GREATER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class BitShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bitShiftExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	SHIFT_LEFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SHIFT_LEFT);
	    } else {
	        return this.getToken(CycloneParser.SHIFT_LEFT, i);
	    }
	};


	SHIFT_RIGHT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SHIFT_RIGHT);
	    } else {
	        return this.getToken(CycloneParser.SHIFT_RIGHT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBitShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBitShiftExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.PLUS);
	    } else {
	        return this.getToken(CycloneParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MINUS);
	    } else {
	        return this.getToken(CycloneParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_multiplicativeExpression;
    }

	powExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PowExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PowExpressionContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.STAR);
	    } else {
	        return this.getToken(CycloneParser.STAR, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SLASH);
	    } else {
	        return this.getToken(CycloneParser.SLASH, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MOD);
	    } else {
	        return this.getToken(CycloneParser.MOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class PowExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_powExpression;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	TIMES_TIMES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.TIMES_TIMES);
	    } else {
	        return this.getToken(CycloneParser.TIMES_TIMES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPowExpression(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpression;
    }

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(CycloneParser.MINUS, 0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class UnaryExpressionNotPlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpressionNotPlusMinus;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	BIT_NEGATION() {
	    return this.getToken(CycloneParser.BIT_NEGATION, 0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	MINUS_MINUS() {
	    return this.getToken(CycloneParser.MINUS_MINUS, 0);
	};

	PLUS_PLUS() {
	    return this.getToken(CycloneParser.PLUS_PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpressionNotPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpressionNotPlusMinus(this);
		}
	}


}



class OneExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_oneExpr;
    }

	ONE() {
	    return this.getToken(CycloneParser.ONE, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOneExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOneExpr(this);
		}
	}


}



class FreshExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_freshExpr;
    }

	FRESH() {
	    return this.getToken(CycloneParser.FRESH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFreshExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFreshExpr(this);
		}
	}


}



class InitialExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_initialExpr;
    }

	INITIAL() {
	    return this.getToken(CycloneParser.INITIAL, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInitialExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInitialExpr(this);
		}
	}


}



class PrevExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_prevExpr;
    }

	PREV() {
	    return this.getToken(CycloneParser.PREV, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrevExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrevExpr(this);
		}
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionDeclaration;
    }

	FUNCTION() {
	    return this.getToken(CycloneParser.FUNCTION, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	primitiveBvType() {
	    return this.getTypedRuleContext(PrimitiveBvTypeContext,0);
	};

	functionBodyScope() {
	    return this.getTypedRuleContext(FunctionBodyScopeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}


}



class FunctionBodyScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionBodyScope;
    }

	functionParamsDecl() {
	    return this.getTypedRuleContext(FunctionParamsDeclContext,0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	localVariableGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocalVariableGroupContext);
	    } else {
	        return this.getTypedRuleContext(LocalVariableGroupContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionBodyScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionBodyScope(this);
		}
	}


}



class FunctionParamsDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionParamsDecl;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	functionParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParamContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionParamsDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionParamsDecl(this);
		}
	}


}



class FunctionParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionParam;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	primitiveBvType() {
	    return this.getTypedRuleContext(PrimitiveBvTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionParam(this);
		}
	}


}



class ReturnExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_returnExpr;
    }

	RETURN() {
	    return this.getToken(CycloneParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterReturnExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitReturnExpr(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primary;
    }

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	initialExpr() {
	    return this.getTypedRuleContext(InitialExprContext,0);
	};

	freshExpr() {
	    return this.getTypedRuleContext(FreshExprContext,0);
	};

	oneExpr() {
	    return this.getTypedRuleContext(OneExprContext,0);
	};

	returnExpr() {
	    return this.getTypedRuleContext(ReturnExprContext,0);
	};

	funCall() {
	    return this.getTypedRuleContext(FunCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class DotIdentifierExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_dotIdentifierExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(CycloneParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterDotIdentifierExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitDotIdentifierExpr(this);
		}
	}


}



class ParExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parExpression;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParExpression(this);
		}
	}


}



class FunCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_funCall;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunCall(this);
		}
	}


}



class IteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_iteStatement;
    }

	IF() {
	    return this.getToken(CycloneParser.IF, 0);
	};

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(CycloneParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIteStatement(this);
		}
	}


}



class AnnotationExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_annotationExpr;
    }

	AT_SIGN() {
	    return this.getToken(CycloneParser.AT_SIGN, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAnnotationExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAnnotationExpr(this);
		}
	}


}




CycloneParser.IdentifierContext = IdentifierContext; 
CycloneParser.CompOptionsContext = CompOptionsContext; 
CycloneParser.OptionNameContext = OptionNameContext; 
CycloneParser.StatementListContext = StatementListContext; 
CycloneParser.TransListContext = TransListContext; 
CycloneParser.LetOrPathAssignExprContext = LetOrPathAssignExprContext; 
CycloneParser.GlobalDefinitionsContext = GlobalDefinitionsContext; 
CycloneParser.ProgramContext = ProgramContext; 
CycloneParser.MachineDeclContext = MachineDeclContext; 
CycloneParser.MachineScopeContext = MachineScopeContext; 
CycloneParser.StateExprContext = StateExprContext; 
CycloneParser.StateScopeContext = StateScopeContext; 
CycloneParser.TransContext = TransContext; 
CycloneParser.TransScopeContext = TransScopeContext; 
CycloneParser.TransOpContext = TransOpContext; 
CycloneParser.TransDefContext = TransDefContext; 
CycloneParser.TransExclExprContext = TransExclExprContext; 
CycloneParser.InvariantExpressionContext = InvariantExpressionContext; 
CycloneParser.InExprContext = InExprContext; 
CycloneParser.InvariantScopeContext = InvariantScopeContext; 
CycloneParser.GoalContext = GoalContext; 
CycloneParser.CheckExprContext = CheckExprContext; 
CycloneParser.ForExprContext = ForExprContext; 
CycloneParser.StopExprContext = StopExprContext; 
CycloneParser.ViaExprContext = ViaExprContext; 
CycloneParser.PathExprListContext = PathExprListContext; 
CycloneParser.WithExprContext = WithExprContext; 
CycloneParser.LetExprContext = LetExprContext; 
CycloneParser.PathAssignStatementContext = PathAssignStatementContext; 
CycloneParser.PathCondAssignExprContext = PathCondAssignExprContext; 
CycloneParser.PathExprContext = PathExprContext; 
CycloneParser.PathConditionContext = PathConditionContext; 
CycloneParser.OrPathConditionContext = OrPathConditionContext; 
CycloneParser.AndPathConditionContext = AndPathConditionContext; 
CycloneParser.XorPathConditionContext = XorPathConditionContext; 
CycloneParser.UnaryPathConditionContext = UnaryPathConditionContext; 
CycloneParser.PrimaryConditionContext = PrimaryConditionContext; 
CycloneParser.ParPathConditionContext = ParPathConditionContext; 
CycloneParser.StateIncExprContext = StateIncExprContext; 
CycloneParser.PathPrimaryExprContext = PathPrimaryExprContext; 
CycloneParser.PathOpContext = PathOpContext; 
CycloneParser.LabelContext = LabelContext; 
CycloneParser.StateModifierContext = StateModifierContext; 
CycloneParser.LiteralContext = LiteralContext; 
CycloneParser.IntLiteralContext = IntLiteralContext; 
CycloneParser.RealLiteralContext = RealLiteralContext; 
CycloneParser.BoolLiteralContext = BoolLiteralContext; 
CycloneParser.StringLiteralContext = StringLiteralContext; 
CycloneParser.CharLiteralContext = CharLiteralContext; 
CycloneParser.BvLiteralContext = BvLiteralContext; 
CycloneParser.EnumLiteralContext = EnumLiteralContext; 
CycloneParser.RecordContext = RecordContext; 
CycloneParser.RecordScopeContext = RecordScopeContext; 
CycloneParser.RecordVariableDeclGroupContext = RecordVariableDeclGroupContext; 
CycloneParser.RecordVariableDeclContext = RecordVariableDeclContext; 
CycloneParser.GlobalConstantGroupContext = GlobalConstantGroupContext; 
CycloneParser.GlobalConstantDeclContext = GlobalConstantDeclContext; 
CycloneParser.GlobalVariableGroupContext = GlobalVariableGroupContext; 
CycloneParser.LocalVariableGroupContext = LocalVariableGroupContext; 
CycloneParser.ModifierContext = ModifierContext; 
CycloneParser.TypeContext = TypeContext; 
CycloneParser.PrimitiveBvTypeContext = PrimitiveBvTypeContext; 
CycloneParser.BvTypeContext = BvTypeContext; 
CycloneParser.PrimitiveTypeContext = PrimitiveTypeContext; 
CycloneParser.EnumTypeContext = EnumTypeContext; 
CycloneParser.EnumDeclContext = EnumDeclContext; 
CycloneParser.VariableDeclaratorContext = VariableDeclaratorContext; 
CycloneParser.WhereExprContext = WhereExprContext; 
CycloneParser.VariableInitializerContext = VariableInitializerContext; 
CycloneParser.AssertExprContext = AssertExprContext; 
CycloneParser.AssertMainExprContext = AssertMainExprContext; 
CycloneParser.StatementContext = StatementContext; 
CycloneParser.ExpressionContext = ExpressionContext; 
CycloneParser.ConditionalImpliesExpressionContext = ConditionalImpliesExpressionContext; 
CycloneParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
CycloneParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
CycloneParser.ConditionalXorExpressionContext = ConditionalXorExpressionContext; 
CycloneParser.BitwiseOrExpressionContext = BitwiseOrExpressionContext; 
CycloneParser.BitwiseAndExpressionContext = BitwiseAndExpressionContext; 
CycloneParser.EqualityExpressionContext = EqualityExpressionContext; 
CycloneParser.RelationalExpressionContext = RelationalExpressionContext; 
CycloneParser.BitShiftExpressionContext = BitShiftExpressionContext; 
CycloneParser.AdditiveExpressionContext = AdditiveExpressionContext; 
CycloneParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
CycloneParser.PowExpressionContext = PowExpressionContext; 
CycloneParser.UnaryExpressionContext = UnaryExpressionContext; 
CycloneParser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext; 
CycloneParser.OneExprContext = OneExprContext; 
CycloneParser.FreshExprContext = FreshExprContext; 
CycloneParser.InitialExprContext = InitialExprContext; 
CycloneParser.PrevExprContext = PrevExprContext; 
CycloneParser.FunctionDeclarationContext = FunctionDeclarationContext; 
CycloneParser.FunctionBodyScopeContext = FunctionBodyScopeContext; 
CycloneParser.FunctionParamsDeclContext = FunctionParamsDeclContext; 
CycloneParser.FunctionParamContext = FunctionParamContext; 
CycloneParser.ReturnExprContext = ReturnExprContext; 
CycloneParser.PrimaryContext = PrimaryContext; 
CycloneParser.DotIdentifierExprContext = DotIdentifierExprContext; 
CycloneParser.ParExpressionContext = ParExpressionContext; 
CycloneParser.FunCallContext = FunCallContext; 
CycloneParser.IteStatementContext = IteStatementContext; 
CycloneParser.AnnotationExprContext = AnnotationExprContext; 
