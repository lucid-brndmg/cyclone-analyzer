// Generated from grammar/CycloneParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CycloneParserListener from './CycloneParserListener.js';
const serializedATN = [4,1,119,993,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
1,3,5,3,204,8,3,10,3,12,3,207,9,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,
5,1,5,1,5,5,5,221,8,5,10,5,12,5,224,9,5,1,5,5,5,227,8,5,10,5,12,5,230,9,
5,1,5,5,5,233,8,5,10,5,12,5,236,9,5,1,5,5,5,239,8,5,10,5,12,5,242,9,5,1,
5,3,5,245,8,5,1,5,1,5,1,6,5,6,250,8,6,10,6,12,6,253,9,6,1,6,1,6,1,6,1,6,
1,7,1,7,5,7,261,8,7,10,7,12,7,264,9,7,1,7,1,7,1,8,1,8,3,8,270,8,8,1,8,1,
8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,281,8,9,1,9,1,9,1,9,3,9,286,8,9,1,9,1,
9,1,10,1,10,1,11,1,11,1,11,5,11,295,8,11,10,11,12,11,298,9,11,1,11,1,11,
3,11,302,8,11,1,11,1,11,3,11,306,8,11,3,11,308,8,11,1,12,1,12,1,12,1,12,
5,12,314,8,12,10,12,12,12,317,9,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,325,
8,13,1,14,1,14,1,14,1,14,1,14,5,14,332,8,14,10,14,12,14,335,9,14,1,14,1,
14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,5,16,348,8,16,10,16,12,16,
351,9,16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,359,8,17,1,17,3,17,362,8,17,
1,17,3,17,365,8,17,1,18,1,18,1,18,1,18,5,18,371,8,18,10,18,12,18,374,9,18,
1,19,1,19,1,19,1,19,1,19,5,19,381,8,19,10,19,12,19,384,9,19,1,19,1,19,1,
20,1,20,1,20,1,20,1,20,5,20,393,8,20,10,20,12,20,396,9,20,1,20,1,20,1,21,
1,21,1,21,1,21,1,21,5,21,405,8,21,10,21,12,21,408,9,21,1,21,1,21,1,22,1,
22,1,22,3,22,415,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
1,25,1,26,1,26,1,27,1,27,1,27,5,27,433,8,27,10,27,12,27,436,9,27,1,28,1,
28,1,28,5,28,441,8,28,10,28,12,28,444,9,28,1,29,1,29,1,29,5,29,449,8,29,
10,29,12,29,452,9,29,1,30,1,30,1,30,1,30,3,30,458,8,30,1,31,1,31,1,31,3,
31,463,8,31,1,32,1,32,1,32,1,32,1,33,1,33,3,33,471,8,33,1,33,1,33,3,33,475,
8,33,3,33,477,8,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,485,8,33,1,33,1,33,
3,33,489,8,33,1,33,1,33,3,33,493,8,33,1,33,1,33,3,33,497,8,33,3,33,499,8,
33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,508,8,33,1,33,1,33,3,33,512,8,
33,1,33,1,33,3,33,516,8,33,1,34,1,34,1,34,1,34,1,34,1,34,5,34,524,8,34,10,
34,12,34,527,9,34,1,34,1,34,3,34,531,8,34,3,34,533,8,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,5,34,542,8,34,10,34,12,34,545,9,34,1,34,1,34,3,34,549,
8,34,3,34,551,8,34,4,34,553,8,34,11,34,12,34,554,1,34,1,34,3,34,559,8,34,
1,34,1,34,3,34,563,8,34,3,34,565,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
5,34,574,8,34,10,34,12,34,577,9,34,1,34,1,34,3,34,581,8,34,3,34,583,8,34,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,592,8,34,10,34,12,34,595,9,34,1,
34,1,34,3,34,599,8,34,3,34,601,8,34,4,34,603,8,34,11,34,12,34,604,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,3,34,614,8,34,1,34,1,34,3,34,618,8,34,3,34,620,
8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,
38,635,8,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,4,48,661,8,48,
11,48,12,48,662,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,5,50,674,8,
50,10,50,12,50,677,9,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,
5,52,689,8,52,10,52,12,52,692,9,52,1,52,1,52,1,53,1,53,1,53,1,53,5,53,700,
8,53,10,53,12,53,703,9,53,1,53,1,53,1,54,1,54,1,55,1,55,1,55,3,55,712,8,
55,1,56,1,56,3,56,716,8,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,59,1,59,
1,59,1,59,1,59,5,59,730,8,59,10,59,12,59,733,9,59,1,59,1,59,1,60,1,60,1,
61,1,61,1,61,3,61,742,8,61,1,61,3,61,745,8,61,1,62,1,62,1,62,1,63,1,63,1,
64,3,64,753,8,64,1,64,1,64,1,64,3,64,758,8,64,1,64,1,64,1,65,3,65,763,8,
65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,3,67,773,8,67,1,68,1,68,1,68,
5,68,778,8,68,10,68,12,68,781,9,68,1,69,1,69,1,69,5,69,786,8,69,10,69,12,
69,789,9,69,1,70,1,70,1,70,5,70,794,8,70,10,70,12,70,797,9,70,1,71,1,71,
1,71,5,71,802,8,71,10,71,12,71,805,9,71,1,72,1,72,1,72,5,72,810,8,72,10,
72,12,72,813,9,72,1,73,1,73,1,73,5,73,818,8,73,10,73,12,73,821,9,73,1,74,
1,74,1,74,5,74,826,8,74,10,74,12,74,829,9,74,1,75,1,75,1,75,5,75,834,8,75,
10,75,12,75,837,9,75,1,76,1,76,1,76,5,76,842,8,76,10,76,12,76,845,9,76,1,
77,1,77,1,77,5,77,850,8,77,10,77,12,77,853,9,77,1,78,1,78,1,78,5,78,858,
8,78,10,78,12,78,861,9,78,1,79,1,79,1,79,5,79,866,8,79,10,79,12,79,869,9,
79,1,80,1,80,1,80,1,80,1,80,3,80,876,8,80,1,81,1,81,1,81,1,81,1,81,1,81,
3,81,884,8,81,3,81,886,8,81,1,82,1,82,1,82,1,82,1,82,4,82,893,8,82,11,82,
12,82,894,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,
85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,5,86,918,8,86,10,86,12,86,921,
9,86,1,86,4,86,924,8,86,11,86,12,86,925,1,86,1,86,1,87,1,87,3,87,932,8,87,
1,87,1,87,5,87,936,8,87,10,87,12,87,939,9,87,1,87,1,87,1,88,1,88,1,88,1,
88,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,958,8,90,
1,91,1,91,1,91,3,91,963,8,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,
5,93,974,8,93,10,93,12,93,977,9,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,3,
94,986,8,94,1,95,1,95,1,95,1,95,1,95,1,95,0,0,96,0,2,4,6,8,10,12,14,16,18,
20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,186,188,190,0,21,1,0,51,58,1,0,61,62,1,0,59,60,1,0,63,65,1,0,68,69,1,
0,1,2,2,0,84,84,92,92,3,0,85,85,94,94,103,103,2,0,86,86,90,90,1,0,88,89,
1,0,78,81,1,0,49,50,2,0,71,73,75,75,1,0,100,101,2,0,11,11,42,45,2,0,21,21,
48,48,2,0,12,13,17,18,1,0,46,47,2,0,20,20,28,28,2,0,26,27,39,39,1,0,36,37,
1022,0,192,1,0,0,0,2,194,1,0,0,0,4,200,1,0,0,0,6,205,1,0,0,0,8,211,1,0,0,
0,10,215,1,0,0,0,12,251,1,0,0,0,14,258,1,0,0,0,16,267,1,0,0,0,18,273,1,0,
0,0,20,289,1,0,0,0,22,307,1,0,0,0,24,309,1,0,0,0,26,320,1,0,0,0,28,326,1,
0,0,0,30,338,1,0,0,0,32,342,1,0,0,0,34,355,1,0,0,0,36,366,1,0,0,0,38,375,
1,0,0,0,40,387,1,0,0,0,42,399,1,0,0,0,44,411,1,0,0,0,46,418,1,0,0,0,48,422,
1,0,0,0,50,425,1,0,0,0,52,427,1,0,0,0,54,429,1,0,0,0,56,437,1,0,0,0,58,445,
1,0,0,0,60,457,1,0,0,0,62,462,1,0,0,0,64,464,1,0,0,0,66,515,1,0,0,0,68,619,
1,0,0,0,70,621,1,0,0,0,72,623,1,0,0,0,74,625,1,0,0,0,76,634,1,0,0,0,78,636,
1,0,0,0,80,638,1,0,0,0,82,640,1,0,0,0,84,642,1,0,0,0,86,644,1,0,0,0,88,646,
1,0,0,0,90,648,1,0,0,0,92,650,1,0,0,0,94,655,1,0,0,0,96,660,1,0,0,0,98,664,
1,0,0,0,100,668,1,0,0,0,102,680,1,0,0,0,104,684,1,0,0,0,106,695,1,0,0,0,
108,706,1,0,0,0,110,711,1,0,0,0,112,715,1,0,0,0,114,717,1,0,0,0,116,722,
1,0,0,0,118,724,1,0,0,0,120,736,1,0,0,0,122,738,1,0,0,0,124,746,1,0,0,0,
126,749,1,0,0,0,128,752,1,0,0,0,130,762,1,0,0,0,132,766,1,0,0,0,134,769,
1,0,0,0,136,774,1,0,0,0,138,782,1,0,0,0,140,790,1,0,0,0,142,798,1,0,0,0,
144,806,1,0,0,0,146,814,1,0,0,0,148,822,1,0,0,0,150,830,1,0,0,0,152,838,
1,0,0,0,154,846,1,0,0,0,156,854,1,0,0,0,158,862,1,0,0,0,160,875,1,0,0,0,
162,885,1,0,0,0,164,887,1,0,0,0,166,898,1,0,0,0,168,903,1,0,0,0,170,908,
1,0,0,0,172,914,1,0,0,0,174,929,1,0,0,0,176,942,1,0,0,0,178,946,1,0,0,0,
180,957,1,0,0,0,182,959,1,0,0,0,184,964,1,0,0,0,186,968,1,0,0,0,188,980,
1,0,0,0,190,987,1,0,0,0,192,193,5,116,0,0,193,1,1,0,0,0,194,195,5,99,0,0,
195,196,3,4,2,0,196,197,5,11,0,0,197,198,3,76,38,0,198,199,5,25,0,0,199,
3,1,0,0,0,200,201,7,0,0,0,201,5,1,0,0,0,202,204,3,2,1,0,203,202,1,0,0,0,
204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,205,
1,0,0,0,208,209,3,8,4,0,209,210,5,0,0,1,210,7,1,0,0,0,211,212,7,1,0,0,212,
213,3,0,0,0,213,214,3,10,5,0,214,9,1,0,0,0,215,222,5,15,0,0,216,221,3,104,
52,0,217,221,3,100,50,0,218,221,3,92,46,0,219,221,3,170,85,0,220,216,1,0,
0,0,220,217,1,0,0,0,220,218,1,0,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,
220,1,0,0,0,222,223,1,0,0,0,223,228,1,0,0,0,224,222,1,0,0,0,225,227,3,12,
6,0,226,225,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,
234,1,0,0,0,230,228,1,0,0,0,231,233,3,16,8,0,232,231,1,0,0,0,233,236,1,0,
0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,240,1,0,0,0,236,234,1,0,0,0,237,
239,3,26,13,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,
0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,243,245,3,32,16,0,244,243,1,0,0,0,
244,245,1,0,0,0,245,246,1,0,0,0,246,247,5,22,0,0,247,11,1,0,0,0,248,250,
3,74,37,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,
0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,7,2,0,0,255,256,3,0,0,0,256,257,
3,14,7,0,257,13,1,0,0,0,258,262,5,15,0,0,259,261,3,132,66,0,260,259,1,0,
0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,
262,1,0,0,0,265,266,5,22,0,0,266,15,1,0,0,0,267,269,7,3,0,0,268,270,3,0,
0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,272,3,18,9,0,272,
17,1,0,0,0,273,274,5,15,0,0,274,275,3,0,0,0,275,276,3,20,10,0,276,277,3,
22,11,0,277,280,1,0,0,0,278,279,7,4,0,0,279,281,3,72,36,0,280,278,1,0,0,
0,280,281,1,0,0,0,281,285,1,0,0,0,282,283,3,124,62,0,283,284,5,25,0,0,284,
286,1,0,0,0,285,282,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,5,22,
0,0,288,19,1,0,0,0,289,290,7,5,0,0,290,21,1,0,0,0,291,296,3,0,0,0,292,293,
5,8,0,0,293,295,3,0,0,0,294,292,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,
296,297,1,0,0,0,297,308,1,0,0,0,298,296,1,0,0,0,299,301,5,27,0,0,300,302,
3,24,12,0,301,300,1,0,0,0,301,302,1,0,0,0,302,308,1,0,0,0,303,305,5,28,0,
0,304,306,3,24,12,0,305,304,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,
291,1,0,0,0,307,299,1,0,0,0,307,303,1,0,0,0,308,23,1,0,0,0,309,310,5,16,
0,0,310,315,3,0,0,0,311,312,5,8,0,0,312,314,3,0,0,0,313,311,1,0,0,0,314,
317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,315,1,0,
0,0,318,319,5,23,0,0,319,25,1,0,0,0,320,321,5,70,0,0,321,322,3,0,0,0,322,
324,3,30,15,0,323,325,3,28,14,0,324,323,1,0,0,0,324,325,1,0,0,0,325,27,1,
0,0,0,326,327,5,97,0,0,327,328,5,19,0,0,328,333,3,0,0,0,329,330,5,8,0,0,
330,332,3,0,0,0,331,329,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,
1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,0,336,337,5,24,0,0,337,29,1,0,0,0,
338,339,5,15,0,0,339,340,3,132,66,0,340,341,5,22,0,0,341,31,1,0,0,0,342,
343,5,83,0,0,343,349,5,15,0,0,344,348,3,44,22,0,345,348,3,46,23,0,346,348,
3,128,64,0,347,344,1,0,0,0,347,345,1,0,0,0,347,346,1,0,0,0,348,351,1,0,0,
0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,1,0,0,0,352,353,
3,34,17,0,353,354,5,22,0,0,354,33,1,0,0,0,355,356,7,6,0,0,356,358,3,36,18,
0,357,359,3,40,20,0,358,357,1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,360,
362,3,42,21,0,361,360,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,365,3,
38,19,0,364,363,1,0,0,0,364,365,1,0,0,0,365,35,1,0,0,0,366,367,7,7,0,0,367,
372,3,78,39,0,368,369,5,8,0,0,369,371,3,78,39,0,370,368,1,0,0,0,371,374,
1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,37,1,0,0,0,374,372,1,0,0,0,375,
376,7,8,0,0,376,377,5,19,0,0,377,382,3,0,0,0,378,379,5,8,0,0,379,381,3,0,
0,0,380,378,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,
385,1,0,0,0,384,382,1,0,0,0,385,386,5,24,0,0,386,39,1,0,0,0,387,388,7,9,
0,0,388,389,5,19,0,0,389,394,3,50,25,0,390,391,5,8,0,0,391,393,3,50,25,0,
392,390,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,397,
1,0,0,0,396,394,1,0,0,0,397,398,5,24,0,0,398,41,1,0,0,0,399,400,5,91,0,0,
400,401,5,19,0,0,401,406,3,0,0,0,402,403,5,8,0,0,403,405,3,0,0,0,404,402,
1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,
408,406,1,0,0,0,409,410,5,24,0,0,410,43,1,0,0,0,411,412,5,93,0,0,412,414,
3,0,0,0,413,415,3,48,24,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,
0,416,417,5,25,0,0,417,45,1,0,0,0,418,419,3,0,0,0,419,420,3,48,24,0,420,
421,5,25,0,0,421,47,1,0,0,0,422,423,5,11,0,0,423,424,3,52,26,0,424,49,1,
0,0,0,425,426,3,52,26,0,426,51,1,0,0,0,427,428,3,54,27,0,428,53,1,0,0,0,
429,434,3,56,28,0,430,431,5,40,0,0,431,433,3,56,28,0,432,430,1,0,0,0,433,
436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,55,1,0,0,0,436,434,1,0,0,
0,437,442,3,58,29,0,438,439,5,41,0,0,439,441,3,58,29,0,440,438,1,0,0,0,441,
444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,57,1,0,0,0,444,442,1,0,0,
0,445,450,3,60,30,0,446,447,5,32,0,0,447,449,3,60,30,0,448,446,1,0,0,0,449,
452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,59,1,0,0,0,452,450,1,0,0,
0,453,454,5,31,0,0,454,458,3,60,30,0,455,458,3,62,31,0,456,458,3,64,32,0,
457,453,1,0,0,0,457,455,1,0,0,0,457,456,1,0,0,0,458,61,1,0,0,0,459,463,3,
66,33,0,460,463,3,68,34,0,461,463,3,82,41,0,462,459,1,0,0,0,462,460,1,0,
0,0,462,461,1,0,0,0,463,63,1,0,0,0,464,465,5,19,0,0,465,466,3,52,26,0,466,
467,5,24,0,0,467,65,1,0,0,0,468,470,5,46,0,0,469,471,3,78,39,0,470,469,1,
0,0,0,470,471,1,0,0,0,471,477,1,0,0,0,472,474,5,47,0,0,473,475,3,78,39,0,
474,473,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,468,1,0,0,0,476,472,
1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,488,3,0,0,0,479,480,5,32,0,0,
480,481,5,15,0,0,481,484,3,78,39,0,482,483,5,5,0,0,483,485,3,78,39,0,484,
482,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,487,5,22,0,0,487,489,1,0,
0,0,488,479,1,0,0,0,488,489,1,0,0,0,489,516,1,0,0,0,490,492,5,46,0,0,491,
493,3,78,39,0,492,491,1,0,0,0,492,493,1,0,0,0,493,499,1,0,0,0,494,496,5,
47,0,0,495,497,3,78,39,0,496,495,1,0,0,0,496,497,1,0,0,0,497,499,1,0,0,0,
498,490,1,0,0,0,498,494,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,501,
5,19,0,0,501,511,3,0,0,0,502,503,5,32,0,0,503,504,5,15,0,0,504,507,3,78,
39,0,505,506,5,5,0,0,506,508,3,78,39,0,507,505,1,0,0,0,507,508,1,0,0,0,508,
509,1,0,0,0,509,510,5,22,0,0,510,512,1,0,0,0,511,502,1,0,0,0,511,512,1,0,
0,0,512,513,1,0,0,0,513,514,5,24,0,0,514,516,1,0,0,0,515,476,1,0,0,0,515,
498,1,0,0,0,516,67,1,0,0,0,517,533,3,0,0,0,518,530,3,70,35,0,519,520,5,16,
0,0,520,525,3,0,0,0,521,522,5,8,0,0,522,524,3,0,0,0,523,521,1,0,0,0,524,
527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,525,1,0,
0,0,528,529,5,23,0,0,529,531,1,0,0,0,530,519,1,0,0,0,530,531,1,0,0,0,531,
533,1,0,0,0,532,517,1,0,0,0,532,518,1,0,0,0,533,552,1,0,0,0,534,550,5,1,
0,0,535,551,3,0,0,0,536,548,3,70,35,0,537,538,5,16,0,0,538,543,3,0,0,0,539,
540,5,8,0,0,540,542,3,0,0,0,541,539,1,0,0,0,542,545,1,0,0,0,543,541,1,0,
0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,543,1,0,0,0,546,547,5,23,0,0,547,
549,1,0,0,0,548,537,1,0,0,0,548,549,1,0,0,0,549,551,1,0,0,0,550,535,1,0,
0,0,550,536,1,0,0,0,551,553,1,0,0,0,552,534,1,0,0,0,553,554,1,0,0,0,554,
552,1,0,0,0,554,555,1,0,0,0,555,620,1,0,0,0,556,558,5,46,0,0,557,559,3,78,
39,0,558,557,1,0,0,0,558,559,1,0,0,0,559,565,1,0,0,0,560,562,5,47,0,0,561,
563,3,78,39,0,562,561,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,556,1,
0,0,0,564,560,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,582,5,19,0,0,567,
583,3,0,0,0,568,580,3,70,35,0,569,570,5,16,0,0,570,575,3,0,0,0,571,572,5,
8,0,0,572,574,3,0,0,0,573,571,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,
576,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,5,23,0,0,579,581,1,0,
0,0,580,569,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,0,582,567,1,0,0,0,582,
568,1,0,0,0,583,602,1,0,0,0,584,600,5,1,0,0,585,601,3,0,0,0,586,598,3,70,
35,0,587,588,5,16,0,0,588,593,3,0,0,0,589,590,5,8,0,0,590,592,3,0,0,0,591,
589,1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,
0,0,595,593,1,0,0,0,596,597,5,23,0,0,597,599,1,0,0,0,598,587,1,0,0,0,598,
599,1,0,0,0,599,601,1,0,0,0,600,585,1,0,0,0,600,586,1,0,0,0,601,603,1,0,
0,0,602,584,1,0,0,0,603,604,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,
606,1,0,0,0,606,617,5,24,0,0,607,608,5,32,0,0,608,609,5,15,0,0,609,610,3,
78,39,0,610,613,1,0,0,0,611,612,5,5,0,0,612,614,3,78,39,0,613,611,1,0,0,
0,613,614,1,0,0,0,614,615,1,0,0,0,615,616,5,22,0,0,616,618,1,0,0,0,617,607,
1,0,0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,532,1,0,0,0,619,564,1,0,0,0,
620,69,1,0,0,0,621,622,5,33,0,0,622,71,1,0,0,0,623,624,5,113,0,0,624,73,
1,0,0,0,625,626,7,10,0,0,626,75,1,0,0,0,627,635,3,78,39,0,628,635,3,80,40,
0,629,635,3,82,41,0,630,635,3,84,42,0,631,635,3,86,43,0,632,635,3,90,45,
0,633,635,3,88,44,0,634,627,1,0,0,0,634,628,1,0,0,0,634,629,1,0,0,0,634,
630,1,0,0,0,634,631,1,0,0,0,634,632,1,0,0,0,634,633,1,0,0,0,635,77,1,0,0,
0,636,637,5,109,0,0,637,79,1,0,0,0,638,639,5,111,0,0,639,81,1,0,0,0,640,
641,5,114,0,0,641,83,1,0,0,0,642,643,5,113,0,0,643,85,1,0,0,0,644,645,5,
112,0,0,645,87,1,0,0,0,646,647,5,110,0,0,647,89,1,0,0,0,648,649,5,115,0,
0,649,91,1,0,0,0,650,651,5,66,0,0,651,652,3,0,0,0,652,653,3,94,47,0,653,
654,5,25,0,0,654,93,1,0,0,0,655,656,5,15,0,0,656,657,3,96,48,0,657,658,5,
22,0,0,658,95,1,0,0,0,659,661,3,98,49,0,660,659,1,0,0,0,661,662,1,0,0,0,
662,660,1,0,0,0,662,663,1,0,0,0,663,97,1,0,0,0,664,665,3,110,55,0,665,666,
3,122,61,0,666,667,5,25,0,0,667,99,1,0,0,0,668,669,5,67,0,0,669,670,3,110,
55,0,670,675,3,102,51,0,671,672,5,8,0,0,672,674,3,102,51,0,673,671,1,0,0,
0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,675,
1,0,0,0,678,679,5,25,0,0,679,101,1,0,0,0,680,681,3,0,0,0,681,682,5,11,0,
0,682,683,3,126,63,0,683,103,1,0,0,0,684,685,3,110,55,0,685,690,3,122,61,
0,686,687,5,8,0,0,687,689,3,122,61,0,688,686,1,0,0,0,689,692,1,0,0,0,690,
688,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,0,692,690,1,0,0,0,693,694,5,25,
0,0,694,105,1,0,0,0,695,696,3,110,55,0,696,701,3,122,61,0,697,698,5,8,0,
0,698,700,3,122,61,0,699,697,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,
702,1,0,0,0,702,704,1,0,0,0,703,701,1,0,0,0,704,705,5,25,0,0,705,107,1,0,
0,0,706,707,7,11,0,0,707,109,1,0,0,0,708,712,3,116,58,0,709,712,3,118,59,
0,710,712,3,114,57,0,711,708,1,0,0,0,711,709,1,0,0,0,711,710,1,0,0,0,712,
111,1,0,0,0,713,716,3,116,58,0,714,716,3,114,57,0,715,713,1,0,0,0,715,714,
1,0,0,0,716,113,1,0,0,0,717,718,5,108,0,0,718,719,5,16,0,0,719,720,5,109,
0,0,720,721,5,23,0,0,721,115,1,0,0,0,722,723,7,12,0,0,723,117,1,0,0,0,724,
725,5,76,0,0,725,726,5,15,0,0,726,731,3,120,60,0,727,728,5,8,0,0,728,730,
3,120,60,0,729,727,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,
0,732,734,1,0,0,0,733,731,1,0,0,0,734,735,5,22,0,0,735,119,1,0,0,0,736,737,
3,0,0,0,737,121,1,0,0,0,738,741,3,0,0,0,739,740,5,11,0,0,740,742,3,126,63,
0,741,739,1,0,0,0,741,742,1,0,0,0,742,744,1,0,0,0,743,745,3,124,62,0,744,
743,1,0,0,0,744,745,1,0,0,0,745,123,1,0,0,0,746,747,5,77,0,0,747,748,3,134,
67,0,748,125,1,0,0,0,749,750,3,134,67,0,750,127,1,0,0,0,751,753,3,190,95,
0,752,751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,5,95,0,0,755,757,
3,130,65,0,756,758,3,28,14,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,
0,0,759,760,5,25,0,0,760,129,1,0,0,0,761,763,7,13,0,0,762,761,1,0,0,0,762,
763,1,0,0,0,763,764,1,0,0,0,764,765,3,134,67,0,765,131,1,0,0,0,766,767,3,
134,67,0,767,768,5,25,0,0,768,133,1,0,0,0,769,772,3,136,68,0,770,771,7,14,
0,0,771,773,3,134,67,0,772,770,1,0,0,0,772,773,1,0,0,0,773,135,1,0,0,0,774,
779,3,138,69,0,775,776,5,30,0,0,776,778,3,138,69,0,777,775,1,0,0,0,778,781,
1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,137,1,0,0,0,781,779,1,0,0,0,
782,787,3,140,70,0,783,784,5,40,0,0,784,786,3,140,70,0,785,783,1,0,0,0,786,
789,1,0,0,0,787,785,1,0,0,0,787,788,1,0,0,0,788,139,1,0,0,0,789,787,1,0,
0,0,790,795,3,142,71,0,791,792,5,41,0,0,792,794,3,142,71,0,793,791,1,0,0,
0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,141,1,0,0,0,797,795,
1,0,0,0,798,803,3,144,72,0,799,800,5,32,0,0,800,802,3,144,72,0,801,799,1,
0,0,0,802,805,1,0,0,0,803,801,1,0,0,0,803,804,1,0,0,0,804,143,1,0,0,0,805,
803,1,0,0,0,806,811,3,146,73,0,807,808,5,4,0,0,808,810,3,146,73,0,809,807,
1,0,0,0,810,813,1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,145,1,0,0,0,
813,811,1,0,0,0,814,819,3,148,74,0,815,816,5,34,0,0,816,818,3,148,74,0,817,
815,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,147,1,0,
0,0,821,819,1,0,0,0,822,827,3,150,75,0,823,824,7,15,0,0,824,826,3,150,75,
0,825,823,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,149,
1,0,0,0,829,827,1,0,0,0,830,835,3,152,76,0,831,832,7,16,0,0,832,834,3,152,
76,0,833,831,1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,
151,1,0,0,0,837,835,1,0,0,0,838,843,3,154,77,0,839,840,7,17,0,0,840,842,
3,154,77,0,841,839,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,844,1,0,0,
0,844,153,1,0,0,0,845,843,1,0,0,0,846,851,3,156,78,0,847,848,7,18,0,0,848,
850,3,156,78,0,849,847,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,
0,0,0,852,155,1,0,0,0,853,851,1,0,0,0,854,859,3,158,79,0,855,856,7,19,0,
0,856,858,3,158,79,0,857,855,1,0,0,0,858,861,1,0,0,0,859,857,1,0,0,0,859,
860,1,0,0,0,860,157,1,0,0,0,861,859,1,0,0,0,862,867,3,160,80,0,863,864,5,
38,0,0,864,866,3,160,80,0,865,863,1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,
0,867,868,1,0,0,0,868,159,1,0,0,0,869,867,1,0,0,0,870,871,5,28,0,0,871,876,
3,160,80,0,872,873,5,20,0,0,873,876,3,160,80,0,874,876,3,162,81,0,875,870,
1,0,0,0,875,872,1,0,0,0,875,874,1,0,0,0,876,161,1,0,0,0,877,878,5,31,0,0,
878,886,3,160,80,0,879,880,5,35,0,0,880,886,3,160,80,0,881,883,3,180,90,
0,882,884,7,20,0,0,883,882,1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,877,
1,0,0,0,885,879,1,0,0,0,885,881,1,0,0,0,886,163,1,0,0,0,887,888,5,102,0,
0,888,889,5,19,0,0,889,892,3,134,67,0,890,891,5,8,0,0,891,893,3,134,67,0,
892,890,1,0,0,0,893,894,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,896,
1,0,0,0,896,897,5,24,0,0,897,165,1,0,0,0,898,899,5,98,0,0,899,900,5,19,0,
0,900,901,3,0,0,0,901,902,5,24,0,0,902,167,1,0,0,0,903,904,5,96,0,0,904,
905,5,19,0,0,905,906,3,182,91,0,906,907,5,24,0,0,907,169,1,0,0,0,908,909,
5,104,0,0,909,910,3,0,0,0,910,911,5,5,0,0,911,912,3,112,56,0,912,913,3,172,
86,0,913,171,1,0,0,0,914,915,3,174,87,0,915,919,5,15,0,0,916,918,3,106,53,
0,917,916,1,0,0,0,918,921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,923,
1,0,0,0,921,919,1,0,0,0,922,924,3,132,66,0,923,922,1,0,0,0,924,925,1,0,0,
0,925,923,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,928,5,22,0,0,928,173,
1,0,0,0,929,931,5,19,0,0,930,932,3,176,88,0,931,930,1,0,0,0,931,932,1,0,
0,0,932,937,1,0,0,0,933,934,5,8,0,0,934,936,3,176,88,0,935,933,1,0,0,0,936,
939,1,0,0,0,937,935,1,0,0,0,937,938,1,0,0,0,938,940,1,0,0,0,939,937,1,0,
0,0,940,941,5,24,0,0,941,175,1,0,0,0,942,943,3,0,0,0,943,944,5,5,0,0,944,
945,3,112,56,0,945,177,1,0,0,0,946,947,5,105,0,0,947,948,3,134,67,0,948,
179,1,0,0,0,949,958,3,184,92,0,950,958,3,182,91,0,951,958,3,76,38,0,952,
958,3,168,84,0,953,958,3,166,83,0,954,958,3,164,82,0,955,958,3,178,89,0,
956,958,3,186,93,0,957,949,1,0,0,0,957,950,1,0,0,0,957,951,1,0,0,0,957,952,
1,0,0,0,957,953,1,0,0,0,957,954,1,0,0,0,957,955,1,0,0,0,957,956,1,0,0,0,
958,181,1,0,0,0,959,962,3,0,0,0,960,961,5,9,0,0,961,963,3,0,0,0,962,960,
1,0,0,0,962,963,1,0,0,0,963,183,1,0,0,0,964,965,5,19,0,0,965,966,3,134,67,
0,966,967,5,24,0,0,967,185,1,0,0,0,968,969,3,0,0,0,969,970,5,19,0,0,970,
975,3,134,67,0,971,972,5,8,0,0,972,974,3,134,67,0,973,971,1,0,0,0,974,977,
1,0,0,0,975,973,1,0,0,0,975,976,1,0,0,0,976,978,1,0,0,0,977,975,1,0,0,0,
978,979,5,24,0,0,979,187,1,0,0,0,980,981,5,106,0,0,981,982,3,184,92,0,982,
985,3,132,66,0,983,984,5,107,0,0,984,986,3,132,66,0,985,983,1,0,0,0,985,
986,1,0,0,0,986,189,1,0,0,0,987,988,5,3,0,0,988,989,5,69,0,0,989,990,5,5,
0,0,990,991,3,0,0,0,991,191,1,0,0,0,103,205,220,222,228,234,240,244,251,
262,269,280,285,296,301,305,307,315,324,333,347,349,358,361,364,372,382,
394,406,414,434,442,450,457,462,470,474,476,484,488,492,496,498,507,511,
515,525,530,532,543,548,550,554,558,562,564,575,580,582,593,598,600,604,
613,617,619,634,662,675,690,701,711,715,731,741,744,752,757,762,772,779,
787,795,803,811,819,827,835,843,851,859,867,875,883,885,894,919,925,931,
937,957,962,975,985];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CycloneParser extends antlr4.Parser {

    static grammarFileName = "CycloneParser.g4";
    static literalNames = [ null, "'->'", "'<->'", "'@'", "'|'", "':'", 
                            "'::'", "':='", "','", "'.'", "'..'", "'='", 
                            "'>'", "'>='", "'#'", "'{'", "'['", "'<'", "'<='", 
                            "'('", "'-'", "'!='", "'}'", "']'", "')'", "';'", 
                            "'/'", "'*'", "'+'", "'xor'", "'=>'", "'!'", 
                            "'^'", "'_'", "'&'", "'~'", "'++'", "'--'", 
                            "'**'", "'%'", "'||'", "'&&'", "'+='", "'-='", 
                            "'*='", "'/='", "'<<'", "'>>'", "'=='", "'global'", 
                            "'native'", "'debug'", "'log'", "'output'", 
                            "'trace'", "'precision'", "'timeout'", "'detect'", 
                            "'bvdisplay'", "'state'", "'node'", "'machine'", 
                            "'graph'", "'transition'", "'trans'", "'edge'", 
                            "'record'", "'const'", "'on'", "'label'", "'invariant'", 
                            "'int'", "'bool'", "'real'", "'char'", "'string'", 
                            "'enum'", "'where'", "'start'", "'final'", "'abstract'", 
                            "'normal'", "'prev'", "'goal'", "'check'", "'for'", 
                            "'stop'", "'at'", "'via'", "'condition'", "'reach'", 
                            "'with'", "'enumerate'", "'let'", "'each'", 
                            "'assert'", "'initial'", "'in'", "'fresh'", 
                            "'option-'", "'always'", "'some'", "'one'", 
                            "'upto'", "'function'", "'return'", "'if'", 
                            "'else'", "'bv'" ];
    static symbolicNames = [ null, "ARROW", "BI_ARROW", "AT_SIGN", "BAR", 
                             "COLON", "COLON_COLON", "COLON_EQUAL", "COMMA", 
                             "DOT", "DOTDOT", "EQUAL", "GREATER", "GREATER_EQUAL", 
                             "HASH", "LBRACE", "LBRACK", "LESS", "LESS_EQUAL", 
                             "LPAREN", "MINUS", "NOT_EQUAL", "RBRACE", "RBRACK", 
                             "RPAREN", "SEMI", "SLASH", "STAR", "PLUS", 
                             "XOR", "IMPLIES", "NOT", "HAT", "P_OP_ONE", 
                             "BIT_AND", "BIT_NEGATION", "PLUS_PLUS", "MINUS_MINUS", 
                             "TIMES_TIMES", "MOD", "OR", "AND", "ASSIGN_PLUS_EQ", 
                             "ASSIGN_MINUS_EQ", "ASSIGN_TIMES_EQ", "ASSIGN_DIV_EQ", 
                             "SHIFT_LEFT", "SHIFT_RIGHT", "DOUBLE_EQUAL", 
                             "GLOBAL", "NATIVE", "DEBUG", "LOG", "OUTPUT", 
                             "TRACE", "PRECISION", "TIMEOUT", "DETECT", 
                             "BVDISPLAY", "STATE", "NODE", "MACHINE", "GRAPH", 
                             "TRANS1", "TRANS2", "EDGE", "RECORD", "CONST", 
                             "ON", "LABEL", "INVARIANT", "INT", "BOOL", 
                             "REAL", "CHAR", "STRING", "ENUM", "WHERE", 
                             "START", "FINAL", "ABSTRACT", "NORMAL", "PREV", 
                             "GOAL", "CHECK", "FOR", "STOP", "AT", "VIA", 
                             "CONDITION", "REACH", "WITH", "ENUMERATE", 
                             "LET", "EACH", "ASSERT", "INITIAL", "IN", "FRESH", 
                             "OPTION", "ALWAYS", "SOME", "ONE", "UPTO", 
                             "FUNCTION", "RETURN", "IF", "ELSE", "BV", "INTLITERAL", 
                             "BVLITERAL", "REALLITERAL", "CHARLITERAL", 
                             "STRINGLITERAL", "BOOLLITERAL", "ENUMLITERAL", 
                             "IDENT", "ML_COMMENT", "SL_COMMENT", "WS" ];
    static ruleNames = [ "identifier", "compOptions", "optionName", "program", 
                         "machineDecl", "machineScope", "stateExpr", "stateScope", 
                         "trans", "transScope", "transOp", "transDef", "transExclExpr", 
                         "invariantExpression", "inExpr", "invariantScope", 
                         "goal", "checkExpr", "forExpr", "stopExpr", "viaExpr", 
                         "withExpr", "letExpr", "pathAssignStatement", "pathCondAssignExpr", 
                         "pathExpr", "pathCondition", "orPathCondition", 
                         "andPathCondition", "xorPathCondition", "unaryPathCondition", 
                         "primaryCondition", "parPathCondition", "stateIncExpr", 
                         "pathPrimaryExpr", "pathOp", "label", "stateModifier", 
                         "literal", "intLiteral", "realLiteral", "boolLiteral", 
                         "stringLiteral", "charLiteral", "bvLiteral", "enumLiteral", 
                         "record", "recordScope", "recordVariableDeclGroup", 
                         "recordVariableDecl", "globalConstantGroup", "globalConstantDecl", 
                         "globalVariableGroup", "localVariableGroup", "modifier", 
                         "type", "primitiveBvType", "bvType", "primitiveType", 
                         "enumType", "enumDecl", "variableDeclarator", "whereExpr", 
                         "variableInitializer", "assertExpr", "assertMainExpr", 
                         "statement", "expression", "conditionalImpliesExpression", 
                         "conditionalOrExpression", "conditionalAndExpression", 
                         "conditionalXorExpression", "bitwiseOrExpression", 
                         "bitwiseAndExpression", "equalityExpression", "relationalExpression", 
                         "bitShiftExpression", "additiveExpression", "multiplicativeExpression", 
                         "powExpression", "unaryExpression", "unaryExpressionNotPlusMinus", 
                         "oneExpr", "freshExpr", "initialExpr", "functionDeclaration", 
                         "functionBodyScope", "functionParamsDecl", "functionParam", 
                         "returnExpr", "primary", "dotIdentifierExpr", "parExpression", 
                         "funCall", "iteStatement", "annotationExpr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CycloneParser.ruleNames;
        this.literalNames = CycloneParser.literalNames;
        this.symbolicNames = CycloneParser.symbolicNames;
    }



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CycloneParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 192;
	        this.match(CycloneParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compOptions() {
	    let localctx = new CompOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CycloneParser.RULE_compOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 194;
	        this.match(CycloneParser.OPTION);
	        this.state = 195;
	        this.optionName();
	        this.state = 196;
	        this.match(CycloneParser.EQUAL);
	        this.state = 197;
	        this.literal();
	        this.state = 198;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionName() {
	    let localctx = new OptionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CycloneParser.RULE_optionName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 200;
	        _la = this._input.LA(1);
	        if(!(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 255) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CycloneParser.RULE_program);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 205;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===99) {
	            this.state = 202;
	            this.compOptions();
	            this.state = 207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 208;
	        this.machineDecl();
	        this.state = 209;
	        this.match(CycloneParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machineDecl() {
	    let localctx = new MachineDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CycloneParser.RULE_machineDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 211;
	        _la = this._input.LA(1);
	        if(!(_la===61 || _la===62)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 212;
	        this.identifier();
	        this.state = 213;
	        this.machineScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machineScope() {
	    let localctx = new MachineScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CycloneParser.RULE_machineScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 215;
	        this.match(CycloneParser.LBRACE);
	        this.state = 222;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1763) !== 0) || _la===104 || _la===108) {
	            this.state = 220;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 71:
	            case 72:
	            case 73:
	            case 75:
	            case 76:
	            case 108:
	                this.state = 216;
	                this.globalVariableGroup();
	                break;
	            case 67:
	                this.state = 217;
	                this.globalConstantGroup();
	                break;
	            case 66:
	                this.state = 218;
	                this.record();
	                break;
	            case 104:
	                this.state = 219;
	                this.functionDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 228;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 59)) & ~0x1f) === 0 && ((1 << (_la - 59)) & 7864323) !== 0)) {
	            this.state = 225;
	            this.stateExpr();
	            this.state = 230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 234;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 63)) & ~0x1f) === 0 && ((1 << (_la - 63)) & 7) !== 0)) {
	            this.state = 231;
	            this.trans();
	            this.state = 236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===70) {
	            this.state = 237;
	            this.invariantExpression();
	            this.state = 242;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83) {
	            this.state = 243;
	            this.goal();
	        }

	        this.state = 246;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateExpr() {
	    let localctx = new StateExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CycloneParser.RULE_stateExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 15) !== 0)) {
	            this.state = 248;
	            this.stateModifier();
	            this.state = 253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 254;
	        _la = this._input.LA(1);
	        if(!(_la===59 || _la===60)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 255;
	        this.identifier();
	        this.state = 256;
	        this.stateScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateScope() {
	    let localctx = new StateScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CycloneParser.RULE_stateScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 258;
	        this.match(CycloneParser.LBRACE);
	        this.state = 262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 70147) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 2089541) !== 0)) {
	            this.state = 259;
	            this.statement();
	            this.state = 264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 265;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trans() {
	    let localctx = new TransContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CycloneParser.RULE_trans);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        _la = this._input.LA(1);
	        if(!(((((_la - 63)) & ~0x1f) === 0 && ((1 << (_la - 63)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 268;
	            this.identifier();
	        }

	        this.state = 271;
	        this.transScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transScope() {
	    let localctx = new TransScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CycloneParser.RULE_transScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        this.match(CycloneParser.LBRACE);
	        this.state = 274;
	        this.identifier();

	        this.state = 275;
	        this.transOp();
	        this.state = 276;
	        this.transDef();
	        this.state = 280;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68 || _la===69) {
	            this.state = 278;
	            _la = this._input.LA(1);
	            if(!(_la===68 || _la===69)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 279;
	            this.label();
	        }

	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===77) {
	            this.state = 282;
	            this.whereExpr();
	            this.state = 283;
	            this.match(CycloneParser.SEMI);
	        }

	        this.state = 287;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transOp() {
	    let localctx = new TransOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CycloneParser.RULE_transOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 289;
	        _la = this._input.LA(1);
	        if(!(_la===1 || _la===2)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transDef() {
	    let localctx = new TransDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CycloneParser.RULE_transDef);
	    var _la = 0;
	    try {
	        this.state = 307;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 291;
	            this.identifier();
	            this.state = 296;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===8) {
	                this.state = 292;
	                this.match(CycloneParser.COMMA);
	                this.state = 293;
	                this.identifier();
	                this.state = 298;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 299;
	            this.match(CycloneParser.STAR);
	            this.state = 301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 300;
	                this.transExclExpr();
	            }

	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 303;
	            this.match(CycloneParser.PLUS);
	            this.state = 305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 304;
	                this.transExclExpr();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transExclExpr() {
	    let localctx = new TransExclExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CycloneParser.RULE_transExclExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 309;
	        this.match(CycloneParser.LBRACK);
	        this.state = 310;
	        this.identifier();
	        this.state = 315;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 311;
	            this.match(CycloneParser.COMMA);
	            this.state = 312;
	            this.identifier();
	            this.state = 317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 318;
	        this.match(CycloneParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantExpression() {
	    let localctx = new InvariantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CycloneParser.RULE_invariantExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this.match(CycloneParser.INVARIANT);
	        this.state = 321;
	        this.identifier();
	        this.state = 322;
	        this.invariantScope();
	        this.state = 324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 323;
	            this.inExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inExpr() {
	    let localctx = new InExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CycloneParser.RULE_inExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 326;
	        this.match(CycloneParser.IN);
	        this.state = 327;
	        this.match(CycloneParser.LPAREN);
	        this.state = 328;
	        this.identifier();
	        this.state = 333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 329;
	            this.match(CycloneParser.COMMA);
	            this.state = 330;
	            this.identifier();
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 336;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantScope() {
	    let localctx = new InvariantScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CycloneParser.RULE_invariantScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 338;
	        this.match(CycloneParser.LBRACE);

	        this.state = 339;
	        this.statement();
	        this.state = 340;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goal() {
	    let localctx = new GoalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CycloneParser.RULE_goal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 342;
	        this.match(CycloneParser.GOAL);
	        this.state = 343;
	        this.match(CycloneParser.LBRACE);
	        this.state = 349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3 || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 8388613) !== 0)) {
	            this.state = 347;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 93:
	                this.state = 344;
	                this.letExpr();
	                break;
	            case 116:
	                this.state = 345;
	                this.pathAssignStatement();
	                break;
	            case 3:
	            case 95:
	                this.state = 346;
	                this.assertExpr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 352;
	        this.checkExpr();
	        this.state = 353;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkExpr() {
	    let localctx = new CheckExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CycloneParser.RULE_checkExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 355;
	        _la = this._input.LA(1);
	        if(!(_la===84 || _la===92)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 356;
	        this.forExpr();
	        this.state = 358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88 || _la===89) {
	            this.state = 357;
	            this.viaExpr();
	        }

	        this.state = 361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===91) {
	            this.state = 360;
	            this.withExpr();
	        }

	        this.state = 364;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86 || _la===90) {
	            this.state = 363;
	            this.stopExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forExpr() {
	    let localctx = new ForExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CycloneParser.RULE_forExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 366;
	        _la = this._input.LA(1);
	        if(!(((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 262657) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 367;
	        this.intLiteral();
	        this.state = 372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 368;
	            this.match(CycloneParser.COMMA);
	            this.state = 369;
	            this.intLiteral();
	            this.state = 374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopExpr() {
	    let localctx = new StopExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CycloneParser.RULE_stopExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 375;
	        _la = this._input.LA(1);
	        if(!(_la===86 || _la===90)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 376;
	        this.match(CycloneParser.LPAREN);
	        this.state = 377;
	        this.identifier();
	        this.state = 382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 378;
	            this.match(CycloneParser.COMMA);
	            this.state = 379;
	            this.identifier();
	            this.state = 384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 385;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viaExpr() {
	    let localctx = new ViaExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CycloneParser.RULE_viaExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        _la = this._input.LA(1);
	        if(!(_la===88 || _la===89)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 388;
	        this.match(CycloneParser.LPAREN);

	        this.state = 389;
	        this.pathExpr();
	        this.state = 394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 390;
	            this.match(CycloneParser.COMMA);
	            this.state = 391;
	            this.pathExpr();
	            this.state = 396;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 397;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withExpr() {
	    let localctx = new WithExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CycloneParser.RULE_withExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        this.match(CycloneParser.WITH);
	        this.state = 400;
	        this.match(CycloneParser.LPAREN);

	        this.state = 401;
	        this.identifier();
	        this.state = 406;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 402;
	            this.match(CycloneParser.COMMA);
	            this.state = 403;
	            this.identifier();
	            this.state = 408;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 409;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letExpr() {
	    let localctx = new LetExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CycloneParser.RULE_letExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 411;
	        this.match(CycloneParser.LET);
	        this.state = 412;
	        this.identifier();
	        this.state = 414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 413;
	            this.pathCondAssignExpr();
	        }

	        this.state = 416;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAssignStatement() {
	    let localctx = new PathAssignStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CycloneParser.RULE_pathAssignStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this.identifier();
	        this.state = 419;
	        this.pathCondAssignExpr();
	        this.state = 420;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondAssignExpr() {
	    let localctx = new PathCondAssignExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CycloneParser.RULE_pathCondAssignExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.match(CycloneParser.EQUAL);
	        this.state = 423;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExpr() {
	    let localctx = new PathExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CycloneParser.RULE_pathExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondition() {
	    let localctx = new PathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CycloneParser.RULE_pathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 427;
	        this.orPathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orPathCondition() {
	    let localctx = new OrPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CycloneParser.RULE_orPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.andPathCondition();
	        this.state = 434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===40) {
	            this.state = 430;
	            this.match(CycloneParser.OR);
	            this.state = 431;
	            this.andPathCondition();
	            this.state = 436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andPathCondition() {
	    let localctx = new AndPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CycloneParser.RULE_andPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        this.xorPathCondition();
	        this.state = 442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===41) {
	            this.state = 438;
	            this.match(CycloneParser.AND);
	            this.state = 439;
	            this.xorPathCondition();
	            this.state = 444;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xorPathCondition() {
	    let localctx = new XorPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CycloneParser.RULE_xorPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this.unaryPathCondition();
	        this.state = 450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===32) {
	            this.state = 446;
	            this.match(CycloneParser.HAT);
	            this.state = 447;
	            this.unaryPathCondition();
	            this.state = 452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryPathCondition() {
	    let localctx = new UnaryPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CycloneParser.RULE_unaryPathCondition);
	    try {
	        this.state = 457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 453;
	            this.match(CycloneParser.NOT);
	            this.state = 454;
	            this.unaryPathCondition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 455;
	            this.primaryCondition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 456;
	            this.parPathCondition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryCondition() {
	    let localctx = new PrimaryConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CycloneParser.RULE_primaryCondition);
	    try {
	        this.state = 462;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 459;
	            this.stateIncExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 460;
	            this.pathPrimaryExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 461;
	            this.boolLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parPathCondition() {
	    let localctx = new ParPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CycloneParser.RULE_parPathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 464;
	        this.match(CycloneParser.LPAREN);
	        this.state = 465;
	        this.pathCondition();
	        this.state = 466;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateIncExpr() {
	    let localctx = new StateIncExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CycloneParser.RULE_stateIncExpr);
	    var _la = 0;
	    try {
	        this.state = 515;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 476;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 46:
	            	this.state = 468;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 470;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===109) {
	            	    this.state = 469;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 47:
	            	this.state = 472;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 474;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===109) {
	            	    this.state = 473;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 116:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 478;
	            this.identifier();
	            this.state = 488;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 479;
	                this.match(CycloneParser.HAT);
	                this.state = 480;
	                this.match(CycloneParser.LBRACE);
	                this.state = 481;
	                this.intLiteral();
	                this.state = 484;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 482;
	                    this.match(CycloneParser.COLON);
	                    this.state = 483;
	                    this.intLiteral();
	                }

	                this.state = 486;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 498;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 46:
	            	this.state = 490;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 492;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===109) {
	            	    this.state = 491;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 47:
	            	this.state = 494;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 496;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===109) {
	            	    this.state = 495;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 500;
	            this.match(CycloneParser.LPAREN);
	            this.state = 501;
	            this.identifier();
	            this.state = 511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 502;
	                this.match(CycloneParser.HAT);
	                this.state = 503;
	                this.match(CycloneParser.LBRACE);
	                this.state = 504;
	                this.intLiteral();
	                this.state = 507;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 505;
	                    this.match(CycloneParser.COLON);
	                    this.state = 506;
	                    this.intLiteral();
	                }

	                this.state = 509;
	                this.match(CycloneParser.RBRACE);
	            }

	            this.state = 513;
	            this.match(CycloneParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimaryExpr() {
	    let localctx = new PathPrimaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CycloneParser.RULE_pathPrimaryExpr);
	    var _la = 0;
	    try {
	        this.state = 619;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 532;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 116:
	                this.state = 517;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 518;
	                this.pathOp();
	                this.state = 530;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 519;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 520;
	                    this.identifier();
	                    this.state = 525;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 521;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 522;
	                        this.identifier();
	                        this.state = 527;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 528;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 552; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 534;
	                this.match(CycloneParser.ARROW);
	                this.state = 550;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 116:
	                    this.state = 535;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 536;
	                    this.pathOp();
	                    this.state = 548;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 537;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 538;
	                        this.identifier();
	                        this.state = 543;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 539;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 540;
	                            this.identifier();
	                            this.state = 545;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 546;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 554; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            break;
	        case 19:
	        case 46:
	        case 47:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 564;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 46:
	            	this.state = 556;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 558;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===109) {
	            	    this.state = 557;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 47:
	            	this.state = 560;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 562;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===109) {
	            	    this.state = 561;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 566;
	            this.match(CycloneParser.LPAREN);
	            this.state = 582;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 116:
	                this.state = 567;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 568;
	                this.pathOp();
	                this.state = 580;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 569;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 570;
	                    this.identifier();
	                    this.state = 575;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 571;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 572;
	                        this.identifier();
	                        this.state = 577;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 578;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 602; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 584;
	                this.match(CycloneParser.ARROW);
	                this.state = 600;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 116:
	                    this.state = 585;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 586;
	                    this.pathOp();
	                    this.state = 598;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 587;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 588;
	                        this.identifier();
	                        this.state = 593;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 589;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 590;
	                            this.identifier();
	                            this.state = 595;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 596;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 604; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            this.state = 606;
	            this.match(CycloneParser.RPAREN);
	            this.state = 617;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	            if(la_===1) {
	                this.state = 607;
	                this.match(CycloneParser.HAT);
	                this.state = 608;
	                this.match(CycloneParser.LBRACE);
	                this.state = 609;
	                this.intLiteral();
	                this.state = 613;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 611;
	                    this.match(CycloneParser.COLON);
	                    this.state = 612;
	                    this.intLiteral();
	                }

	                this.state = 615;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOp() {
	    let localctx = new PathOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CycloneParser.RULE_pathOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.match(CycloneParser.P_OP_ONE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CycloneParser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 623;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateModifier() {
	    let localctx = new StateModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CycloneParser.RULE_stateModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        _la = this._input.LA(1);
	        if(!(((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CycloneParser.RULE_literal);
	    try {
	        this.state = 634;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 627;
	            this.intLiteral();
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 628;
	            this.realLiteral();
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 629;
	            this.boolLiteral();
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 630;
	            this.stringLiteral();
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 631;
	            this.charLiteral();
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 632;
	            this.enumLiteral();
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 633;
	            this.bvLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intLiteral() {
	    let localctx = new IntLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CycloneParser.RULE_intLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 636;
	        this.match(CycloneParser.INTLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realLiteral() {
	    let localctx = new RealLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CycloneParser.RULE_realLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this.match(CycloneParser.REALLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolLiteral() {
	    let localctx = new BoolLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CycloneParser.RULE_boolLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(CycloneParser.BOOLLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CycloneParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLiteral() {
	    let localctx = new CharLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CycloneParser.RULE_charLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this.match(CycloneParser.CHARLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bvLiteral() {
	    let localctx = new BvLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CycloneParser.RULE_bvLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 646;
	        this.match(CycloneParser.BVLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumLiteral() {
	    let localctx = new EnumLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CycloneParser.RULE_enumLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.match(CycloneParser.ENUMLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	record() {
	    let localctx = new RecordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CycloneParser.RULE_record);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this.match(CycloneParser.RECORD);
	        this.state = 651;
	        this.identifier();
	        this.state = 652;
	        this.recordScope();
	        this.state = 653;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordScope() {
	    let localctx = new RecordScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CycloneParser.RULE_recordScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this.match(CycloneParser.LBRACE);
	        this.state = 656;
	        this.recordVariableDeclGroup();
	        this.state = 657;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDeclGroup() {
	    let localctx = new RecordVariableDeclGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CycloneParser.RULE_recordVariableDeclGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 660; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 659;
	            this.recordVariableDecl();
	            this.state = 662; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 55) !== 0) || _la===108);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDecl() {
	    let localctx = new RecordVariableDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CycloneParser.RULE_recordVariableDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 664;
	        this.type();
	        this.state = 665;
	        this.variableDeclarator();
	        this.state = 666;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstantGroup() {
	    let localctx = new GlobalConstantGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CycloneParser.RULE_globalConstantGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 668;
	        this.match(CycloneParser.CONST);
	        this.state = 669;
	        this.type();
	        this.state = 670;
	        this.globalConstantDecl();
	        this.state = 675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 671;
	            this.match(CycloneParser.COMMA);
	            this.state = 672;
	            this.globalConstantDecl();
	            this.state = 677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 678;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstantDecl() {
	    let localctx = new GlobalConstantDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CycloneParser.RULE_globalConstantDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this.identifier();
	        this.state = 681;
	        this.match(CycloneParser.EQUAL);
	        this.state = 682;
	        this.variableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalVariableGroup() {
	    let localctx = new GlobalVariableGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CycloneParser.RULE_globalVariableGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        this.type();
	        this.state = 685;
	        this.variableDeclarator();
	        this.state = 690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 686;
	            this.match(CycloneParser.COMMA);
	            this.state = 687;
	            this.variableDeclarator();
	            this.state = 692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 693;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableGroup() {
	    let localctx = new LocalVariableGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CycloneParser.RULE_localVariableGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        this.type();
	        this.state = 696;
	        this.variableDeclarator();
	        this.state = 701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 697;
	            this.match(CycloneParser.COMMA);
	            this.state = 698;
	            this.variableDeclarator();
	            this.state = 703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 704;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CycloneParser.RULE_modifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 706;
	        _la = this._input.LA(1);
	        if(!(_la===49 || _la===50)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CycloneParser.RULE_type);
	    try {
	        this.state = 711;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	        case 72:
	        case 73:
	        case 75:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 708;
	            this.primitiveType();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 709;
	            this.enumType();
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 710;
	            this.bvType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveBvType() {
	    let localctx = new PrimitiveBvTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CycloneParser.RULE_primitiveBvType);
	    try {
	        this.state = 715;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	        case 72:
	        case 73:
	        case 75:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 713;
	            this.primitiveType();
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 714;
	            this.bvType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bvType() {
	    let localctx = new BvTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CycloneParser.RULE_bvType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this.match(CycloneParser.BV);
	        this.state = 718;
	        this.match(CycloneParser.LBRACK);
	        this.state = 719;
	        this.match(CycloneParser.INTLITERAL);
	        this.state = 720;
	        this.match(CycloneParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CycloneParser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        _la = this._input.LA(1);
	        if(!(((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 23) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumType() {
	    let localctx = new EnumTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CycloneParser.RULE_enumType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 724;
	        this.match(CycloneParser.ENUM);
	        this.state = 725;
	        this.match(CycloneParser.LBRACE);
	        this.state = 726;
	        this.enumDecl();
	        this.state = 731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 727;
	            this.match(CycloneParser.COMMA);
	            this.state = 728;
	            this.enumDecl();
	            this.state = 733;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 734;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDecl() {
	    let localctx = new EnumDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CycloneParser.RULE_enumDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CycloneParser.RULE_variableDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 738;
	        this.identifier();
	        this.state = 741;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 739;
	            this.match(CycloneParser.EQUAL);
	            this.state = 740;
	            this.variableInitializer();
	        }

	        this.state = 744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===77) {
	            this.state = 743;
	            this.whereExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereExpr() {
	    let localctx = new WhereExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CycloneParser.RULE_whereExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 746;
	        this.match(CycloneParser.WHERE);
	        this.state = 747;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CycloneParser.RULE_variableInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 749;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertExpr() {
	    let localctx = new AssertExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CycloneParser.RULE_assertExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 751;
	            this.annotationExpr();
	        }

	        this.state = 754;
	        this.match(CycloneParser.ASSERT);
	        this.state = 755;
	        this.assertMainExpr();
	        this.state = 757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 756;
	            this.inExpr();
	        }

	        this.state = 759;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertMainExpr() {
	    let localctx = new AssertMainExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CycloneParser.RULE_assertMainExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===100 || _la===101) {
	            this.state = 761;
	            _la = this._input.LA(1);
	            if(!(_la===100 || _la===101)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 764;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CycloneParser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 766;
	        this.expression();
	        this.state = 767;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CycloneParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 769;
	        this.conditionalImpliesExpression();
	        this.state = 772;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        if(la_===1) {
	            this.state = 770;
	            _la = this._input.LA(1);
	            if(!(_la===11 || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 15) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 771;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalImpliesExpression() {
	    let localctx = new ConditionalImpliesExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CycloneParser.RULE_conditionalImpliesExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.conditionalOrExpression();
	        this.state = 779;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 775;
	                this.match(CycloneParser.IMPLIES);
	                this.state = 776;
	                this.conditionalOrExpression(); 
	            }
	            this.state = 781;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpression() {
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CycloneParser.RULE_conditionalOrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 782;
	        this.conditionalAndExpression();
	        this.state = 787;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 783;
	                this.match(CycloneParser.OR);
	                this.state = 784;
	                this.conditionalAndExpression(); 
	            }
	            this.state = 789;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpression() {
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CycloneParser.RULE_conditionalAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 790;
	        this.conditionalXorExpression();
	        this.state = 795;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 791;
	                this.match(CycloneParser.AND);
	                this.state = 792;
	                this.conditionalXorExpression(); 
	            }
	            this.state = 797;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalXorExpression() {
	    let localctx = new ConditionalXorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CycloneParser.RULE_conditionalXorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 798;
	        this.bitwiseOrExpression();
	        this.state = 803;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 799;
	                this.match(CycloneParser.HAT);
	                this.state = 800;
	                this.bitwiseOrExpression(); 
	            }
	            this.state = 805;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseOrExpression() {
	    let localctx = new BitwiseOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CycloneParser.RULE_bitwiseOrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 806;
	        this.bitwiseAndExpression();
	        this.state = 811;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 807;
	                this.match(CycloneParser.BAR);
	                this.state = 808;
	                this.bitwiseAndExpression(); 
	            }
	            this.state = 813;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseAndExpression() {
	    let localctx = new BitwiseAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CycloneParser.RULE_bitwiseAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this.equalityExpression();
	        this.state = 819;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 815;
	                this.match(CycloneParser.BIT_AND);
	                this.state = 816;
	                this.equalityExpression(); 
	            }
	            this.state = 821;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CycloneParser.RULE_equalityExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 822;
	        this.relationalExpression();
	        this.state = 827;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 823;
	                _la = this._input.LA(1);
	                if(!(_la===21 || _la===48)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 824;
	                this.relationalExpression(); 
	            }
	            this.state = 829;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CycloneParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 830;
	        this.bitShiftExpression();
	        this.state = 835;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 831;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 405504) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 832;
	                this.bitShiftExpression(); 
	            }
	            this.state = 837;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitShiftExpression() {
	    let localctx = new BitShiftExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CycloneParser.RULE_bitShiftExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 838;
	        this.additiveExpression();
	        this.state = 843;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 839;
	                _la = this._input.LA(1);
	                if(!(_la===46 || _la===47)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 840;
	                this.additiveExpression(); 
	            }
	            this.state = 845;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CycloneParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        this.multiplicativeExpression();
	        this.state = 851;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 847;
	                _la = this._input.LA(1);
	                if(!(_la===20 || _la===28)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 848;
	                this.multiplicativeExpression(); 
	            }
	            this.state = 853;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CycloneParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854;
	        this.powExpression();
	        this.state = 859;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 855;
	                _la = this._input.LA(1);
	                if(!(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 8195) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 856;
	                this.powExpression(); 
	            }
	            this.state = 861;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powExpression() {
	    let localctx = new PowExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CycloneParser.RULE_powExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.unaryExpression();
	        this.state = 867;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 863;
	                this.match(CycloneParser.TIMES_TIMES);
	                this.state = 864;
	                this.unaryExpression(); 
	            }
	            this.state = 869;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CycloneParser.RULE_unaryExpression);
	    try {
	        this.state = 875;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 870;
	            this.match(CycloneParser.PLUS);
	            this.state = 871;
	            this.unaryExpression();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 872;
	            this.match(CycloneParser.MINUS);
	            this.state = 873;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 31:
	        case 35:
	        case 96:
	        case 98:
	        case 102:
	        case 105:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 874;
	            this.unaryExpressionNotPlusMinus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpressionNotPlusMinus() {
	    let localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CycloneParser.RULE_unaryExpressionNotPlusMinus);
	    var _la = 0;
	    try {
	        this.state = 885;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 31:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 877;
	            this.match(CycloneParser.NOT);
	            this.state = 878;
	            this.unaryExpression();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 879;
	            this.match(CycloneParser.BIT_NEGATION);
	            this.state = 880;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 96:
	        case 98:
	        case 102:
	        case 105:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 881;
	            this.primary();
	            this.state = 883;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	            if(la_===1) {
	                this.state = 882;
	                _la = this._input.LA(1);
	                if(!(_la===36 || _la===37)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oneExpr() {
	    let localctx = new OneExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CycloneParser.RULE_oneExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 887;
	        this.match(CycloneParser.ONE);
	        this.state = 888;
	        this.match(CycloneParser.LPAREN);
	        this.state = 889;
	        this.expression();
	        this.state = 892; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 890;
	            this.match(CycloneParser.COMMA);
	            this.state = 891;
	            this.expression();
	            this.state = 894; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===8);
	        this.state = 896;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freshExpr() {
	    let localctx = new FreshExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CycloneParser.RULE_freshExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 898;
	        this.match(CycloneParser.FRESH);
	        this.state = 899;
	        this.match(CycloneParser.LPAREN);
	        this.state = 900;
	        this.identifier();
	        this.state = 901;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initialExpr() {
	    let localctx = new InitialExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CycloneParser.RULE_initialExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(CycloneParser.INITIAL);
	        this.state = 904;
	        this.match(CycloneParser.LPAREN);
	        this.state = 905;
	        this.dotIdentifierExpr();
	        this.state = 906;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CycloneParser.RULE_functionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this.match(CycloneParser.FUNCTION);

	        this.state = 909;
	        this.identifier();
	        this.state = 910;
	        this.match(CycloneParser.COLON);
	        this.state = 911;
	        this.primitiveBvType();
	        this.state = 912;
	        this.functionBodyScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBodyScope() {
	    let localctx = new FunctionBodyScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CycloneParser.RULE_functionBodyScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 914;
	        this.functionParamsDecl();
	        this.state = 915;
	        this.match(CycloneParser.LBRACE);
	        this.state = 919;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 55) !== 0) || _la===108) {
	            this.state = 916;
	            this.localVariableGroup();
	            this.state = 921;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 923; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 922;
	            this.statement();
	            this.state = 925; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 70147) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 2089541) !== 0));
	        this.state = 927;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParamsDecl() {
	    let localctx = new FunctionParamsDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CycloneParser.RULE_functionParamsDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        this.match(CycloneParser.LPAREN);
	        this.state = 931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 930;
	            this.functionParam();
	        }

	        this.state = 937;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 933;
	            this.match(CycloneParser.COMMA);
	            this.state = 934;
	            this.functionParam();
	            this.state = 939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 940;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParam() {
	    let localctx = new FunctionParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CycloneParser.RULE_functionParam);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 942;
	        this.identifier();
	        this.state = 943;
	        this.match(CycloneParser.COLON);
	        this.state = 944;
	        this.primitiveBvType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnExpr() {
	    let localctx = new ReturnExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CycloneParser.RULE_returnExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.match(CycloneParser.RETURN);
	        this.state = 947;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CycloneParser.RULE_primary);
	    try {
	        this.state = 957;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 949;
	            this.parExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 950;
	            this.dotIdentifierExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 951;
	            this.literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 952;
	            this.initialExpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 953;
	            this.freshExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 954;
	            this.oneExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 955;
	            this.returnExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 956;
	            this.funCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotIdentifierExpr() {
	    let localctx = new DotIdentifierExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CycloneParser.RULE_dotIdentifierExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 959;
	        this.identifier();
	        this.state = 962;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 960;
	            this.match(CycloneParser.DOT);
	            this.state = 961;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parExpression() {
	    let localctx = new ParExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CycloneParser.RULE_parExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 964;
	        this.match(CycloneParser.LPAREN);
	        this.state = 965;
	        this.expression();
	        this.state = 966;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funCall() {
	    let localctx = new FunCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CycloneParser.RULE_funCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 968;
	        this.identifier();
	        this.state = 969;
	        this.match(CycloneParser.LPAREN);
	        this.state = 970;
	        this.expression();
	        this.state = 975;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 971;
	            this.match(CycloneParser.COMMA);
	            this.state = 972;
	            this.expression();
	            this.state = 977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 978;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteStatement() {
	    let localctx = new IteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CycloneParser.RULE_iteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 980;
	        this.match(CycloneParser.IF);
	        this.state = 981;
	        this.parExpression();
	        this.state = 982;
	        this.statement();
	        this.state = 985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 983;
	            this.match(CycloneParser.ELSE);
	            this.state = 984;
	            this.statement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationExpr() {
	    let localctx = new AnnotationExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CycloneParser.RULE_annotationExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.match(CycloneParser.AT_SIGN);
	        this.state = 988;
	        this.match(CycloneParser.LABEL);
	        this.state = 989;
	        this.match(CycloneParser.COLON);
	        this.state = 990;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CycloneParser.EOF = antlr4.Token.EOF;
CycloneParser.ARROW = 1;
CycloneParser.BI_ARROW = 2;
CycloneParser.AT_SIGN = 3;
CycloneParser.BAR = 4;
CycloneParser.COLON = 5;
CycloneParser.COLON_COLON = 6;
CycloneParser.COLON_EQUAL = 7;
CycloneParser.COMMA = 8;
CycloneParser.DOT = 9;
CycloneParser.DOTDOT = 10;
CycloneParser.EQUAL = 11;
CycloneParser.GREATER = 12;
CycloneParser.GREATER_EQUAL = 13;
CycloneParser.HASH = 14;
CycloneParser.LBRACE = 15;
CycloneParser.LBRACK = 16;
CycloneParser.LESS = 17;
CycloneParser.LESS_EQUAL = 18;
CycloneParser.LPAREN = 19;
CycloneParser.MINUS = 20;
CycloneParser.NOT_EQUAL = 21;
CycloneParser.RBRACE = 22;
CycloneParser.RBRACK = 23;
CycloneParser.RPAREN = 24;
CycloneParser.SEMI = 25;
CycloneParser.SLASH = 26;
CycloneParser.STAR = 27;
CycloneParser.PLUS = 28;
CycloneParser.XOR = 29;
CycloneParser.IMPLIES = 30;
CycloneParser.NOT = 31;
CycloneParser.HAT = 32;
CycloneParser.P_OP_ONE = 33;
CycloneParser.BIT_AND = 34;
CycloneParser.BIT_NEGATION = 35;
CycloneParser.PLUS_PLUS = 36;
CycloneParser.MINUS_MINUS = 37;
CycloneParser.TIMES_TIMES = 38;
CycloneParser.MOD = 39;
CycloneParser.OR = 40;
CycloneParser.AND = 41;
CycloneParser.ASSIGN_PLUS_EQ = 42;
CycloneParser.ASSIGN_MINUS_EQ = 43;
CycloneParser.ASSIGN_TIMES_EQ = 44;
CycloneParser.ASSIGN_DIV_EQ = 45;
CycloneParser.SHIFT_LEFT = 46;
CycloneParser.SHIFT_RIGHT = 47;
CycloneParser.DOUBLE_EQUAL = 48;
CycloneParser.GLOBAL = 49;
CycloneParser.NATIVE = 50;
CycloneParser.DEBUG = 51;
CycloneParser.LOG = 52;
CycloneParser.OUTPUT = 53;
CycloneParser.TRACE = 54;
CycloneParser.PRECISION = 55;
CycloneParser.TIMEOUT = 56;
CycloneParser.DETECT = 57;
CycloneParser.BVDISPLAY = 58;
CycloneParser.STATE = 59;
CycloneParser.NODE = 60;
CycloneParser.MACHINE = 61;
CycloneParser.GRAPH = 62;
CycloneParser.TRANS1 = 63;
CycloneParser.TRANS2 = 64;
CycloneParser.EDGE = 65;
CycloneParser.RECORD = 66;
CycloneParser.CONST = 67;
CycloneParser.ON = 68;
CycloneParser.LABEL = 69;
CycloneParser.INVARIANT = 70;
CycloneParser.INT = 71;
CycloneParser.BOOL = 72;
CycloneParser.REAL = 73;
CycloneParser.CHAR = 74;
CycloneParser.STRING = 75;
CycloneParser.ENUM = 76;
CycloneParser.WHERE = 77;
CycloneParser.START = 78;
CycloneParser.FINAL = 79;
CycloneParser.ABSTRACT = 80;
CycloneParser.NORMAL = 81;
CycloneParser.PREV = 82;
CycloneParser.GOAL = 83;
CycloneParser.CHECK = 84;
CycloneParser.FOR = 85;
CycloneParser.STOP = 86;
CycloneParser.AT = 87;
CycloneParser.VIA = 88;
CycloneParser.CONDITION = 89;
CycloneParser.REACH = 90;
CycloneParser.WITH = 91;
CycloneParser.ENUMERATE = 92;
CycloneParser.LET = 93;
CycloneParser.EACH = 94;
CycloneParser.ASSERT = 95;
CycloneParser.INITIAL = 96;
CycloneParser.IN = 97;
CycloneParser.FRESH = 98;
CycloneParser.OPTION = 99;
CycloneParser.ALWAYS = 100;
CycloneParser.SOME = 101;
CycloneParser.ONE = 102;
CycloneParser.UPTO = 103;
CycloneParser.FUNCTION = 104;
CycloneParser.RETURN = 105;
CycloneParser.IF = 106;
CycloneParser.ELSE = 107;
CycloneParser.BV = 108;
CycloneParser.INTLITERAL = 109;
CycloneParser.BVLITERAL = 110;
CycloneParser.REALLITERAL = 111;
CycloneParser.CHARLITERAL = 112;
CycloneParser.STRINGLITERAL = 113;
CycloneParser.BOOLLITERAL = 114;
CycloneParser.ENUMLITERAL = 115;
CycloneParser.IDENT = 116;
CycloneParser.ML_COMMENT = 117;
CycloneParser.SL_COMMENT = 118;
CycloneParser.WS = 119;

CycloneParser.RULE_identifier = 0;
CycloneParser.RULE_compOptions = 1;
CycloneParser.RULE_optionName = 2;
CycloneParser.RULE_program = 3;
CycloneParser.RULE_machineDecl = 4;
CycloneParser.RULE_machineScope = 5;
CycloneParser.RULE_stateExpr = 6;
CycloneParser.RULE_stateScope = 7;
CycloneParser.RULE_trans = 8;
CycloneParser.RULE_transScope = 9;
CycloneParser.RULE_transOp = 10;
CycloneParser.RULE_transDef = 11;
CycloneParser.RULE_transExclExpr = 12;
CycloneParser.RULE_invariantExpression = 13;
CycloneParser.RULE_inExpr = 14;
CycloneParser.RULE_invariantScope = 15;
CycloneParser.RULE_goal = 16;
CycloneParser.RULE_checkExpr = 17;
CycloneParser.RULE_forExpr = 18;
CycloneParser.RULE_stopExpr = 19;
CycloneParser.RULE_viaExpr = 20;
CycloneParser.RULE_withExpr = 21;
CycloneParser.RULE_letExpr = 22;
CycloneParser.RULE_pathAssignStatement = 23;
CycloneParser.RULE_pathCondAssignExpr = 24;
CycloneParser.RULE_pathExpr = 25;
CycloneParser.RULE_pathCondition = 26;
CycloneParser.RULE_orPathCondition = 27;
CycloneParser.RULE_andPathCondition = 28;
CycloneParser.RULE_xorPathCondition = 29;
CycloneParser.RULE_unaryPathCondition = 30;
CycloneParser.RULE_primaryCondition = 31;
CycloneParser.RULE_parPathCondition = 32;
CycloneParser.RULE_stateIncExpr = 33;
CycloneParser.RULE_pathPrimaryExpr = 34;
CycloneParser.RULE_pathOp = 35;
CycloneParser.RULE_label = 36;
CycloneParser.RULE_stateModifier = 37;
CycloneParser.RULE_literal = 38;
CycloneParser.RULE_intLiteral = 39;
CycloneParser.RULE_realLiteral = 40;
CycloneParser.RULE_boolLiteral = 41;
CycloneParser.RULE_stringLiteral = 42;
CycloneParser.RULE_charLiteral = 43;
CycloneParser.RULE_bvLiteral = 44;
CycloneParser.RULE_enumLiteral = 45;
CycloneParser.RULE_record = 46;
CycloneParser.RULE_recordScope = 47;
CycloneParser.RULE_recordVariableDeclGroup = 48;
CycloneParser.RULE_recordVariableDecl = 49;
CycloneParser.RULE_globalConstantGroup = 50;
CycloneParser.RULE_globalConstantDecl = 51;
CycloneParser.RULE_globalVariableGroup = 52;
CycloneParser.RULE_localVariableGroup = 53;
CycloneParser.RULE_modifier = 54;
CycloneParser.RULE_type = 55;
CycloneParser.RULE_primitiveBvType = 56;
CycloneParser.RULE_bvType = 57;
CycloneParser.RULE_primitiveType = 58;
CycloneParser.RULE_enumType = 59;
CycloneParser.RULE_enumDecl = 60;
CycloneParser.RULE_variableDeclarator = 61;
CycloneParser.RULE_whereExpr = 62;
CycloneParser.RULE_variableInitializer = 63;
CycloneParser.RULE_assertExpr = 64;
CycloneParser.RULE_assertMainExpr = 65;
CycloneParser.RULE_statement = 66;
CycloneParser.RULE_expression = 67;
CycloneParser.RULE_conditionalImpliesExpression = 68;
CycloneParser.RULE_conditionalOrExpression = 69;
CycloneParser.RULE_conditionalAndExpression = 70;
CycloneParser.RULE_conditionalXorExpression = 71;
CycloneParser.RULE_bitwiseOrExpression = 72;
CycloneParser.RULE_bitwiseAndExpression = 73;
CycloneParser.RULE_equalityExpression = 74;
CycloneParser.RULE_relationalExpression = 75;
CycloneParser.RULE_bitShiftExpression = 76;
CycloneParser.RULE_additiveExpression = 77;
CycloneParser.RULE_multiplicativeExpression = 78;
CycloneParser.RULE_powExpression = 79;
CycloneParser.RULE_unaryExpression = 80;
CycloneParser.RULE_unaryExpressionNotPlusMinus = 81;
CycloneParser.RULE_oneExpr = 82;
CycloneParser.RULE_freshExpr = 83;
CycloneParser.RULE_initialExpr = 84;
CycloneParser.RULE_functionDeclaration = 85;
CycloneParser.RULE_functionBodyScope = 86;
CycloneParser.RULE_functionParamsDecl = 87;
CycloneParser.RULE_functionParam = 88;
CycloneParser.RULE_returnExpr = 89;
CycloneParser.RULE_primary = 90;
CycloneParser.RULE_dotIdentifierExpr = 91;
CycloneParser.RULE_parExpression = 92;
CycloneParser.RULE_funCall = 93;
CycloneParser.RULE_iteStatement = 94;
CycloneParser.RULE_annotationExpr = 95;

class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_identifier;
    }

	IDENT() {
	    return this.getToken(CycloneParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class CompOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_compOptions;
    }

	OPTION() {
	    return this.getToken(CycloneParser.OPTION, 0);
	};

	optionName() {
	    return this.getTypedRuleContext(OptionNameContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCompOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCompOptions(this);
		}
	}


}



class OptionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_optionName;
    }

	DEBUG() {
	    return this.getToken(CycloneParser.DEBUG, 0);
	};

	LOG() {
	    return this.getToken(CycloneParser.LOG, 0);
	};

	OUTPUT() {
	    return this.getToken(CycloneParser.OUTPUT, 0);
	};

	TRACE() {
	    return this.getToken(CycloneParser.TRACE, 0);
	};

	PRECISION() {
	    return this.getToken(CycloneParser.PRECISION, 0);
	};

	TIMEOUT() {
	    return this.getToken(CycloneParser.TIMEOUT, 0);
	};

	DETECT() {
	    return this.getToken(CycloneParser.DETECT, 0);
	};

	BVDISPLAY() {
	    return this.getToken(CycloneParser.BVDISPLAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOptionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOptionName(this);
		}
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_program;
    }

	machineDecl() {
	    return this.getTypedRuleContext(MachineDeclContext,0);
	};

	EOF() {
	    return this.getToken(CycloneParser.EOF, 0);
	};

	compOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompOptionsContext);
	    } else {
	        return this.getTypedRuleContext(CompOptionsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitProgram(this);
		}
	}


}



class MachineDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machineDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	machineScope() {
	    return this.getTypedRuleContext(MachineScopeContext,0);
	};

	MACHINE() {
	    return this.getToken(CycloneParser.MACHINE, 0);
	};

	GRAPH() {
	    return this.getToken(CycloneParser.GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachineDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachineDecl(this);
		}
	}


}



class MachineScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machineScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	stateExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateExprContext);
	    } else {
	        return this.getTypedRuleContext(StateExprContext,i);
	    }
	};

	trans = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransContext);
	    } else {
	        return this.getTypedRuleContext(TransContext,i);
	    }
	};

	invariantExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InvariantExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InvariantExpressionContext,i);
	    }
	};

	goal() {
	    return this.getTypedRuleContext(GoalContext,0);
	};

	globalVariableGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalVariableGroupContext);
	    } else {
	        return this.getTypedRuleContext(GlobalVariableGroupContext,i);
	    }
	};

	globalConstantGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalConstantGroupContext);
	    } else {
	        return this.getTypedRuleContext(GlobalConstantGroupContext,i);
	    }
	};

	record = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordContext);
	    } else {
	        return this.getTypedRuleContext(RecordContext,i);
	    }
	};

	functionDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachineScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachineScope(this);
		}
	}


}



class StateExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	stateScope() {
	    return this.getTypedRuleContext(StateScopeContext,0);
	};

	STATE() {
	    return this.getToken(CycloneParser.STATE, 0);
	};

	NODE() {
	    return this.getToken(CycloneParser.NODE, 0);
	};

	stateModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateModifierContext);
	    } else {
	        return this.getTypedRuleContext(StateModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateExpr(this);
		}
	}


}



class StateScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateScope(this);
		}
	}


}



class TransContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_trans;
    }

	transScope() {
	    return this.getTypedRuleContext(TransScopeContext,0);
	};

	TRANS1() {
	    return this.getToken(CycloneParser.TRANS1, 0);
	};

	TRANS2() {
	    return this.getToken(CycloneParser.TRANS2, 0);
	};

	EDGE() {
	    return this.getToken(CycloneParser.EDGE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTrans(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTrans(this);
		}
	}


}



class TransScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	transOp() {
	    return this.getTypedRuleContext(TransOpContext,0);
	};

	transDef() {
	    return this.getTypedRuleContext(TransDefContext,0);
	};

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	ON() {
	    return this.getToken(CycloneParser.ON, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransScope(this);
		}
	}


}



class TransOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transOp;
    }

	ARROW() {
	    return this.getToken(CycloneParser.ARROW, 0);
	};

	BI_ARROW() {
	    return this.getToken(CycloneParser.BI_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransOp(this);
		}
	}


}



class TransDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transDef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	STAR() {
	    return this.getToken(CycloneParser.STAR, 0);
	};

	transExclExpr() {
	    return this.getTypedRuleContext(TransExclExprContext,0);
	};

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransDef(this);
		}
	}


}



class TransExclExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transExclExpr;
    }

	LBRACK() {
	    return this.getToken(CycloneParser.LBRACK, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RBRACK() {
	    return this.getToken(CycloneParser.RBRACK, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransExclExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransExclExpr(this);
		}
	}


}



class InvariantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantExpression;
    }

	INVARIANT() {
	    return this.getToken(CycloneParser.INVARIANT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	invariantScope() {
	    return this.getTypedRuleContext(InvariantScopeContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantExpression(this);
		}
	}


}



class InExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_inExpr;
    }

	IN() {
	    return this.getToken(CycloneParser.IN, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInExpr(this);
		}
	}


}



class InvariantScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantScope(this);
		}
	}


}



class GoalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_goal;
    }

	GOAL() {
	    return this.getToken(CycloneParser.GOAL, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	checkExpr() {
	    return this.getTypedRuleContext(CheckExprContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	letExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetExprContext);
	    } else {
	        return this.getTypedRuleContext(LetExprContext,i);
	    }
	};

	pathAssignStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathAssignStatementContext);
	    } else {
	        return this.getTypedRuleContext(PathAssignStatementContext,i);
	    }
	};

	assertExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssertExprContext);
	    } else {
	        return this.getTypedRuleContext(AssertExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGoal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGoal(this);
		}
	}


}



class CheckExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_checkExpr;
    }

	forExpr() {
	    return this.getTypedRuleContext(ForExprContext,0);
	};

	CHECK() {
	    return this.getToken(CycloneParser.CHECK, 0);
	};

	ENUMERATE() {
	    return this.getToken(CycloneParser.ENUMERATE, 0);
	};

	viaExpr() {
	    return this.getTypedRuleContext(ViaExprContext,0);
	};

	withExpr() {
	    return this.getTypedRuleContext(WithExprContext,0);
	};

	stopExpr() {
	    return this.getTypedRuleContext(StopExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCheckExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCheckExpr(this);
		}
	}


}



class ForExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_forExpr;
    }

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	FOR() {
	    return this.getToken(CycloneParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(CycloneParser.EACH, 0);
	};

	UPTO() {
	    return this.getToken(CycloneParser.UPTO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterForExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitForExpr(this);
		}
	}


}



class StopExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stopExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	REACH() {
	    return this.getToken(CycloneParser.REACH, 0);
	};

	STOP() {
	    return this.getToken(CycloneParser.STOP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStopExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStopExpr(this);
		}
	}


}



class ViaExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_viaExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	VIA() {
	    return this.getToken(CycloneParser.VIA, 0);
	};

	CONDITION() {
	    return this.getToken(CycloneParser.CONDITION, 0);
	};

	pathExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExprContext);
	    } else {
	        return this.getTypedRuleContext(PathExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterViaExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitViaExpr(this);
		}
	}


}



class WithExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_withExpr;
    }

	WITH() {
	    return this.getToken(CycloneParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWithExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWithExpr(this);
		}
	}


}



class LetExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_letExpr;
    }

	LET() {
	    return this.getToken(CycloneParser.LET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	pathCondAssignExpr() {
	    return this.getTypedRuleContext(PathCondAssignExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLetExpr(this);
		}
	}


}



class PathAssignStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathAssignStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	pathCondAssignExpr() {
	    return this.getTypedRuleContext(PathCondAssignExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathAssignStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathAssignStatement(this);
		}
	}


}



class PathCondAssignExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondAssignExpr;
    }

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondAssignExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondAssignExpr(this);
		}
	}


}



class PathExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathExpr;
    }

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathExpr(this);
		}
	}


}



class PathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondition;
    }

	orPathCondition() {
	    return this.getTypedRuleContext(OrPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondition(this);
		}
	}


}



class OrPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_orPathCondition;
    }

	andPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(AndPathConditionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOrPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOrPathCondition(this);
		}
	}


}



class AndPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_andPathCondition;
    }

	xorPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XorPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(XorPathConditionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAndPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAndPathCondition(this);
		}
	}


}



class XorPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_xorPathCondition;
    }

	unaryPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryPathConditionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterXorPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitXorPathCondition(this);
		}
	}


}



class UnaryPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryPathCondition;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryPathCondition() {
	    return this.getTypedRuleContext(UnaryPathConditionContext,0);
	};

	primaryCondition() {
	    return this.getTypedRuleContext(PrimaryConditionContext,0);
	};

	parPathCondition() {
	    return this.getTypedRuleContext(ParPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryPathCondition(this);
		}
	}


}



class PrimaryConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primaryCondition;
    }

	stateIncExpr() {
	    return this.getTypedRuleContext(StateIncExprContext,0);
	};

	pathPrimaryExpr() {
	    return this.getTypedRuleContext(PathPrimaryExprContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimaryCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimaryCondition(this);
		}
	}


}



class ParPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parPathCondition;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParPathCondition(this);
		}
	}


}



class StateIncExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateIncExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateIncExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateIncExpr(this);
		}
	}


}



class PathPrimaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathPrimaryExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	pathOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathOpContext);
	    } else {
	        return this.getTypedRuleContext(PathOpContext,i);
	    }
	};

	ARROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.ARROW);
	    } else {
	        return this.getToken(CycloneParser.ARROW, i);
	    }
	};


	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LBRACK);
	    } else {
	        return this.getToken(CycloneParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.RBRACK);
	    } else {
	        return this.getToken(CycloneParser.RBRACK, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathPrimaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathPrimaryExpr(this);
		}
	}


}



class PathOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathOp;
    }

	P_OP_ONE() {
	    return this.getToken(CycloneParser.P_OP_ONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathOp(this);
		}
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_label;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLabel(this);
		}
	}


}



class StateModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateModifier;
    }

	START() {
	    return this.getToken(CycloneParser.START, 0);
	};

	FINAL() {
	    return this.getToken(CycloneParser.FINAL, 0);
	};

	ABSTRACT() {
	    return this.getToken(CycloneParser.ABSTRACT, 0);
	};

	NORMAL() {
	    return this.getToken(CycloneParser.NORMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateModifier(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_literal;
    }

	intLiteral() {
	    return this.getTypedRuleContext(IntLiteralContext,0);
	};

	realLiteral() {
	    return this.getTypedRuleContext(RealLiteralContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	charLiteral() {
	    return this.getTypedRuleContext(CharLiteralContext,0);
	};

	enumLiteral() {
	    return this.getTypedRuleContext(EnumLiteralContext,0);
	};

	bvLiteral() {
	    return this.getTypedRuleContext(BvLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class IntLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_intLiteral;
    }

	INTLITERAL() {
	    return this.getToken(CycloneParser.INTLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIntLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIntLiteral(this);
		}
	}


}



class RealLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_realLiteral;
    }

	REALLITERAL() {
	    return this.getToken(CycloneParser.REALLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRealLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRealLiteral(this);
		}
	}


}



class BoolLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_boolLiteral;
    }

	BOOLLITERAL() {
	    return this.getToken(CycloneParser.BOOLLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBoolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBoolLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stringLiteral;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class CharLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_charLiteral;
    }

	CHARLITERAL() {
	    return this.getToken(CycloneParser.CHARLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCharLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCharLiteral(this);
		}
	}


}



class BvLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bvLiteral;
    }

	BVLITERAL() {
	    return this.getToken(CycloneParser.BVLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBvLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBvLiteral(this);
		}
	}


}



class EnumLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumLiteral;
    }

	ENUMLITERAL() {
	    return this.getToken(CycloneParser.ENUMLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumLiteral(this);
		}
	}


}



class RecordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_record;
    }

	RECORD() {
	    return this.getToken(CycloneParser.RECORD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	recordScope() {
	    return this.getTypedRuleContext(RecordScopeContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecord(this);
		}
	}


}



class RecordScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	recordVariableDeclGroup() {
	    return this.getTypedRuleContext(RecordVariableDeclGroupContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordScope(this);
		}
	}


}



class RecordVariableDeclGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDeclGroup;
    }

	recordVariableDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordVariableDeclContext);
	    } else {
	        return this.getTypedRuleContext(RecordVariableDeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDeclGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDeclGroup(this);
		}
	}


}



class RecordVariableDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDecl;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator() {
	    return this.getTypedRuleContext(VariableDeclaratorContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDecl(this);
		}
	}


}



class GlobalConstantGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalConstantGroup;
    }

	CONST() {
	    return this.getToken(CycloneParser.CONST, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	globalConstantDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalConstantDeclContext);
	    } else {
	        return this.getTypedRuleContext(GlobalConstantDeclContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalConstantGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalConstantGroup(this);
		}
	}


}



class GlobalConstantDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalConstantDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalConstantDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalConstantDecl(this);
		}
	}


}



class GlobalVariableGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalVariableGroup;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalVariableGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalVariableGroup(this);
		}
	}


}



class LocalVariableGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_localVariableGroup;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLocalVariableGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLocalVariableGroup(this);
		}
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_modifier;
    }

	GLOBAL() {
	    return this.getToken(CycloneParser.GLOBAL, 0);
	};

	NATIVE() {
	    return this.getToken(CycloneParser.NATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitModifier(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_type;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enumType() {
	    return this.getTypedRuleContext(EnumTypeContext,0);
	};

	bvType() {
	    return this.getTypedRuleContext(BvTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitType(this);
		}
	}


}



class PrimitiveBvTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primitiveBvType;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	bvType() {
	    return this.getTypedRuleContext(BvTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimitiveBvType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimitiveBvType(this);
		}
	}


}



class BvTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bvType;
    }

	BV() {
	    return this.getToken(CycloneParser.BV, 0);
	};

	LBRACK() {
	    return this.getToken(CycloneParser.LBRACK, 0);
	};

	INTLITERAL() {
	    return this.getToken(CycloneParser.INTLITERAL, 0);
	};

	RBRACK() {
	    return this.getToken(CycloneParser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBvType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBvType(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primitiveType;
    }

	INT() {
	    return this.getToken(CycloneParser.INT, 0);
	};

	BOOL() {
	    return this.getToken(CycloneParser.BOOL, 0);
	};

	REAL() {
	    return this.getToken(CycloneParser.REAL, 0);
	};

	STRING() {
	    return this.getToken(CycloneParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class EnumTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumType;
    }

	ENUM() {
	    return this.getToken(CycloneParser.ENUM, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	enumDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumDeclContext);
	    } else {
	        return this.getTypedRuleContext(EnumDeclContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumType(this);
		}
	}


}



class EnumDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumDecl(this);
		}
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableDeclarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}


}



class WhereExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_whereExpr;
    }

	WHERE() {
	    return this.getToken(CycloneParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWhereExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWhereExpr(this);
		}
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}


}



class AssertExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_assertExpr;
    }

	ASSERT() {
	    return this.getToken(CycloneParser.ASSERT, 0);
	};

	assertMainExpr() {
	    return this.getTypedRuleContext(AssertMainExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	annotationExpr() {
	    return this.getTypedRuleContext(AnnotationExprContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAssertExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAssertExpr(this);
		}
	}


}



class AssertMainExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_assertMainExpr;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ALWAYS() {
	    return this.getToken(CycloneParser.ALWAYS, 0);
	};

	SOME() {
	    return this.getToken(CycloneParser.SOME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAssertMainExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAssertMainExpr(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_statement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_expression;
    }

	conditionalImpliesExpression() {
	    return this.getTypedRuleContext(ConditionalImpliesExpressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	ASSIGN_PLUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_PLUS_EQ, 0);
	};

	ASSIGN_MINUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_MINUS_EQ, 0);
	};

	ASSIGN_TIMES_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_TIMES_EQ, 0);
	};

	ASSIGN_DIV_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_DIV_EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConditionalImpliesExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalImpliesExpression;
    }

	conditionalOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExpressionContext,i);
	    }
	};

	IMPLIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.IMPLIES);
	    } else {
	        return this.getToken(CycloneParser.IMPLIES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalImpliesExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalImpliesExpression(this);
		}
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalAndExpression;
    }

	conditionalXorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalXorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalXorExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}


}



class ConditionalXorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalXorExpression;
    }

	bitwiseOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseOrExpressionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalXorExpression(this);
		}
	}


}



class BitwiseOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bitwiseOrExpression;
    }

	bitwiseAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseAndExpressionContext,i);
	    }
	};

	BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.BAR);
	    } else {
	        return this.getToken(CycloneParser.BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBitwiseOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBitwiseOrExpression(this);
		}
	}


}



class BitwiseAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bitwiseAndExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	BIT_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.BIT_AND);
	    } else {
	        return this.getToken(CycloneParser.BIT_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBitwiseAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBitwiseAndExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	DOUBLE_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.DOUBLE_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.DOUBLE_EQUAL, i);
	    }
	};


	NOT_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.NOT_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.NOT_EQUAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_relationalExpression;
    }

	bitShiftExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitShiftExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitShiftExpressionContext,i);
	    }
	};

	LESS_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.LESS_EQUAL, i);
	    }
	};


	GREATER_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.GREATER_EQUAL, i);
	    }
	};


	LESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS);
	    } else {
	        return this.getToken(CycloneParser.LESS, i);
	    }
	};


	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER);
	    } else {
	        return this.getToken(CycloneParser.GREATER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class BitShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bitShiftExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	SHIFT_LEFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SHIFT_LEFT);
	    } else {
	        return this.getToken(CycloneParser.SHIFT_LEFT, i);
	    }
	};


	SHIFT_RIGHT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SHIFT_RIGHT);
	    } else {
	        return this.getToken(CycloneParser.SHIFT_RIGHT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBitShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBitShiftExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.PLUS);
	    } else {
	        return this.getToken(CycloneParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MINUS);
	    } else {
	        return this.getToken(CycloneParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_multiplicativeExpression;
    }

	powExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PowExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PowExpressionContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.STAR);
	    } else {
	        return this.getToken(CycloneParser.STAR, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SLASH);
	    } else {
	        return this.getToken(CycloneParser.SLASH, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MOD);
	    } else {
	        return this.getToken(CycloneParser.MOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class PowExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_powExpression;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	TIMES_TIMES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.TIMES_TIMES);
	    } else {
	        return this.getToken(CycloneParser.TIMES_TIMES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPowExpression(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpression;
    }

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(CycloneParser.MINUS, 0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class UnaryExpressionNotPlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpressionNotPlusMinus;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	BIT_NEGATION() {
	    return this.getToken(CycloneParser.BIT_NEGATION, 0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	MINUS_MINUS() {
	    return this.getToken(CycloneParser.MINUS_MINUS, 0);
	};

	PLUS_PLUS() {
	    return this.getToken(CycloneParser.PLUS_PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpressionNotPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpressionNotPlusMinus(this);
		}
	}


}



class OneExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_oneExpr;
    }

	ONE() {
	    return this.getToken(CycloneParser.ONE, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOneExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOneExpr(this);
		}
	}


}



class FreshExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_freshExpr;
    }

	FRESH() {
	    return this.getToken(CycloneParser.FRESH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFreshExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFreshExpr(this);
		}
	}


}



class InitialExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_initialExpr;
    }

	INITIAL() {
	    return this.getToken(CycloneParser.INITIAL, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInitialExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInitialExpr(this);
		}
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionDeclaration;
    }

	FUNCTION() {
	    return this.getToken(CycloneParser.FUNCTION, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	primitiveBvType() {
	    return this.getTypedRuleContext(PrimitiveBvTypeContext,0);
	};

	functionBodyScope() {
	    return this.getTypedRuleContext(FunctionBodyScopeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}


}



class FunctionBodyScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionBodyScope;
    }

	functionParamsDecl() {
	    return this.getTypedRuleContext(FunctionParamsDeclContext,0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	localVariableGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocalVariableGroupContext);
	    } else {
	        return this.getTypedRuleContext(LocalVariableGroupContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionBodyScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionBodyScope(this);
		}
	}


}



class FunctionParamsDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionParamsDecl;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	functionParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParamContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionParamsDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionParamsDecl(this);
		}
	}


}



class FunctionParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionParam;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	primitiveBvType() {
	    return this.getTypedRuleContext(PrimitiveBvTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionParam(this);
		}
	}


}



class ReturnExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_returnExpr;
    }

	RETURN() {
	    return this.getToken(CycloneParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterReturnExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitReturnExpr(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primary;
    }

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	initialExpr() {
	    return this.getTypedRuleContext(InitialExprContext,0);
	};

	freshExpr() {
	    return this.getTypedRuleContext(FreshExprContext,0);
	};

	oneExpr() {
	    return this.getTypedRuleContext(OneExprContext,0);
	};

	returnExpr() {
	    return this.getTypedRuleContext(ReturnExprContext,0);
	};

	funCall() {
	    return this.getTypedRuleContext(FunCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class DotIdentifierExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_dotIdentifierExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(CycloneParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterDotIdentifierExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitDotIdentifierExpr(this);
		}
	}


}



class ParExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parExpression;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParExpression(this);
		}
	}


}



class FunCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_funCall;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunCall(this);
		}
	}


}



class IteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_iteStatement;
    }

	IF() {
	    return this.getToken(CycloneParser.IF, 0);
	};

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(CycloneParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIteStatement(this);
		}
	}


}



class AnnotationExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_annotationExpr;
    }

	AT_SIGN() {
	    return this.getToken(CycloneParser.AT_SIGN, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAnnotationExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAnnotationExpr(this);
		}
	}


}




CycloneParser.IdentifierContext = IdentifierContext; 
CycloneParser.CompOptionsContext = CompOptionsContext; 
CycloneParser.OptionNameContext = OptionNameContext; 
CycloneParser.ProgramContext = ProgramContext; 
CycloneParser.MachineDeclContext = MachineDeclContext; 
CycloneParser.MachineScopeContext = MachineScopeContext; 
CycloneParser.StateExprContext = StateExprContext; 
CycloneParser.StateScopeContext = StateScopeContext; 
CycloneParser.TransContext = TransContext; 
CycloneParser.TransScopeContext = TransScopeContext; 
CycloneParser.TransOpContext = TransOpContext; 
CycloneParser.TransDefContext = TransDefContext; 
CycloneParser.TransExclExprContext = TransExclExprContext; 
CycloneParser.InvariantExpressionContext = InvariantExpressionContext; 
CycloneParser.InExprContext = InExprContext; 
CycloneParser.InvariantScopeContext = InvariantScopeContext; 
CycloneParser.GoalContext = GoalContext; 
CycloneParser.CheckExprContext = CheckExprContext; 
CycloneParser.ForExprContext = ForExprContext; 
CycloneParser.StopExprContext = StopExprContext; 
CycloneParser.ViaExprContext = ViaExprContext; 
CycloneParser.WithExprContext = WithExprContext; 
CycloneParser.LetExprContext = LetExprContext; 
CycloneParser.PathAssignStatementContext = PathAssignStatementContext; 
CycloneParser.PathCondAssignExprContext = PathCondAssignExprContext; 
CycloneParser.PathExprContext = PathExprContext; 
CycloneParser.PathConditionContext = PathConditionContext; 
CycloneParser.OrPathConditionContext = OrPathConditionContext; 
CycloneParser.AndPathConditionContext = AndPathConditionContext; 
CycloneParser.XorPathConditionContext = XorPathConditionContext; 
CycloneParser.UnaryPathConditionContext = UnaryPathConditionContext; 
CycloneParser.PrimaryConditionContext = PrimaryConditionContext; 
CycloneParser.ParPathConditionContext = ParPathConditionContext; 
CycloneParser.StateIncExprContext = StateIncExprContext; 
CycloneParser.PathPrimaryExprContext = PathPrimaryExprContext; 
CycloneParser.PathOpContext = PathOpContext; 
CycloneParser.LabelContext = LabelContext; 
CycloneParser.StateModifierContext = StateModifierContext; 
CycloneParser.LiteralContext = LiteralContext; 
CycloneParser.IntLiteralContext = IntLiteralContext; 
CycloneParser.RealLiteralContext = RealLiteralContext; 
CycloneParser.BoolLiteralContext = BoolLiteralContext; 
CycloneParser.StringLiteralContext = StringLiteralContext; 
CycloneParser.CharLiteralContext = CharLiteralContext; 
CycloneParser.BvLiteralContext = BvLiteralContext; 
CycloneParser.EnumLiteralContext = EnumLiteralContext; 
CycloneParser.RecordContext = RecordContext; 
CycloneParser.RecordScopeContext = RecordScopeContext; 
CycloneParser.RecordVariableDeclGroupContext = RecordVariableDeclGroupContext; 
CycloneParser.RecordVariableDeclContext = RecordVariableDeclContext; 
CycloneParser.GlobalConstantGroupContext = GlobalConstantGroupContext; 
CycloneParser.GlobalConstantDeclContext = GlobalConstantDeclContext; 
CycloneParser.GlobalVariableGroupContext = GlobalVariableGroupContext; 
CycloneParser.LocalVariableGroupContext = LocalVariableGroupContext; 
CycloneParser.ModifierContext = ModifierContext; 
CycloneParser.TypeContext = TypeContext; 
CycloneParser.PrimitiveBvTypeContext = PrimitiveBvTypeContext; 
CycloneParser.BvTypeContext = BvTypeContext; 
CycloneParser.PrimitiveTypeContext = PrimitiveTypeContext; 
CycloneParser.EnumTypeContext = EnumTypeContext; 
CycloneParser.EnumDeclContext = EnumDeclContext; 
CycloneParser.VariableDeclaratorContext = VariableDeclaratorContext; 
CycloneParser.WhereExprContext = WhereExprContext; 
CycloneParser.VariableInitializerContext = VariableInitializerContext; 
CycloneParser.AssertExprContext = AssertExprContext; 
CycloneParser.AssertMainExprContext = AssertMainExprContext; 
CycloneParser.StatementContext = StatementContext; 
CycloneParser.ExpressionContext = ExpressionContext; 
CycloneParser.ConditionalImpliesExpressionContext = ConditionalImpliesExpressionContext; 
CycloneParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
CycloneParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
CycloneParser.ConditionalXorExpressionContext = ConditionalXorExpressionContext; 
CycloneParser.BitwiseOrExpressionContext = BitwiseOrExpressionContext; 
CycloneParser.BitwiseAndExpressionContext = BitwiseAndExpressionContext; 
CycloneParser.EqualityExpressionContext = EqualityExpressionContext; 
CycloneParser.RelationalExpressionContext = RelationalExpressionContext; 
CycloneParser.BitShiftExpressionContext = BitShiftExpressionContext; 
CycloneParser.AdditiveExpressionContext = AdditiveExpressionContext; 
CycloneParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
CycloneParser.PowExpressionContext = PowExpressionContext; 
CycloneParser.UnaryExpressionContext = UnaryExpressionContext; 
CycloneParser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext; 
CycloneParser.OneExprContext = OneExprContext; 
CycloneParser.FreshExprContext = FreshExprContext; 
CycloneParser.InitialExprContext = InitialExprContext; 
CycloneParser.FunctionDeclarationContext = FunctionDeclarationContext; 
CycloneParser.FunctionBodyScopeContext = FunctionBodyScopeContext; 
CycloneParser.FunctionParamsDeclContext = FunctionParamsDeclContext; 
CycloneParser.FunctionParamContext = FunctionParamContext; 
CycloneParser.ReturnExprContext = ReturnExprContext; 
CycloneParser.PrimaryContext = PrimaryContext; 
CycloneParser.DotIdentifierExprContext = DotIdentifierExprContext; 
CycloneParser.ParExpressionContext = ParExpressionContext; 
CycloneParser.FunCallContext = FunCallContext; 
CycloneParser.IteStatementContext = IteStatementContext; 
CycloneParser.AnnotationExprContext = AnnotationExprContext; 
