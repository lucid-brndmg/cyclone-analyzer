// Generated from grammar/CycloneParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CycloneParserListener from './CycloneParserListener.js';
const serializedATN = [4,1,121,1003,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,1,0,1,0,1,1,1,1,1,1,
1,1,1,1,1,1,1,2,1,2,1,3,5,3,208,8,3,10,3,12,3,211,9,3,1,3,1,3,1,3,1,4,1,
4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,225,8,5,10,5,12,5,228,9,5,1,5,5,5,231,
8,5,10,5,12,5,234,9,5,1,5,5,5,237,8,5,10,5,12,5,240,9,5,1,5,5,5,243,8,5,
10,5,12,5,246,9,5,1,5,3,5,249,8,5,1,5,1,5,1,6,5,6,254,8,6,10,6,12,6,257,
9,6,1,6,1,6,1,6,1,6,1,7,1,7,5,7,265,8,7,10,7,12,7,268,9,7,1,7,1,7,1,8,1,
8,3,8,274,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,285,8,9,1,9,1,9,1,
9,3,9,290,8,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,5,11,299,8,11,10,11,12,11,
302,9,11,1,11,1,11,3,11,306,8,11,1,11,1,11,3,11,310,8,11,3,11,312,8,11,1,
12,1,12,1,12,1,12,5,12,318,8,12,10,12,12,12,321,9,12,1,12,1,12,1,13,1,13,
1,13,1,13,3,13,329,8,13,1,14,1,14,1,14,1,14,1,14,5,14,336,8,14,10,14,12,
14,339,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,5,16,
352,8,16,10,16,12,16,355,9,16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,363,8,17,
1,17,3,17,366,8,17,1,17,3,17,369,8,17,1,18,1,18,1,18,1,18,5,18,375,8,18,
10,18,12,18,378,9,18,1,19,1,19,1,19,1,19,1,19,5,19,385,8,19,10,19,12,19,
388,9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,5,21,400,8,21,
10,21,12,21,403,9,21,1,22,1,22,1,22,1,22,1,22,5,22,410,8,22,10,22,12,22,
413,9,22,1,22,1,22,1,23,1,23,1,23,3,23,420,8,23,1,23,1,23,1,24,1,24,1,24,
1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,5,28,438,8,28,10,
28,12,28,441,9,28,1,29,1,29,1,29,5,29,446,8,29,10,29,12,29,449,9,29,1,30,
1,30,1,30,5,30,454,8,30,10,30,12,30,457,9,30,1,31,1,31,1,31,1,31,3,31,463,
8,31,1,32,1,32,1,32,3,32,468,8,32,1,33,1,33,1,33,1,33,1,34,1,34,3,34,476,
8,34,1,34,1,34,3,34,480,8,34,3,34,482,8,34,1,34,1,34,1,34,1,34,1,34,1,34,
3,34,490,8,34,1,34,1,34,3,34,494,8,34,1,34,1,34,3,34,498,8,34,1,34,1,34,
3,34,502,8,34,3,34,504,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,513,
8,34,1,34,1,34,3,34,517,8,34,1,34,1,34,3,34,521,8,34,1,35,1,35,1,35,1,35,
1,35,1,35,5,35,529,8,35,10,35,12,35,532,9,35,1,35,1,35,3,35,536,8,35,3,35,
538,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,547,8,35,10,35,12,35,550,
9,35,1,35,1,35,3,35,554,8,35,3,35,556,8,35,4,35,558,8,35,11,35,12,35,559,
1,35,1,35,3,35,564,8,35,1,35,1,35,3,35,568,8,35,3,35,570,8,35,1,35,1,35,
1,35,1,35,1,35,1,35,1,35,5,35,579,8,35,10,35,12,35,582,9,35,1,35,1,35,3,
35,586,8,35,3,35,588,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,597,8,
35,10,35,12,35,600,9,35,1,35,1,35,3,35,604,8,35,3,35,606,8,35,4,35,608,8,
35,11,35,12,35,609,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,619,8,35,1,35,
1,35,3,35,623,8,35,3,35,625,8,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,
1,39,1,39,1,39,1,39,1,39,3,39,640,8,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,
48,1,48,1,49,4,49,666,8,49,11,49,12,49,667,1,50,1,50,1,50,1,50,1,51,1,51,
1,51,1,51,1,51,5,51,679,8,51,10,51,12,51,682,9,51,1,51,1,51,1,52,1,52,1,
52,1,52,1,53,1,53,1,53,1,53,5,53,694,8,53,10,53,12,53,697,9,53,1,53,1,53,
1,54,1,54,1,54,1,54,5,54,705,8,54,10,54,12,54,708,9,54,1,54,1,54,1,55,1,
55,1,56,1,56,1,56,3,56,717,8,56,1,57,1,57,3,57,721,8,57,1,58,1,58,1,58,1,
58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,5,60,735,8,60,10,60,12,60,738,
9,60,1,60,1,60,1,61,1,61,1,62,1,62,1,62,3,62,747,8,62,1,62,3,62,750,8,62,
1,63,1,63,1,63,1,64,1,64,1,65,3,65,758,8,65,1,65,1,65,1,65,3,65,763,8,65,
1,65,1,65,1,66,3,66,768,8,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,3,68,
778,8,68,1,69,1,69,1,69,5,69,783,8,69,10,69,12,69,786,9,69,1,70,1,70,1,70,
5,70,791,8,70,10,70,12,70,794,9,70,1,71,1,71,1,71,5,71,799,8,71,10,71,12,
71,802,9,71,1,72,1,72,1,72,5,72,807,8,72,10,72,12,72,810,9,72,1,73,1,73,
1,73,5,73,815,8,73,10,73,12,73,818,9,73,1,74,1,74,1,74,5,74,823,8,74,10,
74,12,74,826,9,74,1,75,1,75,1,75,5,75,831,8,75,10,75,12,75,834,9,75,1,76,
1,76,1,76,5,76,839,8,76,10,76,12,76,842,9,76,1,77,1,77,1,77,5,77,847,8,77,
10,77,12,77,850,9,77,1,78,1,78,1,78,5,78,855,8,78,10,78,12,78,858,9,78,1,
79,1,79,1,79,5,79,863,8,79,10,79,12,79,866,9,79,1,80,1,80,1,80,5,80,871,
8,80,10,80,12,80,874,9,80,1,81,1,81,1,81,1,81,1,81,3,81,881,8,81,1,82,1,
82,1,82,1,82,1,82,1,82,3,82,889,8,82,3,82,891,8,82,1,83,1,83,1,83,1,83,1,
83,4,83,898,8,83,11,83,12,83,899,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,
1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,
87,1,88,1,88,1,88,5,88,928,8,88,10,88,12,88,931,9,88,1,88,4,88,934,8,88,
11,88,12,88,935,1,88,1,88,1,89,1,89,3,89,942,8,89,1,89,1,89,5,89,946,8,89,
10,89,12,89,949,9,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,
92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,968,8,92,1,93,1,93,1,93,3,93,973,8,
93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,5,95,984,8,95,10,95,12,95,
987,9,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,3,96,996,8,96,1,97,1,97,1,97,
1,97,1,97,1,97,0,0,98,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,0,21,
1,0,53,60,1,0,63,64,1,0,61,62,1,0,65,67,1,0,70,71,1,0,1,2,2,0,86,86,94,94,
3,0,87,87,96,96,105,105,2,0,88,88,92,92,1,0,90,91,1,0,80,83,1,0,51,52,2,
0,73,75,77,77,1,0,102,103,2,0,11,11,42,47,2,0,21,21,50,50,2,0,12,13,17,18,
1,0,48,49,2,0,20,20,28,28,2,0,26,27,39,39,1,0,36,37,1030,0,196,1,0,0,0,2,
198,1,0,0,0,4,204,1,0,0,0,6,209,1,0,0,0,8,215,1,0,0,0,10,219,1,0,0,0,12,
255,1,0,0,0,14,262,1,0,0,0,16,271,1,0,0,0,18,277,1,0,0,0,20,293,1,0,0,0,
22,311,1,0,0,0,24,313,1,0,0,0,26,324,1,0,0,0,28,330,1,0,0,0,30,342,1,0,0,
0,32,346,1,0,0,0,34,359,1,0,0,0,36,370,1,0,0,0,38,379,1,0,0,0,40,391,1,0,
0,0,42,396,1,0,0,0,44,404,1,0,0,0,46,416,1,0,0,0,48,423,1,0,0,0,50,427,1,
0,0,0,52,430,1,0,0,0,54,432,1,0,0,0,56,434,1,0,0,0,58,442,1,0,0,0,60,450,
1,0,0,0,62,462,1,0,0,0,64,467,1,0,0,0,66,469,1,0,0,0,68,520,1,0,0,0,70,624,
1,0,0,0,72,626,1,0,0,0,74,628,1,0,0,0,76,630,1,0,0,0,78,639,1,0,0,0,80,641,
1,0,0,0,82,643,1,0,0,0,84,645,1,0,0,0,86,647,1,0,0,0,88,649,1,0,0,0,90,651,
1,0,0,0,92,653,1,0,0,0,94,655,1,0,0,0,96,660,1,0,0,0,98,665,1,0,0,0,100,
669,1,0,0,0,102,673,1,0,0,0,104,685,1,0,0,0,106,689,1,0,0,0,108,700,1,0,
0,0,110,711,1,0,0,0,112,716,1,0,0,0,114,720,1,0,0,0,116,722,1,0,0,0,118,
727,1,0,0,0,120,729,1,0,0,0,122,741,1,0,0,0,124,743,1,0,0,0,126,751,1,0,
0,0,128,754,1,0,0,0,130,757,1,0,0,0,132,767,1,0,0,0,134,771,1,0,0,0,136,
774,1,0,0,0,138,779,1,0,0,0,140,787,1,0,0,0,142,795,1,0,0,0,144,803,1,0,
0,0,146,811,1,0,0,0,148,819,1,0,0,0,150,827,1,0,0,0,152,835,1,0,0,0,154,
843,1,0,0,0,156,851,1,0,0,0,158,859,1,0,0,0,160,867,1,0,0,0,162,880,1,0,
0,0,164,890,1,0,0,0,166,892,1,0,0,0,168,903,1,0,0,0,170,908,1,0,0,0,172,
913,1,0,0,0,174,918,1,0,0,0,176,924,1,0,0,0,178,939,1,0,0,0,180,952,1,0,
0,0,182,956,1,0,0,0,184,967,1,0,0,0,186,969,1,0,0,0,188,974,1,0,0,0,190,
978,1,0,0,0,192,990,1,0,0,0,194,997,1,0,0,0,196,197,5,118,0,0,197,1,1,0,
0,0,198,199,5,101,0,0,199,200,3,4,2,0,200,201,5,11,0,0,201,202,3,78,39,0,
202,203,5,25,0,0,203,3,1,0,0,0,204,205,7,0,0,0,205,5,1,0,0,0,206,208,3,2,
1,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,
212,1,0,0,0,211,209,1,0,0,0,212,213,3,8,4,0,213,214,5,0,0,1,214,7,1,0,0,
0,215,216,7,1,0,0,216,217,3,0,0,0,217,218,3,10,5,0,218,9,1,0,0,0,219,226,
5,15,0,0,220,225,3,106,53,0,221,225,3,102,51,0,222,225,3,94,47,0,223,225,
3,174,87,0,224,220,1,0,0,0,224,221,1,0,0,0,224,222,1,0,0,0,224,223,1,0,0,
0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,232,1,0,0,0,228,226,
1,0,0,0,229,231,3,12,6,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,
232,233,1,0,0,0,233,238,1,0,0,0,234,232,1,0,0,0,235,237,3,16,8,0,236,235,
1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,244,1,0,0,0,
240,238,1,0,0,0,241,243,3,26,13,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,
1,0,0,0,244,245,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,247,249,3,32,16,
0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,251,5,22,0,0,251,11,
1,0,0,0,252,254,3,76,38,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,
0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,259,7,2,0,0,259,260,
3,0,0,0,260,261,3,14,7,0,261,13,1,0,0,0,262,266,5,15,0,0,263,265,3,134,67,
0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,269,
1,0,0,0,268,266,1,0,0,0,269,270,5,22,0,0,270,15,1,0,0,0,271,273,7,3,0,0,
272,274,3,0,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,
3,18,9,0,276,17,1,0,0,0,277,278,5,15,0,0,278,279,3,0,0,0,279,280,3,20,10,
0,280,281,3,22,11,0,281,284,1,0,0,0,282,283,7,4,0,0,283,285,3,74,37,0,284,
282,1,0,0,0,284,285,1,0,0,0,285,289,1,0,0,0,286,287,3,126,63,0,287,288,5,
25,0,0,288,290,1,0,0,0,289,286,1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,
292,5,22,0,0,292,19,1,0,0,0,293,294,7,5,0,0,294,21,1,0,0,0,295,300,3,0,0,
0,296,297,5,8,0,0,297,299,3,0,0,0,298,296,1,0,0,0,299,302,1,0,0,0,300,298,
1,0,0,0,300,301,1,0,0,0,301,312,1,0,0,0,302,300,1,0,0,0,303,305,5,27,0,0,
304,306,3,24,12,0,305,304,1,0,0,0,305,306,1,0,0,0,306,312,1,0,0,0,307,309,
5,28,0,0,308,310,3,24,12,0,309,308,1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,
0,311,295,1,0,0,0,311,303,1,0,0,0,311,307,1,0,0,0,312,23,1,0,0,0,313,314,
5,16,0,0,314,319,3,0,0,0,315,316,5,8,0,0,316,318,3,0,0,0,317,315,1,0,0,0,
318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,319,
1,0,0,0,322,323,5,23,0,0,323,25,1,0,0,0,324,325,5,72,0,0,325,326,3,0,0,0,
326,328,3,30,15,0,327,329,3,28,14,0,328,327,1,0,0,0,328,329,1,0,0,0,329,
27,1,0,0,0,330,331,5,99,0,0,331,332,5,19,0,0,332,337,3,0,0,0,333,334,5,8,
0,0,334,336,3,0,0,0,335,333,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,
338,1,0,0,0,338,340,1,0,0,0,339,337,1,0,0,0,340,341,5,24,0,0,341,29,1,0,
0,0,342,343,5,15,0,0,343,344,3,134,67,0,344,345,5,22,0,0,345,31,1,0,0,0,
346,347,5,85,0,0,347,353,5,15,0,0,348,352,3,46,23,0,349,352,3,48,24,0,350,
352,3,130,65,0,351,348,1,0,0,0,351,349,1,0,0,0,351,350,1,0,0,0,352,355,1,
0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,353,1,0,0,0,356,
357,3,34,17,0,357,358,5,22,0,0,358,33,1,0,0,0,359,360,7,6,0,0,360,362,3,
36,18,0,361,363,3,40,20,0,362,361,1,0,0,0,362,363,1,0,0,0,363,365,1,0,0,
0,364,366,3,44,22,0,365,364,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,0,367,
369,3,38,19,0,368,367,1,0,0,0,368,369,1,0,0,0,369,35,1,0,0,0,370,371,7,7,
0,0,371,376,3,80,40,0,372,373,5,8,0,0,373,375,3,80,40,0,374,372,1,0,0,0,
375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,37,1,0,0,0,378,376,1,
0,0,0,379,380,7,8,0,0,380,381,5,19,0,0,381,386,3,0,0,0,382,383,5,8,0,0,383,
385,3,0,0,0,384,382,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,
0,0,387,389,1,0,0,0,388,386,1,0,0,0,389,390,5,24,0,0,390,39,1,0,0,0,391,
392,7,9,0,0,392,393,5,19,0,0,393,394,3,42,21,0,394,395,5,24,0,0,395,41,1,
0,0,0,396,401,3,52,26,0,397,398,5,8,0,0,398,400,3,52,26,0,399,397,1,0,0,
0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,43,1,0,0,0,403,401,
1,0,0,0,404,405,5,93,0,0,405,406,5,19,0,0,406,411,3,0,0,0,407,408,5,8,0,
0,408,410,3,0,0,0,409,407,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,
1,0,0,0,412,414,1,0,0,0,413,411,1,0,0,0,414,415,5,24,0,0,415,45,1,0,0,0,
416,417,5,95,0,0,417,419,3,0,0,0,418,420,3,50,25,0,419,418,1,0,0,0,419,420,
1,0,0,0,420,421,1,0,0,0,421,422,5,25,0,0,422,47,1,0,0,0,423,424,3,0,0,0,
424,425,3,50,25,0,425,426,5,25,0,0,426,49,1,0,0,0,427,428,5,11,0,0,428,429,
3,54,27,0,429,51,1,0,0,0,430,431,3,54,27,0,431,53,1,0,0,0,432,433,3,56,28,
0,433,55,1,0,0,0,434,439,3,58,29,0,435,436,5,40,0,0,436,438,3,58,29,0,437,
435,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,57,1,0,0,
0,441,439,1,0,0,0,442,447,3,60,30,0,443,444,5,41,0,0,444,446,3,60,30,0,445,
443,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,59,1,0,0,
0,449,447,1,0,0,0,450,455,3,62,31,0,451,452,5,32,0,0,452,454,3,62,31,0,453,
451,1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,61,1,0,0,
0,457,455,1,0,0,0,458,459,5,31,0,0,459,463,3,62,31,0,460,463,3,64,32,0,461,
463,3,66,33,0,462,458,1,0,0,0,462,460,1,0,0,0,462,461,1,0,0,0,463,63,1,0,
0,0,464,468,3,68,34,0,465,468,3,70,35,0,466,468,3,84,42,0,467,464,1,0,0,
0,467,465,1,0,0,0,467,466,1,0,0,0,468,65,1,0,0,0,469,470,5,19,0,0,470,471,
3,54,27,0,471,472,5,24,0,0,472,67,1,0,0,0,473,475,5,48,0,0,474,476,3,80,
40,0,475,474,1,0,0,0,475,476,1,0,0,0,476,482,1,0,0,0,477,479,5,49,0,0,478,
480,3,80,40,0,479,478,1,0,0,0,479,480,1,0,0,0,480,482,1,0,0,0,481,473,1,
0,0,0,481,477,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,493,3,0,0,0,484,
485,5,32,0,0,485,486,5,15,0,0,486,489,3,80,40,0,487,488,5,5,0,0,488,490,
3,80,40,0,489,487,1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,492,5,22,0,
0,492,494,1,0,0,0,493,484,1,0,0,0,493,494,1,0,0,0,494,521,1,0,0,0,495,497,
5,48,0,0,496,498,3,80,40,0,497,496,1,0,0,0,497,498,1,0,0,0,498,504,1,0,0,
0,499,501,5,49,0,0,500,502,3,80,40,0,501,500,1,0,0,0,501,502,1,0,0,0,502,
504,1,0,0,0,503,495,1,0,0,0,503,499,1,0,0,0,503,504,1,0,0,0,504,505,1,0,
0,0,505,506,5,19,0,0,506,516,3,0,0,0,507,508,5,32,0,0,508,509,5,15,0,0,509,
512,3,80,40,0,510,511,5,5,0,0,511,513,3,80,40,0,512,510,1,0,0,0,512,513,
1,0,0,0,513,514,1,0,0,0,514,515,5,22,0,0,515,517,1,0,0,0,516,507,1,0,0,0,
516,517,1,0,0,0,517,518,1,0,0,0,518,519,5,24,0,0,519,521,1,0,0,0,520,481,
1,0,0,0,520,503,1,0,0,0,521,69,1,0,0,0,522,538,3,0,0,0,523,535,3,72,36,0,
524,525,5,16,0,0,525,530,3,0,0,0,526,527,5,8,0,0,527,529,3,0,0,0,528,526,
1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,533,1,0,0,0,
532,530,1,0,0,0,533,534,5,23,0,0,534,536,1,0,0,0,535,524,1,0,0,0,535,536,
1,0,0,0,536,538,1,0,0,0,537,522,1,0,0,0,537,523,1,0,0,0,538,557,1,0,0,0,
539,555,5,1,0,0,540,556,3,0,0,0,541,553,3,72,36,0,542,543,5,16,0,0,543,548,
3,0,0,0,544,545,5,8,0,0,545,547,3,0,0,0,546,544,1,0,0,0,547,550,1,0,0,0,
548,546,1,0,0,0,548,549,1,0,0,0,549,551,1,0,0,0,550,548,1,0,0,0,551,552,
5,23,0,0,552,554,1,0,0,0,553,542,1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,
555,540,1,0,0,0,555,541,1,0,0,0,556,558,1,0,0,0,557,539,1,0,0,0,558,559,
1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,625,1,0,0,0,561,563,5,48,0,0,
562,564,3,80,40,0,563,562,1,0,0,0,563,564,1,0,0,0,564,570,1,0,0,0,565,567,
5,49,0,0,566,568,3,80,40,0,567,566,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,
0,569,561,1,0,0,0,569,565,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,587,
5,19,0,0,572,588,3,0,0,0,573,585,3,72,36,0,574,575,5,16,0,0,575,580,3,0,
0,0,576,577,5,8,0,0,577,579,3,0,0,0,578,576,1,0,0,0,579,582,1,0,0,0,580,
578,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,0,582,580,1,0,0,0,583,584,5,23,
0,0,584,586,1,0,0,0,585,574,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,
572,1,0,0,0,587,573,1,0,0,0,588,607,1,0,0,0,589,605,5,1,0,0,590,606,3,0,
0,0,591,603,3,72,36,0,592,593,5,16,0,0,593,598,3,0,0,0,594,595,5,8,0,0,595,
597,3,0,0,0,596,594,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,
0,0,599,601,1,0,0,0,600,598,1,0,0,0,601,602,5,23,0,0,602,604,1,0,0,0,603,
592,1,0,0,0,603,604,1,0,0,0,604,606,1,0,0,0,605,590,1,0,0,0,605,591,1,0,
0,0,606,608,1,0,0,0,607,589,1,0,0,0,608,609,1,0,0,0,609,607,1,0,0,0,609,
610,1,0,0,0,610,611,1,0,0,0,611,622,5,24,0,0,612,613,5,32,0,0,613,614,5,
15,0,0,614,615,3,80,40,0,615,618,1,0,0,0,616,617,5,5,0,0,617,619,3,80,40,
0,618,616,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,621,5,22,0,0,621,623,
1,0,0,0,622,612,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,537,1,0,0,0,
624,569,1,0,0,0,625,71,1,0,0,0,626,627,5,33,0,0,627,73,1,0,0,0,628,629,5,
115,0,0,629,75,1,0,0,0,630,631,7,10,0,0,631,77,1,0,0,0,632,640,3,80,40,0,
633,640,3,82,41,0,634,640,3,84,42,0,635,640,3,86,43,0,636,640,3,88,44,0,
637,640,3,92,46,0,638,640,3,90,45,0,639,632,1,0,0,0,639,633,1,0,0,0,639,
634,1,0,0,0,639,635,1,0,0,0,639,636,1,0,0,0,639,637,1,0,0,0,639,638,1,0,
0,0,640,79,1,0,0,0,641,642,5,111,0,0,642,81,1,0,0,0,643,644,5,113,0,0,644,
83,1,0,0,0,645,646,5,116,0,0,646,85,1,0,0,0,647,648,5,115,0,0,648,87,1,0,
0,0,649,650,5,114,0,0,650,89,1,0,0,0,651,652,5,112,0,0,652,91,1,0,0,0,653,
654,5,117,0,0,654,93,1,0,0,0,655,656,5,68,0,0,656,657,3,0,0,0,657,658,3,
96,48,0,658,659,5,25,0,0,659,95,1,0,0,0,660,661,5,15,0,0,661,662,3,98,49,
0,662,663,5,22,0,0,663,97,1,0,0,0,664,666,3,100,50,0,665,664,1,0,0,0,666,
667,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,99,1,0,0,0,669,670,3,112,
56,0,670,671,3,124,62,0,671,672,5,25,0,0,672,101,1,0,0,0,673,674,5,69,0,
0,674,675,3,112,56,0,675,680,3,104,52,0,676,677,5,8,0,0,677,679,3,104,52,
0,678,676,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,683,
1,0,0,0,682,680,1,0,0,0,683,684,5,25,0,0,684,103,1,0,0,0,685,686,3,0,0,0,
686,687,5,11,0,0,687,688,3,128,64,0,688,105,1,0,0,0,689,690,3,112,56,0,690,
695,3,124,62,0,691,692,5,8,0,0,692,694,3,124,62,0,693,691,1,0,0,0,694,697,
1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,698,1,0,0,0,697,695,1,0,0,0,
698,699,5,25,0,0,699,107,1,0,0,0,700,701,3,112,56,0,701,706,3,124,62,0,702,
703,5,8,0,0,703,705,3,124,62,0,704,702,1,0,0,0,705,708,1,0,0,0,706,704,1,
0,0,0,706,707,1,0,0,0,707,709,1,0,0,0,708,706,1,0,0,0,709,710,5,25,0,0,710,
109,1,0,0,0,711,712,7,11,0,0,712,111,1,0,0,0,713,717,3,118,59,0,714,717,
3,120,60,0,715,717,3,116,58,0,716,713,1,0,0,0,716,714,1,0,0,0,716,715,1,
0,0,0,717,113,1,0,0,0,718,721,3,118,59,0,719,721,3,116,58,0,720,718,1,0,
0,0,720,719,1,0,0,0,721,115,1,0,0,0,722,723,5,110,0,0,723,724,5,16,0,0,724,
725,5,111,0,0,725,726,5,23,0,0,726,117,1,0,0,0,727,728,7,12,0,0,728,119,
1,0,0,0,729,730,5,78,0,0,730,731,5,15,0,0,731,736,3,122,61,0,732,733,5,8,
0,0,733,735,3,122,61,0,734,732,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,
737,1,0,0,0,737,739,1,0,0,0,738,736,1,0,0,0,739,740,5,22,0,0,740,121,1,0,
0,0,741,742,3,0,0,0,742,123,1,0,0,0,743,746,3,0,0,0,744,745,5,11,0,0,745,
747,3,128,64,0,746,744,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,750,3,
126,63,0,749,748,1,0,0,0,749,750,1,0,0,0,750,125,1,0,0,0,751,752,5,79,0,
0,752,753,3,136,68,0,753,127,1,0,0,0,754,755,3,136,68,0,755,129,1,0,0,0,
756,758,3,194,97,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,
5,97,0,0,760,762,3,132,66,0,761,763,3,28,14,0,762,761,1,0,0,0,762,763,1,
0,0,0,763,764,1,0,0,0,764,765,5,25,0,0,765,131,1,0,0,0,766,768,7,13,0,0,
767,766,1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,770,3,136,68,0,770,133,
1,0,0,0,771,772,3,136,68,0,772,773,5,25,0,0,773,135,1,0,0,0,774,777,3,138,
69,0,775,776,7,14,0,0,776,778,3,136,68,0,777,775,1,0,0,0,777,778,1,0,0,0,
778,137,1,0,0,0,779,784,3,140,70,0,780,781,5,30,0,0,781,783,3,140,70,0,782,
780,1,0,0,0,783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,139,1,0,
0,0,786,784,1,0,0,0,787,792,3,142,71,0,788,789,5,40,0,0,789,791,3,142,71,
0,790,788,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,141,
1,0,0,0,794,792,1,0,0,0,795,800,3,144,72,0,796,797,5,41,0,0,797,799,3,144,
72,0,798,796,1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,
143,1,0,0,0,802,800,1,0,0,0,803,808,3,146,73,0,804,805,5,32,0,0,805,807,
3,146,73,0,806,804,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,
0,809,145,1,0,0,0,810,808,1,0,0,0,811,816,3,148,74,0,812,813,5,4,0,0,813,
815,3,148,74,0,814,812,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,816,817,1,
0,0,0,817,147,1,0,0,0,818,816,1,0,0,0,819,824,3,150,75,0,820,821,5,34,0,
0,821,823,3,150,75,0,822,820,1,0,0,0,823,826,1,0,0,0,824,822,1,0,0,0,824,
825,1,0,0,0,825,149,1,0,0,0,826,824,1,0,0,0,827,832,3,152,76,0,828,829,7,
15,0,0,829,831,3,152,76,0,830,828,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,
0,832,833,1,0,0,0,833,151,1,0,0,0,834,832,1,0,0,0,835,840,3,154,77,0,836,
837,7,16,0,0,837,839,3,154,77,0,838,836,1,0,0,0,839,842,1,0,0,0,840,838,
1,0,0,0,840,841,1,0,0,0,841,153,1,0,0,0,842,840,1,0,0,0,843,848,3,156,78,
0,844,845,7,17,0,0,845,847,3,156,78,0,846,844,1,0,0,0,847,850,1,0,0,0,848,
846,1,0,0,0,848,849,1,0,0,0,849,155,1,0,0,0,850,848,1,0,0,0,851,856,3,158,
79,0,852,853,7,18,0,0,853,855,3,158,79,0,854,852,1,0,0,0,855,858,1,0,0,0,
856,854,1,0,0,0,856,857,1,0,0,0,857,157,1,0,0,0,858,856,1,0,0,0,859,864,
3,160,80,0,860,861,7,19,0,0,861,863,3,160,80,0,862,860,1,0,0,0,863,866,1,
0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,159,1,0,0,0,866,864,1,0,0,0,867,
872,3,162,81,0,868,869,5,38,0,0,869,871,3,162,81,0,870,868,1,0,0,0,871,874,
1,0,0,0,872,870,1,0,0,0,872,873,1,0,0,0,873,161,1,0,0,0,874,872,1,0,0,0,
875,876,5,28,0,0,876,881,3,162,81,0,877,878,5,20,0,0,878,881,3,162,81,0,
879,881,3,164,82,0,880,875,1,0,0,0,880,877,1,0,0,0,880,879,1,0,0,0,881,163,
1,0,0,0,882,883,5,31,0,0,883,891,3,162,81,0,884,885,5,35,0,0,885,891,3,162,
81,0,886,888,3,184,92,0,887,889,7,20,0,0,888,887,1,0,0,0,888,889,1,0,0,0,
889,891,1,0,0,0,890,882,1,0,0,0,890,884,1,0,0,0,890,886,1,0,0,0,891,165,
1,0,0,0,892,893,5,104,0,0,893,894,5,19,0,0,894,897,3,136,68,0,895,896,5,
8,0,0,896,898,3,136,68,0,897,895,1,0,0,0,898,899,1,0,0,0,899,897,1,0,0,0,
899,900,1,0,0,0,900,901,1,0,0,0,901,902,5,24,0,0,902,167,1,0,0,0,903,904,
5,100,0,0,904,905,5,19,0,0,905,906,3,0,0,0,906,907,5,24,0,0,907,169,1,0,
0,0,908,909,5,98,0,0,909,910,5,19,0,0,910,911,3,186,93,0,911,912,5,24,0,
0,912,171,1,0,0,0,913,914,5,84,0,0,914,915,5,19,0,0,915,916,3,0,0,0,916,
917,5,24,0,0,917,173,1,0,0,0,918,919,5,106,0,0,919,920,3,0,0,0,920,921,5,
5,0,0,921,922,3,114,57,0,922,923,3,176,88,0,923,175,1,0,0,0,924,925,3,178,
89,0,925,929,5,15,0,0,926,928,3,108,54,0,927,926,1,0,0,0,928,931,1,0,0,0,
929,927,1,0,0,0,929,930,1,0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,932,934,
3,134,67,0,933,932,1,0,0,0,934,935,1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,
0,936,937,1,0,0,0,937,938,5,22,0,0,938,177,1,0,0,0,939,941,5,19,0,0,940,
942,3,180,90,0,941,940,1,0,0,0,941,942,1,0,0,0,942,947,1,0,0,0,943,944,5,
8,0,0,944,946,3,180,90,0,945,943,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,
947,948,1,0,0,0,948,950,1,0,0,0,949,947,1,0,0,0,950,951,5,24,0,0,951,179,
1,0,0,0,952,953,3,0,0,0,953,954,5,5,0,0,954,955,3,114,57,0,955,181,1,0,0,
0,956,957,5,107,0,0,957,958,3,136,68,0,958,183,1,0,0,0,959,968,3,188,94,
0,960,968,3,186,93,0,961,968,3,78,39,0,962,968,3,170,85,0,963,968,3,168,
84,0,964,968,3,166,83,0,965,968,3,182,91,0,966,968,3,190,95,0,967,959,1,
0,0,0,967,960,1,0,0,0,967,961,1,0,0,0,967,962,1,0,0,0,967,963,1,0,0,0,967,
964,1,0,0,0,967,965,1,0,0,0,967,966,1,0,0,0,968,185,1,0,0,0,969,972,3,0,
0,0,970,971,5,9,0,0,971,973,3,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,
187,1,0,0,0,974,975,5,19,0,0,975,976,3,136,68,0,976,977,5,24,0,0,977,189,
1,0,0,0,978,979,3,0,0,0,979,980,5,19,0,0,980,985,3,136,68,0,981,982,5,8,
0,0,982,984,3,136,68,0,983,981,1,0,0,0,984,987,1,0,0,0,985,983,1,0,0,0,985,
986,1,0,0,0,986,988,1,0,0,0,987,985,1,0,0,0,988,989,5,24,0,0,989,191,1,0,
0,0,990,991,5,108,0,0,991,992,3,188,94,0,992,995,3,134,67,0,993,994,5,109,
0,0,994,996,3,134,67,0,995,993,1,0,0,0,995,996,1,0,0,0,996,193,1,0,0,0,997,
998,5,3,0,0,998,999,5,71,0,0,999,1000,5,5,0,0,1000,1001,3,0,0,0,1001,195,
1,0,0,0,103,209,224,226,232,238,244,248,255,266,273,284,289,300,305,309,
311,319,328,337,351,353,362,365,368,376,386,401,411,419,439,447,455,462,
467,475,479,481,489,493,497,501,503,512,516,520,530,535,537,548,553,555,
559,563,567,569,580,585,587,598,603,605,609,618,622,624,639,667,680,695,
706,716,720,736,746,749,757,762,767,777,784,792,800,808,816,824,832,840,
848,856,864,872,880,888,890,899,929,935,941,947,967,972,985,995];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CycloneParser extends antlr4.Parser {

    static grammarFileName = "CycloneParser.g4";
    static literalNames = [ null, "'->'", "'<->'", "'@'", "'|'", "':'", 
                            "'::'", "':='", "','", "'.'", "'..'", "'='", 
                            "'>'", "'>='", "'#'", "'{'", "'['", "'<'", "'<='", 
                            "'('", "'-'", "'!='", "'}'", "']'", "')'", "';'", 
                            "'/'", "'*'", "'+'", "'xor'", "'=>'", "'!'", 
                            "'^'", "'_'", "'&'", "'~'", "'++'", "'--'", 
                            "'**'", "'%'", "'||'", "'&&'", "'+='", "'-='", 
                            "'*='", "'/='", "'<<='", "'>>='", "'<<'", "'>>'", 
                            "'=='", "'global'", "'native'", "'debug'", "'log'", 
                            "'output'", "'trace'", "'precision'", "'timeout'", 
                            "'detect'", "'bvdisplay'", "'state'", "'node'", 
                            "'machine'", "'graph'", "'transition'", "'trans'", 
                            "'edge'", "'record'", "'const'", "'on'", "'label'", 
                            "'invariant'", "'int'", "'bool'", "'real'", 
                            "'char'", "'string'", "'enum'", "'where'", "'start'", 
                            "'final'", "'abstract'", "'normal'", "'prev'", 
                            "'goal'", "'check'", "'for'", "'stop'", "'at'", 
                            "'via'", "'condition'", "'reach'", "'with'", 
                            "'enumerate'", "'let'", "'each'", "'assert'", 
                            "'initial'", "'in'", "'fresh'", "'option-'", 
                            "'always'", "'some'", "'one'", "'upto'", "'function'", 
                            "'return'", "'if'", "'else'", "'bv'" ];
    static symbolicNames = [ null, "ARROW", "BI_ARROW", "AT_SIGN", "BAR", 
                             "COLON", "COLON_COLON", "COLON_EQUAL", "COMMA", 
                             "DOT", "DOTDOT", "EQUAL", "GREATER", "GREATER_EQUAL", 
                             "HASH", "LBRACE", "LBRACK", "LESS", "LESS_EQUAL", 
                             "LPAREN", "MINUS", "NOT_EQUAL", "RBRACE", "RBRACK", 
                             "RPAREN", "SEMI", "SLASH", "STAR", "PLUS", 
                             "XOR", "IMPLIES", "NOT", "HAT", "P_OP_ONE", 
                             "BIT_AND", "BIT_NEGATION", "PLUS_PLUS", "MINUS_MINUS", 
                             "TIMES_TIMES", "MOD", "OR", "AND", "ASSIGN_PLUS_EQ", 
                             "ASSIGN_MINUS_EQ", "ASSIGN_TIMES_EQ", "ASSIGN_DIV_EQ", 
                             "ASSIGN_SHIFT_LEFT", "ASSIGN_SHIFT_RIGHT", 
                             "SHIFT_LEFT", "SHIFT_RIGHT", "DOUBLE_EQUAL", 
                             "GLOBAL", "NATIVE", "DEBUG", "LOG", "OUTPUT", 
                             "TRACE", "PRECISION", "TIMEOUT", "DETECT", 
                             "BVDISPLAY", "STATE", "NODE", "MACHINE", "GRAPH", 
                             "TRANS1", "TRANS2", "EDGE", "RECORD", "CONST", 
                             "ON", "LABEL", "INVARIANT", "INT", "BOOL", 
                             "REAL", "CHAR", "STRING", "ENUM", "WHERE", 
                             "START", "FINAL", "ABSTRACT", "NORMAL", "PREV", 
                             "GOAL", "CHECK", "FOR", "STOP", "AT", "VIA", 
                             "CONDITION", "REACH", "WITH", "ENUMERATE", 
                             "LET", "EACH", "ASSERT", "INITIAL", "IN", "FRESH", 
                             "OPTION", "ALWAYS", "SOME", "ONE", "UPTO", 
                             "FUNCTION", "RETURN", "IF", "ELSE", "BV", "INTLITERAL", 
                             "BVLITERAL", "REALLITERAL", "CHARLITERAL", 
                             "STRINGLITERAL", "BOOLLITERAL", "ENUMLITERAL", 
                             "IDENT", "ML_COMMENT", "SL_COMMENT", "WS" ];
    static ruleNames = [ "identifier", "compOptions", "optionName", "program", 
                         "machineDecl", "machineScope", "stateExpr", "stateScope", 
                         "trans", "transScope", "transOp", "transDef", "transExclExpr", 
                         "invariantExpression", "inExpr", "invariantScope", 
                         "goal", "checkExpr", "forExpr", "stopExpr", "viaExpr", 
                         "pathExprList", "withExpr", "letExpr", "pathAssignStatement", 
                         "pathCondAssignExpr", "pathExpr", "pathCondition", 
                         "orPathCondition", "andPathCondition", "xorPathCondition", 
                         "unaryPathCondition", "primaryCondition", "parPathCondition", 
                         "stateIncExpr", "pathPrimaryExpr", "pathOp", "label", 
                         "stateModifier", "literal", "intLiteral", "realLiteral", 
                         "boolLiteral", "stringLiteral", "charLiteral", 
                         "bvLiteral", "enumLiteral", "record", "recordScope", 
                         "recordVariableDeclGroup", "recordVariableDecl", 
                         "globalConstantGroup", "globalConstantDecl", "globalVariableGroup", 
                         "localVariableGroup", "modifier", "type", "primitiveBvType", 
                         "bvType", "primitiveType", "enumType", "enumDecl", 
                         "variableDeclarator", "whereExpr", "variableInitializer", 
                         "assertExpr", "assertMainExpr", "statement", "expression", 
                         "conditionalImpliesExpression", "conditionalOrExpression", 
                         "conditionalAndExpression", "conditionalXorExpression", 
                         "bitwiseOrExpression", "bitwiseAndExpression", 
                         "equalityExpression", "relationalExpression", "bitShiftExpression", 
                         "additiveExpression", "multiplicativeExpression", 
                         "powExpression", "unaryExpression", "unaryExpressionNotPlusMinus", 
                         "oneExpr", "freshExpr", "initialExpr", "prevExpr", 
                         "functionDeclaration", "functionBodyScope", "functionParamsDecl", 
                         "functionParam", "returnExpr", "primary", "dotIdentifierExpr", 
                         "parExpression", "funCall", "iteStatement", "annotationExpr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CycloneParser.ruleNames;
        this.literalNames = CycloneParser.literalNames;
        this.symbolicNames = CycloneParser.symbolicNames;
    }



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CycloneParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 196;
	        this.match(CycloneParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compOptions() {
	    let localctx = new CompOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CycloneParser.RULE_compOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 198;
	        this.match(CycloneParser.OPTION);
	        this.state = 199;
	        this.optionName();
	        this.state = 200;
	        this.match(CycloneParser.EQUAL);
	        this.state = 201;
	        this.literal();
	        this.state = 202;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionName() {
	    let localctx = new OptionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CycloneParser.RULE_optionName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 204;
	        _la = this._input.LA(1);
	        if(!(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 255) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CycloneParser.RULE_program);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===101) {
	            this.state = 206;
	            this.compOptions();
	            this.state = 211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 212;
	        this.machineDecl();
	        this.state = 213;
	        this.match(CycloneParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machineDecl() {
	    let localctx = new MachineDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CycloneParser.RULE_machineDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 215;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===64)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 216;
	        this.identifier();
	        this.state = 217;
	        this.machineScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	machineScope() {
	    let localctx = new MachineScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CycloneParser.RULE_machineScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 219;
	        this.match(CycloneParser.LBRACE);
	        this.state = 226;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 1763) !== 0) || _la===106 || _la===110) {
	            this.state = 224;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 73:
	            case 74:
	            case 75:
	            case 77:
	            case 78:
	            case 110:
	                this.state = 220;
	                this.globalVariableGroup();
	                break;
	            case 69:
	                this.state = 221;
	                this.globalConstantGroup();
	                break;
	            case 68:
	                this.state = 222;
	                this.record();
	                break;
	            case 106:
	                this.state = 223;
	                this.functionDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 228;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 7864323) !== 0)) {
	            this.state = 229;
	            this.stateExpr();
	            this.state = 234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 238;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 7) !== 0)) {
	            this.state = 235;
	            this.trans();
	            this.state = 240;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===72) {
	            this.state = 241;
	            this.invariantExpression();
	            this.state = 246;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 248;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 247;
	            this.goal();
	        }

	        this.state = 250;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateExpr() {
	    let localctx = new StateExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CycloneParser.RULE_stateExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 15) !== 0)) {
	            this.state = 252;
	            this.stateModifier();
	            this.state = 257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 258;
	        _la = this._input.LA(1);
	        if(!(_la===61 || _la===62)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 259;
	        this.identifier();
	        this.state = 260;
	        this.stateScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateScope() {
	    let localctx = new StateScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CycloneParser.RULE_stateScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 262;
	        this.match(CycloneParser.LBRACE);
	        this.state = 266;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 70147) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2089541) !== 0)) {
	            this.state = 263;
	            this.statement();
	            this.state = 268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 269;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trans() {
	    let localctx = new TransContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CycloneParser.RULE_trans);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 271;
	        _la = this._input.LA(1);
	        if(!(((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 272;
	            this.identifier();
	        }

	        this.state = 275;
	        this.transScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transScope() {
	    let localctx = new TransScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CycloneParser.RULE_transScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 277;
	        this.match(CycloneParser.LBRACE);
	        this.state = 278;
	        this.identifier();

	        this.state = 279;
	        this.transOp();
	        this.state = 280;
	        this.transDef();
	        this.state = 284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===70 || _la===71) {
	            this.state = 282;
	            _la = this._input.LA(1);
	            if(!(_la===70 || _la===71)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 283;
	            this.label();
	        }

	        this.state = 289;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 286;
	            this.whereExpr();
	            this.state = 287;
	            this.match(CycloneParser.SEMI);
	        }

	        this.state = 291;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transOp() {
	    let localctx = new TransOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CycloneParser.RULE_transOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 293;
	        _la = this._input.LA(1);
	        if(!(_la===1 || _la===2)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transDef() {
	    let localctx = new TransDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CycloneParser.RULE_transDef);
	    var _la = 0;
	    try {
	        this.state = 311;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 295;
	            this.identifier();
	            this.state = 300;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===8) {
	                this.state = 296;
	                this.match(CycloneParser.COMMA);
	                this.state = 297;
	                this.identifier();
	                this.state = 302;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 303;
	            this.match(CycloneParser.STAR);
	            this.state = 305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 304;
	                this.transExclExpr();
	            }

	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 307;
	            this.match(CycloneParser.PLUS);
	            this.state = 309;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 308;
	                this.transExclExpr();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transExclExpr() {
	    let localctx = new TransExclExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CycloneParser.RULE_transExclExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 313;
	        this.match(CycloneParser.LBRACK);
	        this.state = 314;
	        this.identifier();
	        this.state = 319;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 315;
	            this.match(CycloneParser.COMMA);
	            this.state = 316;
	            this.identifier();
	            this.state = 321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 322;
	        this.match(CycloneParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantExpression() {
	    let localctx = new InvariantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CycloneParser.RULE_invariantExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this.match(CycloneParser.INVARIANT);
	        this.state = 325;
	        this.identifier();
	        this.state = 326;
	        this.invariantScope();
	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 327;
	            this.inExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inExpr() {
	    let localctx = new InExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CycloneParser.RULE_inExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 330;
	        this.match(CycloneParser.IN);
	        this.state = 331;
	        this.match(CycloneParser.LPAREN);
	        this.state = 332;
	        this.identifier();
	        this.state = 337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 333;
	            this.match(CycloneParser.COMMA);
	            this.state = 334;
	            this.identifier();
	            this.state = 339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 340;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantScope() {
	    let localctx = new InvariantScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CycloneParser.RULE_invariantScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 342;
	        this.match(CycloneParser.LBRACE);

	        this.state = 343;
	        this.statement();
	        this.state = 344;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goal() {
	    let localctx = new GoalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CycloneParser.RULE_goal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 346;
	        this.match(CycloneParser.GOAL);
	        this.state = 347;
	        this.match(CycloneParser.LBRACE);
	        this.state = 353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3 || ((((_la - 95)) & ~0x1f) === 0 && ((1 << (_la - 95)) & 8388613) !== 0)) {
	            this.state = 351;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 95:
	                this.state = 348;
	                this.letExpr();
	                break;
	            case 118:
	                this.state = 349;
	                this.pathAssignStatement();
	                break;
	            case 3:
	            case 97:
	                this.state = 350;
	                this.assertExpr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 355;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 356;
	        this.checkExpr();
	        this.state = 357;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkExpr() {
	    let localctx = new CheckExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CycloneParser.RULE_checkExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 359;
	        _la = this._input.LA(1);
	        if(!(_la===86 || _la===94)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 360;
	        this.forExpr();
	        this.state = 362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90 || _la===91) {
	            this.state = 361;
	            this.viaExpr();
	        }

	        this.state = 365;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 364;
	            this.withExpr();
	        }

	        this.state = 368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88 || _la===92) {
	            this.state = 367;
	            this.stopExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forExpr() {
	    let localctx = new ForExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CycloneParser.RULE_forExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 370;
	        _la = this._input.LA(1);
	        if(!(((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 262657) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 371;
	        this.intLiteral();
	        this.state = 376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 372;
	            this.match(CycloneParser.COMMA);
	            this.state = 373;
	            this.intLiteral();
	            this.state = 378;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopExpr() {
	    let localctx = new StopExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CycloneParser.RULE_stopExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 379;
	        _la = this._input.LA(1);
	        if(!(_la===88 || _la===92)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 380;
	        this.match(CycloneParser.LPAREN);
	        this.state = 381;
	        this.identifier();
	        this.state = 386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 382;
	            this.match(CycloneParser.COMMA);
	            this.state = 383;
	            this.identifier();
	            this.state = 388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 389;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viaExpr() {
	    let localctx = new ViaExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CycloneParser.RULE_viaExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        _la = this._input.LA(1);
	        if(!(_la===90 || _la===91)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 392;
	        this.match(CycloneParser.LPAREN);
	        this.state = 393;
	        this.pathExprList();
	        this.state = 394;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExprList() {
	    let localctx = new PathExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CycloneParser.RULE_pathExprList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 396;
	        this.pathExpr();
	        this.state = 401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 397;
	            this.match(CycloneParser.COMMA);
	            this.state = 398;
	            this.pathExpr();
	            this.state = 403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withExpr() {
	    let localctx = new WithExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CycloneParser.RULE_withExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 404;
	        this.match(CycloneParser.WITH);
	        this.state = 405;
	        this.match(CycloneParser.LPAREN);

	        this.state = 406;
	        this.identifier();
	        this.state = 411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 407;
	            this.match(CycloneParser.COMMA);
	            this.state = 408;
	            this.identifier();
	            this.state = 413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 414;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letExpr() {
	    let localctx = new LetExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CycloneParser.RULE_letExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 416;
	        this.match(CycloneParser.LET);
	        this.state = 417;
	        this.identifier();
	        this.state = 419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 418;
	            this.pathCondAssignExpr();
	        }

	        this.state = 421;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAssignStatement() {
	    let localctx = new PathAssignStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CycloneParser.RULE_pathAssignStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 423;
	        this.identifier();
	        this.state = 424;
	        this.pathCondAssignExpr();
	        this.state = 425;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondAssignExpr() {
	    let localctx = new PathCondAssignExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CycloneParser.RULE_pathCondAssignExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 427;
	        this.match(CycloneParser.EQUAL);
	        this.state = 428;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExpr() {
	    let localctx = new PathExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CycloneParser.RULE_pathExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 430;
	        this.pathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathCondition() {
	    let localctx = new PathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CycloneParser.RULE_pathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this.orPathCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orPathCondition() {
	    let localctx = new OrPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CycloneParser.RULE_orPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 434;
	        this.andPathCondition();
	        this.state = 439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===40) {
	            this.state = 435;
	            this.match(CycloneParser.OR);
	            this.state = 436;
	            this.andPathCondition();
	            this.state = 441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andPathCondition() {
	    let localctx = new AndPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CycloneParser.RULE_andPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 442;
	        this.xorPathCondition();
	        this.state = 447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===41) {
	            this.state = 443;
	            this.match(CycloneParser.AND);
	            this.state = 444;
	            this.xorPathCondition();
	            this.state = 449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xorPathCondition() {
	    let localctx = new XorPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CycloneParser.RULE_xorPathCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.unaryPathCondition();
	        this.state = 455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===32) {
	            this.state = 451;
	            this.match(CycloneParser.HAT);
	            this.state = 452;
	            this.unaryPathCondition();
	            this.state = 457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryPathCondition() {
	    let localctx = new UnaryPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CycloneParser.RULE_unaryPathCondition);
	    try {
	        this.state = 462;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 458;
	            this.match(CycloneParser.NOT);
	            this.state = 459;
	            this.unaryPathCondition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 460;
	            this.primaryCondition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 461;
	            this.parPathCondition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryCondition() {
	    let localctx = new PrimaryConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CycloneParser.RULE_primaryCondition);
	    try {
	        this.state = 467;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 464;
	            this.stateIncExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 465;
	            this.pathPrimaryExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 466;
	            this.boolLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parPathCondition() {
	    let localctx = new ParPathConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CycloneParser.RULE_parPathCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this.match(CycloneParser.LPAREN);
	        this.state = 470;
	        this.pathCondition();
	        this.state = 471;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateIncExpr() {
	    let localctx = new StateIncExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CycloneParser.RULE_stateIncExpr);
	    var _la = 0;
	    try {
	        this.state = 520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 481;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 48:
	            	this.state = 473;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 475;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 474;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 49:
	            	this.state = 477;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 479;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 478;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 118:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 483;
	            this.identifier();
	            this.state = 493;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 484;
	                this.match(CycloneParser.HAT);
	                this.state = 485;
	                this.match(CycloneParser.LBRACE);
	                this.state = 486;
	                this.intLiteral();
	                this.state = 489;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 487;
	                    this.match(CycloneParser.COLON);
	                    this.state = 488;
	                    this.intLiteral();
	                }

	                this.state = 491;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 503;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 48:
	            	this.state = 495;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 497;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 496;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 49:
	            	this.state = 499;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 501;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 500;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 505;
	            this.match(CycloneParser.LPAREN);
	            this.state = 506;
	            this.identifier();
	            this.state = 516;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 507;
	                this.match(CycloneParser.HAT);
	                this.state = 508;
	                this.match(CycloneParser.LBRACE);
	                this.state = 509;
	                this.intLiteral();
	                this.state = 512;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 510;
	                    this.match(CycloneParser.COLON);
	                    this.state = 511;
	                    this.intLiteral();
	                }

	                this.state = 514;
	                this.match(CycloneParser.RBRACE);
	            }

	            this.state = 518;
	            this.match(CycloneParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimaryExpr() {
	    let localctx = new PathPrimaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CycloneParser.RULE_pathPrimaryExpr);
	    var _la = 0;
	    try {
	        this.state = 624;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 537;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 118:
	                this.state = 522;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 523;
	                this.pathOp();
	                this.state = 535;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 524;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 525;
	                    this.identifier();
	                    this.state = 530;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 526;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 527;
	                        this.identifier();
	                        this.state = 532;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 533;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 557; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 539;
	                this.match(CycloneParser.ARROW);
	                this.state = 555;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 118:
	                    this.state = 540;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 541;
	                    this.pathOp();
	                    this.state = 553;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 542;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 543;
	                        this.identifier();
	                        this.state = 548;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 544;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 545;
	                            this.identifier();
	                            this.state = 550;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 551;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 559; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            break;
	        case 19:
	        case 48:
	        case 49:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 569;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 48:
	            	this.state = 561;
	            	this.match(CycloneParser.SHIFT_LEFT);
	            	this.state = 563;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 562;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 49:
	            	this.state = 565;
	            	this.match(CycloneParser.SHIFT_RIGHT);
	            	this.state = 567;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===111) {
	            	    this.state = 566;
	            	    this.intLiteral();
	            	}

	            	break;
	            case 19:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 571;
	            this.match(CycloneParser.LPAREN);
	            this.state = 587;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 118:
	                this.state = 572;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 573;
	                this.pathOp();
	                this.state = 585;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16) {
	                    this.state = 574;
	                    this.match(CycloneParser.LBRACK);
	                    this.state = 575;
	                    this.identifier();
	                    this.state = 580;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===8) {
	                        this.state = 576;
	                        this.match(CycloneParser.COMMA);
	                        this.state = 577;
	                        this.identifier();
	                        this.state = 582;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 583;
	                    this.match(CycloneParser.RBRACK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 607; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 589;
	                this.match(CycloneParser.ARROW);
	                this.state = 605;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 118:
	                    this.state = 590;
	                    this.identifier();
	                    break;
	                case 33:
	                    this.state = 591;
	                    this.pathOp();
	                    this.state = 603;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===16) {
	                        this.state = 592;
	                        this.match(CycloneParser.LBRACK);
	                        this.state = 593;
	                        this.identifier();
	                        this.state = 598;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===8) {
	                            this.state = 594;
	                            this.match(CycloneParser.COMMA);
	                            this.state = 595;
	                            this.identifier();
	                            this.state = 600;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 601;
	                        this.match(CycloneParser.RBRACK);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 609; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1);
	            this.state = 611;
	            this.match(CycloneParser.RPAREN);
	            this.state = 622;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	            if(la_===1) {
	                this.state = 612;
	                this.match(CycloneParser.HAT);
	                this.state = 613;
	                this.match(CycloneParser.LBRACE);
	                this.state = 614;
	                this.intLiteral();
	                this.state = 618;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 616;
	                    this.match(CycloneParser.COLON);
	                    this.state = 617;
	                    this.intLiteral();
	                }

	                this.state = 620;
	                this.match(CycloneParser.RBRACE);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOp() {
	    let localctx = new PathOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CycloneParser.RULE_pathOp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 626;
	        this.match(CycloneParser.P_OP_ONE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CycloneParser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateModifier() {
	    let localctx = new StateModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CycloneParser.RULE_stateModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 630;
	        _la = this._input.LA(1);
	        if(!(((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CycloneParser.RULE_literal);
	    try {
	        this.state = 639;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 632;
	            this.intLiteral();
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 633;
	            this.realLiteral();
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 634;
	            this.boolLiteral();
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 635;
	            this.stringLiteral();
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 636;
	            this.charLiteral();
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 637;
	            this.enumLiteral();
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 638;
	            this.bvLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intLiteral() {
	    let localctx = new IntLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CycloneParser.RULE_intLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.match(CycloneParser.INTLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realLiteral() {
	    let localctx = new RealLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CycloneParser.RULE_realLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.match(CycloneParser.REALLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolLiteral() {
	    let localctx = new BoolLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CycloneParser.RULE_boolLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.match(CycloneParser.BOOLLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CycloneParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.match(CycloneParser.STRINGLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLiteral() {
	    let localctx = new CharLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CycloneParser.RULE_charLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 649;
	        this.match(CycloneParser.CHARLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bvLiteral() {
	    let localctx = new BvLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CycloneParser.RULE_bvLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this.match(CycloneParser.BVLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumLiteral() {
	    let localctx = new EnumLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CycloneParser.RULE_enumLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this.match(CycloneParser.ENUMLITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	record() {
	    let localctx = new RecordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CycloneParser.RULE_record);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this.match(CycloneParser.RECORD);
	        this.state = 656;
	        this.identifier();
	        this.state = 657;
	        this.recordScope();
	        this.state = 658;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordScope() {
	    let localctx = new RecordScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CycloneParser.RULE_recordScope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 660;
	        this.match(CycloneParser.LBRACE);
	        this.state = 661;
	        this.recordVariableDeclGroup();
	        this.state = 662;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDeclGroup() {
	    let localctx = new RecordVariableDeclGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CycloneParser.RULE_recordVariableDeclGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 664;
	            this.recordVariableDecl();
	            this.state = 667; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 55) !== 0) || _la===110);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordVariableDecl() {
	    let localctx = new RecordVariableDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CycloneParser.RULE_recordVariableDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 669;
	        this.type();
	        this.state = 670;
	        this.variableDeclarator();
	        this.state = 671;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstantGroup() {
	    let localctx = new GlobalConstantGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CycloneParser.RULE_globalConstantGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this.match(CycloneParser.CONST);
	        this.state = 674;
	        this.type();
	        this.state = 675;
	        this.globalConstantDecl();
	        this.state = 680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 676;
	            this.match(CycloneParser.COMMA);
	            this.state = 677;
	            this.globalConstantDecl();
	            this.state = 682;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 683;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalConstantDecl() {
	    let localctx = new GlobalConstantDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CycloneParser.RULE_globalConstantDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this.identifier();
	        this.state = 686;
	        this.match(CycloneParser.EQUAL);
	        this.state = 687;
	        this.variableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	globalVariableGroup() {
	    let localctx = new GlobalVariableGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CycloneParser.RULE_globalVariableGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 689;
	        this.type();
	        this.state = 690;
	        this.variableDeclarator();
	        this.state = 695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 691;
	            this.match(CycloneParser.COMMA);
	            this.state = 692;
	            this.variableDeclarator();
	            this.state = 697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 698;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableGroup() {
	    let localctx = new LocalVariableGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CycloneParser.RULE_localVariableGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        this.type();
	        this.state = 701;
	        this.variableDeclarator();
	        this.state = 706;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 702;
	            this.match(CycloneParser.COMMA);
	            this.state = 703;
	            this.variableDeclarator();
	            this.state = 708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 709;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CycloneParser.RULE_modifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        _la = this._input.LA(1);
	        if(!(_la===51 || _la===52)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CycloneParser.RULE_type);
	    try {
	        this.state = 716;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 713;
	            this.primitiveType();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 714;
	            this.enumType();
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 715;
	            this.bvType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveBvType() {
	    let localctx = new PrimitiveBvTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CycloneParser.RULE_primitiveBvType);
	    try {
	        this.state = 720;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 718;
	            this.primitiveType();
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 719;
	            this.bvType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bvType() {
	    let localctx = new BvTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CycloneParser.RULE_bvType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.match(CycloneParser.BV);
	        this.state = 723;
	        this.match(CycloneParser.LBRACK);
	        this.state = 724;
	        this.match(CycloneParser.INTLITERAL);
	        this.state = 725;
	        this.match(CycloneParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CycloneParser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        _la = this._input.LA(1);
	        if(!(((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 23) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumType() {
	    let localctx = new EnumTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CycloneParser.RULE_enumType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this.match(CycloneParser.ENUM);
	        this.state = 730;
	        this.match(CycloneParser.LBRACE);
	        this.state = 731;
	        this.enumDecl();
	        this.state = 736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 732;
	            this.match(CycloneParser.COMMA);
	            this.state = 733;
	            this.enumDecl();
	            this.state = 738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 739;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDecl() {
	    let localctx = new EnumDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CycloneParser.RULE_enumDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CycloneParser.RULE_variableDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.identifier();
	        this.state = 746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 744;
	            this.match(CycloneParser.EQUAL);
	            this.state = 745;
	            this.variableInitializer();
	        }

	        this.state = 749;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 748;
	            this.whereExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereExpr() {
	    let localctx = new WhereExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CycloneParser.RULE_whereExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 751;
	        this.match(CycloneParser.WHERE);
	        this.state = 752;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CycloneParser.RULE_variableInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 754;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertExpr() {
	    let localctx = new AssertExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CycloneParser.RULE_assertExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 756;
	            this.annotationExpr();
	        }

	        this.state = 759;
	        this.match(CycloneParser.ASSERT);
	        this.state = 760;
	        this.assertMainExpr();
	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 761;
	            this.inExpr();
	        }

	        this.state = 764;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertMainExpr() {
	    let localctx = new AssertMainExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CycloneParser.RULE_assertMainExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102 || _la===103) {
	            this.state = 766;
	            _la = this._input.LA(1);
	            if(!(_la===102 || _la===103)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 769;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CycloneParser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 771;
	        this.expression();
	        this.state = 772;
	        this.match(CycloneParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CycloneParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.conditionalImpliesExpression();
	        this.state = 777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        if(la_===1) {
	            this.state = 775;
	            _la = this._input.LA(1);
	            if(!(_la===11 || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 63) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 776;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalImpliesExpression() {
	    let localctx = new ConditionalImpliesExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CycloneParser.RULE_conditionalImpliesExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 779;
	        this.conditionalOrExpression();
	        this.state = 784;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 780;
	                this.match(CycloneParser.IMPLIES);
	                this.state = 781;
	                this.conditionalOrExpression(); 
	            }
	            this.state = 786;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpression() {
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CycloneParser.RULE_conditionalOrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 787;
	        this.conditionalAndExpression();
	        this.state = 792;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 788;
	                this.match(CycloneParser.OR);
	                this.state = 789;
	                this.conditionalAndExpression(); 
	            }
	            this.state = 794;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpression() {
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CycloneParser.RULE_conditionalAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 795;
	        this.conditionalXorExpression();
	        this.state = 800;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 796;
	                this.match(CycloneParser.AND);
	                this.state = 797;
	                this.conditionalXorExpression(); 
	            }
	            this.state = 802;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalXorExpression() {
	    let localctx = new ConditionalXorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CycloneParser.RULE_conditionalXorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this.bitwiseOrExpression();
	        this.state = 808;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 804;
	                this.match(CycloneParser.HAT);
	                this.state = 805;
	                this.bitwiseOrExpression(); 
	            }
	            this.state = 810;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseOrExpression() {
	    let localctx = new BitwiseOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CycloneParser.RULE_bitwiseOrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this.bitwiseAndExpression();
	        this.state = 816;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 812;
	                this.match(CycloneParser.BAR);
	                this.state = 813;
	                this.bitwiseAndExpression(); 
	            }
	            this.state = 818;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseAndExpression() {
	    let localctx = new BitwiseAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CycloneParser.RULE_bitwiseAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 819;
	        this.equalityExpression();
	        this.state = 824;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 820;
	                this.match(CycloneParser.BIT_AND);
	                this.state = 821;
	                this.equalityExpression(); 
	            }
	            this.state = 826;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CycloneParser.RULE_equalityExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 827;
	        this.relationalExpression();
	        this.state = 832;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 828;
	                _la = this._input.LA(1);
	                if(!(_la===21 || _la===50)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 829;
	                this.relationalExpression(); 
	            }
	            this.state = 834;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CycloneParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 835;
	        this.bitShiftExpression();
	        this.state = 840;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 836;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 405504) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 837;
	                this.bitShiftExpression(); 
	            }
	            this.state = 842;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitShiftExpression() {
	    let localctx = new BitShiftExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CycloneParser.RULE_bitShiftExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 843;
	        this.additiveExpression();
	        this.state = 848;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 844;
	                _la = this._input.LA(1);
	                if(!(_la===48 || _la===49)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 845;
	                this.additiveExpression(); 
	            }
	            this.state = 850;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CycloneParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this.multiplicativeExpression();
	        this.state = 856;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 852;
	                _la = this._input.LA(1);
	                if(!(_la===20 || _la===28)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 853;
	                this.multiplicativeExpression(); 
	            }
	            this.state = 858;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CycloneParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        this.powExpression();
	        this.state = 864;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 860;
	                _la = this._input.LA(1);
	                if(!(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 8195) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 861;
	                this.powExpression(); 
	            }
	            this.state = 866;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powExpression() {
	    let localctx = new PowExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CycloneParser.RULE_powExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.unaryExpression();
	        this.state = 872;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 868;
	                this.match(CycloneParser.TIMES_TIMES);
	                this.state = 869;
	                this.unaryExpression(); 
	            }
	            this.state = 874;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CycloneParser.RULE_unaryExpression);
	    try {
	        this.state = 880;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 875;
	            this.match(CycloneParser.PLUS);
	            this.state = 876;
	            this.unaryExpression();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 877;
	            this.match(CycloneParser.MINUS);
	            this.state = 878;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 31:
	        case 35:
	        case 98:
	        case 100:
	        case 104:
	        case 107:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 879;
	            this.unaryExpressionNotPlusMinus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpressionNotPlusMinus() {
	    let localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CycloneParser.RULE_unaryExpressionNotPlusMinus);
	    var _la = 0;
	    try {
	        this.state = 890;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 31:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 882;
	            this.match(CycloneParser.NOT);
	            this.state = 883;
	            this.unaryExpression();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 884;
	            this.match(CycloneParser.BIT_NEGATION);
	            this.state = 885;
	            this.unaryExpression();
	            break;
	        case 19:
	        case 98:
	        case 100:
	        case 104:
	        case 107:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 886;
	            this.primary();
	            this.state = 888;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	            if(la_===1) {
	                this.state = 887;
	                _la = this._input.LA(1);
	                if(!(_la===36 || _la===37)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oneExpr() {
	    let localctx = new OneExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CycloneParser.RULE_oneExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 892;
	        this.match(CycloneParser.ONE);
	        this.state = 893;
	        this.match(CycloneParser.LPAREN);
	        this.state = 894;
	        this.expression();
	        this.state = 897; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 895;
	            this.match(CycloneParser.COMMA);
	            this.state = 896;
	            this.expression();
	            this.state = 899; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===8);
	        this.state = 901;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	freshExpr() {
	    let localctx = new FreshExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CycloneParser.RULE_freshExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(CycloneParser.FRESH);
	        this.state = 904;
	        this.match(CycloneParser.LPAREN);
	        this.state = 905;
	        this.identifier();
	        this.state = 906;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initialExpr() {
	    let localctx = new InitialExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CycloneParser.RULE_initialExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this.match(CycloneParser.INITIAL);
	        this.state = 909;
	        this.match(CycloneParser.LPAREN);
	        this.state = 910;
	        this.dotIdentifierExpr();
	        this.state = 911;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prevExpr() {
	    let localctx = new PrevExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CycloneParser.RULE_prevExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 913;
	        this.match(CycloneParser.PREV);
	        this.state = 914;
	        this.match(CycloneParser.LPAREN);
	        this.state = 915;
	        this.identifier();
	        this.state = 916;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CycloneParser.RULE_functionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 918;
	        this.match(CycloneParser.FUNCTION);

	        this.state = 919;
	        this.identifier();
	        this.state = 920;
	        this.match(CycloneParser.COLON);
	        this.state = 921;
	        this.primitiveBvType();
	        this.state = 922;
	        this.functionBodyScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBodyScope() {
	    let localctx = new FunctionBodyScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CycloneParser.RULE_functionBodyScope);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 924;
	        this.functionParamsDecl();
	        this.state = 925;
	        this.match(CycloneParser.LBRACE);
	        this.state = 929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 55) !== 0) || _la===110) {
	            this.state = 926;
	            this.localVariableGroup();
	            this.state = 931;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 933; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 932;
	            this.statement();
	            this.state = 935; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 70147) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 2089541) !== 0));
	        this.state = 937;
	        this.match(CycloneParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParamsDecl() {
	    let localctx = new FunctionParamsDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CycloneParser.RULE_functionParamsDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939;
	        this.match(CycloneParser.LPAREN);
	        this.state = 941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 940;
	            this.functionParam();
	        }

	        this.state = 947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 943;
	            this.match(CycloneParser.COMMA);
	            this.state = 944;
	            this.functionParam();
	            this.state = 949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 950;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParam() {
	    let localctx = new FunctionParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CycloneParser.RULE_functionParam);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this.identifier();
	        this.state = 953;
	        this.match(CycloneParser.COLON);
	        this.state = 954;
	        this.primitiveBvType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnExpr() {
	    let localctx = new ReturnExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CycloneParser.RULE_returnExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.match(CycloneParser.RETURN);
	        this.state = 957;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CycloneParser.RULE_primary);
	    try {
	        this.state = 967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 959;
	            this.parExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 960;
	            this.dotIdentifierExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 961;
	            this.literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 962;
	            this.initialExpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 963;
	            this.freshExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 964;
	            this.oneExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 965;
	            this.returnExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 966;
	            this.funCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotIdentifierExpr() {
	    let localctx = new DotIdentifierExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CycloneParser.RULE_dotIdentifierExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this.identifier();
	        this.state = 972;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 970;
	            this.match(CycloneParser.DOT);
	            this.state = 971;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parExpression() {
	    let localctx = new ParExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CycloneParser.RULE_parExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 974;
	        this.match(CycloneParser.LPAREN);
	        this.state = 975;
	        this.expression();
	        this.state = 976;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funCall() {
	    let localctx = new FunCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CycloneParser.RULE_funCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 978;
	        this.identifier();
	        this.state = 979;
	        this.match(CycloneParser.LPAREN);
	        this.state = 980;
	        this.expression();
	        this.state = 985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 981;
	            this.match(CycloneParser.COMMA);
	            this.state = 982;
	            this.expression();
	            this.state = 987;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 988;
	        this.match(CycloneParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteStatement() {
	    let localctx = new IteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, CycloneParser.RULE_iteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 990;
	        this.match(CycloneParser.IF);
	        this.state = 991;
	        this.parExpression();
	        this.state = 992;
	        this.statement();
	        this.state = 995;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 993;
	            this.match(CycloneParser.ELSE);
	            this.state = 994;
	            this.statement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationExpr() {
	    let localctx = new AnnotationExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CycloneParser.RULE_annotationExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 997;
	        this.match(CycloneParser.AT_SIGN);
	        this.state = 998;
	        this.match(CycloneParser.LABEL);
	        this.state = 999;
	        this.match(CycloneParser.COLON);
	        this.state = 1000;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CycloneParser.EOF = antlr4.Token.EOF;
CycloneParser.ARROW = 1;
CycloneParser.BI_ARROW = 2;
CycloneParser.AT_SIGN = 3;
CycloneParser.BAR = 4;
CycloneParser.COLON = 5;
CycloneParser.COLON_COLON = 6;
CycloneParser.COLON_EQUAL = 7;
CycloneParser.COMMA = 8;
CycloneParser.DOT = 9;
CycloneParser.DOTDOT = 10;
CycloneParser.EQUAL = 11;
CycloneParser.GREATER = 12;
CycloneParser.GREATER_EQUAL = 13;
CycloneParser.HASH = 14;
CycloneParser.LBRACE = 15;
CycloneParser.LBRACK = 16;
CycloneParser.LESS = 17;
CycloneParser.LESS_EQUAL = 18;
CycloneParser.LPAREN = 19;
CycloneParser.MINUS = 20;
CycloneParser.NOT_EQUAL = 21;
CycloneParser.RBRACE = 22;
CycloneParser.RBRACK = 23;
CycloneParser.RPAREN = 24;
CycloneParser.SEMI = 25;
CycloneParser.SLASH = 26;
CycloneParser.STAR = 27;
CycloneParser.PLUS = 28;
CycloneParser.XOR = 29;
CycloneParser.IMPLIES = 30;
CycloneParser.NOT = 31;
CycloneParser.HAT = 32;
CycloneParser.P_OP_ONE = 33;
CycloneParser.BIT_AND = 34;
CycloneParser.BIT_NEGATION = 35;
CycloneParser.PLUS_PLUS = 36;
CycloneParser.MINUS_MINUS = 37;
CycloneParser.TIMES_TIMES = 38;
CycloneParser.MOD = 39;
CycloneParser.OR = 40;
CycloneParser.AND = 41;
CycloneParser.ASSIGN_PLUS_EQ = 42;
CycloneParser.ASSIGN_MINUS_EQ = 43;
CycloneParser.ASSIGN_TIMES_EQ = 44;
CycloneParser.ASSIGN_DIV_EQ = 45;
CycloneParser.ASSIGN_SHIFT_LEFT = 46;
CycloneParser.ASSIGN_SHIFT_RIGHT = 47;
CycloneParser.SHIFT_LEFT = 48;
CycloneParser.SHIFT_RIGHT = 49;
CycloneParser.DOUBLE_EQUAL = 50;
CycloneParser.GLOBAL = 51;
CycloneParser.NATIVE = 52;
CycloneParser.DEBUG = 53;
CycloneParser.LOG = 54;
CycloneParser.OUTPUT = 55;
CycloneParser.TRACE = 56;
CycloneParser.PRECISION = 57;
CycloneParser.TIMEOUT = 58;
CycloneParser.DETECT = 59;
CycloneParser.BVDISPLAY = 60;
CycloneParser.STATE = 61;
CycloneParser.NODE = 62;
CycloneParser.MACHINE = 63;
CycloneParser.GRAPH = 64;
CycloneParser.TRANS1 = 65;
CycloneParser.TRANS2 = 66;
CycloneParser.EDGE = 67;
CycloneParser.RECORD = 68;
CycloneParser.CONST = 69;
CycloneParser.ON = 70;
CycloneParser.LABEL = 71;
CycloneParser.INVARIANT = 72;
CycloneParser.INT = 73;
CycloneParser.BOOL = 74;
CycloneParser.REAL = 75;
CycloneParser.CHAR = 76;
CycloneParser.STRING = 77;
CycloneParser.ENUM = 78;
CycloneParser.WHERE = 79;
CycloneParser.START = 80;
CycloneParser.FINAL = 81;
CycloneParser.ABSTRACT = 82;
CycloneParser.NORMAL = 83;
CycloneParser.PREV = 84;
CycloneParser.GOAL = 85;
CycloneParser.CHECK = 86;
CycloneParser.FOR = 87;
CycloneParser.STOP = 88;
CycloneParser.AT = 89;
CycloneParser.VIA = 90;
CycloneParser.CONDITION = 91;
CycloneParser.REACH = 92;
CycloneParser.WITH = 93;
CycloneParser.ENUMERATE = 94;
CycloneParser.LET = 95;
CycloneParser.EACH = 96;
CycloneParser.ASSERT = 97;
CycloneParser.INITIAL = 98;
CycloneParser.IN = 99;
CycloneParser.FRESH = 100;
CycloneParser.OPTION = 101;
CycloneParser.ALWAYS = 102;
CycloneParser.SOME = 103;
CycloneParser.ONE = 104;
CycloneParser.UPTO = 105;
CycloneParser.FUNCTION = 106;
CycloneParser.RETURN = 107;
CycloneParser.IF = 108;
CycloneParser.ELSE = 109;
CycloneParser.BV = 110;
CycloneParser.INTLITERAL = 111;
CycloneParser.BVLITERAL = 112;
CycloneParser.REALLITERAL = 113;
CycloneParser.CHARLITERAL = 114;
CycloneParser.STRINGLITERAL = 115;
CycloneParser.BOOLLITERAL = 116;
CycloneParser.ENUMLITERAL = 117;
CycloneParser.IDENT = 118;
CycloneParser.ML_COMMENT = 119;
CycloneParser.SL_COMMENT = 120;
CycloneParser.WS = 121;

CycloneParser.RULE_identifier = 0;
CycloneParser.RULE_compOptions = 1;
CycloneParser.RULE_optionName = 2;
CycloneParser.RULE_program = 3;
CycloneParser.RULE_machineDecl = 4;
CycloneParser.RULE_machineScope = 5;
CycloneParser.RULE_stateExpr = 6;
CycloneParser.RULE_stateScope = 7;
CycloneParser.RULE_trans = 8;
CycloneParser.RULE_transScope = 9;
CycloneParser.RULE_transOp = 10;
CycloneParser.RULE_transDef = 11;
CycloneParser.RULE_transExclExpr = 12;
CycloneParser.RULE_invariantExpression = 13;
CycloneParser.RULE_inExpr = 14;
CycloneParser.RULE_invariantScope = 15;
CycloneParser.RULE_goal = 16;
CycloneParser.RULE_checkExpr = 17;
CycloneParser.RULE_forExpr = 18;
CycloneParser.RULE_stopExpr = 19;
CycloneParser.RULE_viaExpr = 20;
CycloneParser.RULE_pathExprList = 21;
CycloneParser.RULE_withExpr = 22;
CycloneParser.RULE_letExpr = 23;
CycloneParser.RULE_pathAssignStatement = 24;
CycloneParser.RULE_pathCondAssignExpr = 25;
CycloneParser.RULE_pathExpr = 26;
CycloneParser.RULE_pathCondition = 27;
CycloneParser.RULE_orPathCondition = 28;
CycloneParser.RULE_andPathCondition = 29;
CycloneParser.RULE_xorPathCondition = 30;
CycloneParser.RULE_unaryPathCondition = 31;
CycloneParser.RULE_primaryCondition = 32;
CycloneParser.RULE_parPathCondition = 33;
CycloneParser.RULE_stateIncExpr = 34;
CycloneParser.RULE_pathPrimaryExpr = 35;
CycloneParser.RULE_pathOp = 36;
CycloneParser.RULE_label = 37;
CycloneParser.RULE_stateModifier = 38;
CycloneParser.RULE_literal = 39;
CycloneParser.RULE_intLiteral = 40;
CycloneParser.RULE_realLiteral = 41;
CycloneParser.RULE_boolLiteral = 42;
CycloneParser.RULE_stringLiteral = 43;
CycloneParser.RULE_charLiteral = 44;
CycloneParser.RULE_bvLiteral = 45;
CycloneParser.RULE_enumLiteral = 46;
CycloneParser.RULE_record = 47;
CycloneParser.RULE_recordScope = 48;
CycloneParser.RULE_recordVariableDeclGroup = 49;
CycloneParser.RULE_recordVariableDecl = 50;
CycloneParser.RULE_globalConstantGroup = 51;
CycloneParser.RULE_globalConstantDecl = 52;
CycloneParser.RULE_globalVariableGroup = 53;
CycloneParser.RULE_localVariableGroup = 54;
CycloneParser.RULE_modifier = 55;
CycloneParser.RULE_type = 56;
CycloneParser.RULE_primitiveBvType = 57;
CycloneParser.RULE_bvType = 58;
CycloneParser.RULE_primitiveType = 59;
CycloneParser.RULE_enumType = 60;
CycloneParser.RULE_enumDecl = 61;
CycloneParser.RULE_variableDeclarator = 62;
CycloneParser.RULE_whereExpr = 63;
CycloneParser.RULE_variableInitializer = 64;
CycloneParser.RULE_assertExpr = 65;
CycloneParser.RULE_assertMainExpr = 66;
CycloneParser.RULE_statement = 67;
CycloneParser.RULE_expression = 68;
CycloneParser.RULE_conditionalImpliesExpression = 69;
CycloneParser.RULE_conditionalOrExpression = 70;
CycloneParser.RULE_conditionalAndExpression = 71;
CycloneParser.RULE_conditionalXorExpression = 72;
CycloneParser.RULE_bitwiseOrExpression = 73;
CycloneParser.RULE_bitwiseAndExpression = 74;
CycloneParser.RULE_equalityExpression = 75;
CycloneParser.RULE_relationalExpression = 76;
CycloneParser.RULE_bitShiftExpression = 77;
CycloneParser.RULE_additiveExpression = 78;
CycloneParser.RULE_multiplicativeExpression = 79;
CycloneParser.RULE_powExpression = 80;
CycloneParser.RULE_unaryExpression = 81;
CycloneParser.RULE_unaryExpressionNotPlusMinus = 82;
CycloneParser.RULE_oneExpr = 83;
CycloneParser.RULE_freshExpr = 84;
CycloneParser.RULE_initialExpr = 85;
CycloneParser.RULE_prevExpr = 86;
CycloneParser.RULE_functionDeclaration = 87;
CycloneParser.RULE_functionBodyScope = 88;
CycloneParser.RULE_functionParamsDecl = 89;
CycloneParser.RULE_functionParam = 90;
CycloneParser.RULE_returnExpr = 91;
CycloneParser.RULE_primary = 92;
CycloneParser.RULE_dotIdentifierExpr = 93;
CycloneParser.RULE_parExpression = 94;
CycloneParser.RULE_funCall = 95;
CycloneParser.RULE_iteStatement = 96;
CycloneParser.RULE_annotationExpr = 97;

class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_identifier;
    }

	IDENT() {
	    return this.getToken(CycloneParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class CompOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_compOptions;
    }

	OPTION() {
	    return this.getToken(CycloneParser.OPTION, 0);
	};

	optionName() {
	    return this.getTypedRuleContext(OptionNameContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCompOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCompOptions(this);
		}
	}


}



class OptionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_optionName;
    }

	DEBUG() {
	    return this.getToken(CycloneParser.DEBUG, 0);
	};

	LOG() {
	    return this.getToken(CycloneParser.LOG, 0);
	};

	OUTPUT() {
	    return this.getToken(CycloneParser.OUTPUT, 0);
	};

	TRACE() {
	    return this.getToken(CycloneParser.TRACE, 0);
	};

	PRECISION() {
	    return this.getToken(CycloneParser.PRECISION, 0);
	};

	TIMEOUT() {
	    return this.getToken(CycloneParser.TIMEOUT, 0);
	};

	DETECT() {
	    return this.getToken(CycloneParser.DETECT, 0);
	};

	BVDISPLAY() {
	    return this.getToken(CycloneParser.BVDISPLAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOptionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOptionName(this);
		}
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_program;
    }

	machineDecl() {
	    return this.getTypedRuleContext(MachineDeclContext,0);
	};

	EOF() {
	    return this.getToken(CycloneParser.EOF, 0);
	};

	compOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompOptionsContext);
	    } else {
	        return this.getTypedRuleContext(CompOptionsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitProgram(this);
		}
	}


}



class MachineDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machineDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	machineScope() {
	    return this.getTypedRuleContext(MachineScopeContext,0);
	};

	MACHINE() {
	    return this.getToken(CycloneParser.MACHINE, 0);
	};

	GRAPH() {
	    return this.getToken(CycloneParser.GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachineDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachineDecl(this);
		}
	}


}



class MachineScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_machineScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	stateExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateExprContext);
	    } else {
	        return this.getTypedRuleContext(StateExprContext,i);
	    }
	};

	trans = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransContext);
	    } else {
	        return this.getTypedRuleContext(TransContext,i);
	    }
	};

	invariantExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InvariantExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InvariantExpressionContext,i);
	    }
	};

	goal() {
	    return this.getTypedRuleContext(GoalContext,0);
	};

	globalVariableGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalVariableGroupContext);
	    } else {
	        return this.getTypedRuleContext(GlobalVariableGroupContext,i);
	    }
	};

	globalConstantGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalConstantGroupContext);
	    } else {
	        return this.getTypedRuleContext(GlobalConstantGroupContext,i);
	    }
	};

	record = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordContext);
	    } else {
	        return this.getTypedRuleContext(RecordContext,i);
	    }
	};

	functionDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMachineScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMachineScope(this);
		}
	}


}



class StateExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	stateScope() {
	    return this.getTypedRuleContext(StateScopeContext,0);
	};

	STATE() {
	    return this.getToken(CycloneParser.STATE, 0);
	};

	NODE() {
	    return this.getToken(CycloneParser.NODE, 0);
	};

	stateModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateModifierContext);
	    } else {
	        return this.getTypedRuleContext(StateModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateExpr(this);
		}
	}


}



class StateScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateScope(this);
		}
	}


}



class TransContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_trans;
    }

	transScope() {
	    return this.getTypedRuleContext(TransScopeContext,0);
	};

	TRANS1() {
	    return this.getToken(CycloneParser.TRANS1, 0);
	};

	TRANS2() {
	    return this.getToken(CycloneParser.TRANS2, 0);
	};

	EDGE() {
	    return this.getToken(CycloneParser.EDGE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTrans(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTrans(this);
		}
	}


}



class TransScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	transOp() {
	    return this.getTypedRuleContext(TransOpContext,0);
	};

	transDef() {
	    return this.getTypedRuleContext(TransDefContext,0);
	};

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	ON() {
	    return this.getToken(CycloneParser.ON, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransScope(this);
		}
	}


}



class TransOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transOp;
    }

	ARROW() {
	    return this.getToken(CycloneParser.ARROW, 0);
	};

	BI_ARROW() {
	    return this.getToken(CycloneParser.BI_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransOp(this);
		}
	}


}



class TransDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transDef;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	STAR() {
	    return this.getToken(CycloneParser.STAR, 0);
	};

	transExclExpr() {
	    return this.getTypedRuleContext(TransExclExprContext,0);
	};

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransDef(this);
		}
	}


}



class TransExclExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_transExclExpr;
    }

	LBRACK() {
	    return this.getToken(CycloneParser.LBRACK, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RBRACK() {
	    return this.getToken(CycloneParser.RBRACK, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterTransExclExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitTransExclExpr(this);
		}
	}


}



class InvariantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantExpression;
    }

	INVARIANT() {
	    return this.getToken(CycloneParser.INVARIANT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	invariantScope() {
	    return this.getTypedRuleContext(InvariantScopeContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantExpression(this);
		}
	}


}



class InExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_inExpr;
    }

	IN() {
	    return this.getToken(CycloneParser.IN, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInExpr(this);
		}
	}


}



class InvariantScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_invariantScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInvariantScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInvariantScope(this);
		}
	}


}



class GoalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_goal;
    }

	GOAL() {
	    return this.getToken(CycloneParser.GOAL, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	checkExpr() {
	    return this.getTypedRuleContext(CheckExprContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	letExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetExprContext);
	    } else {
	        return this.getTypedRuleContext(LetExprContext,i);
	    }
	};

	pathAssignStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathAssignStatementContext);
	    } else {
	        return this.getTypedRuleContext(PathAssignStatementContext,i);
	    }
	};

	assertExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssertExprContext);
	    } else {
	        return this.getTypedRuleContext(AssertExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGoal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGoal(this);
		}
	}


}



class CheckExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_checkExpr;
    }

	forExpr() {
	    return this.getTypedRuleContext(ForExprContext,0);
	};

	CHECK() {
	    return this.getToken(CycloneParser.CHECK, 0);
	};

	ENUMERATE() {
	    return this.getToken(CycloneParser.ENUMERATE, 0);
	};

	viaExpr() {
	    return this.getTypedRuleContext(ViaExprContext,0);
	};

	withExpr() {
	    return this.getTypedRuleContext(WithExprContext,0);
	};

	stopExpr() {
	    return this.getTypedRuleContext(StopExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCheckExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCheckExpr(this);
		}
	}


}



class ForExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_forExpr;
    }

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	FOR() {
	    return this.getToken(CycloneParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(CycloneParser.EACH, 0);
	};

	UPTO() {
	    return this.getToken(CycloneParser.UPTO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterForExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitForExpr(this);
		}
	}


}



class StopExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stopExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	REACH() {
	    return this.getToken(CycloneParser.REACH, 0);
	};

	STOP() {
	    return this.getToken(CycloneParser.STOP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStopExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStopExpr(this);
		}
	}


}



class ViaExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_viaExpr;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	pathExprList() {
	    return this.getTypedRuleContext(PathExprListContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	VIA() {
	    return this.getToken(CycloneParser.VIA, 0);
	};

	CONDITION() {
	    return this.getToken(CycloneParser.CONDITION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterViaExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitViaExpr(this);
		}
	}


}



class PathExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathExprList;
    }

	pathExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExprContext);
	    } else {
	        return this.getTypedRuleContext(PathExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathExprList(this);
		}
	}


}



class WithExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_withExpr;
    }

	WITH() {
	    return this.getToken(CycloneParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWithExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWithExpr(this);
		}
	}


}



class LetExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_letExpr;
    }

	LET() {
	    return this.getToken(CycloneParser.LET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	pathCondAssignExpr() {
	    return this.getTypedRuleContext(PathCondAssignExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLetExpr(this);
		}
	}


}



class PathAssignStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathAssignStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	pathCondAssignExpr() {
	    return this.getTypedRuleContext(PathCondAssignExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathAssignStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathAssignStatement(this);
		}
	}


}



class PathCondAssignExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondAssignExpr;
    }

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondAssignExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondAssignExpr(this);
		}
	}


}



class PathExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathExpr;
    }

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathExpr(this);
		}
	}


}



class PathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathCondition;
    }

	orPathCondition() {
	    return this.getTypedRuleContext(OrPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathCondition(this);
		}
	}


}



class OrPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_orPathCondition;
    }

	andPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(AndPathConditionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOrPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOrPathCondition(this);
		}
	}


}



class AndPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_andPathCondition;
    }

	xorPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XorPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(XorPathConditionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAndPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAndPathCondition(this);
		}
	}


}



class XorPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_xorPathCondition;
    }

	unaryPathCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryPathConditionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryPathConditionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterXorPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitXorPathCondition(this);
		}
	}


}



class UnaryPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryPathCondition;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryPathCondition() {
	    return this.getTypedRuleContext(UnaryPathConditionContext,0);
	};

	primaryCondition() {
	    return this.getTypedRuleContext(PrimaryConditionContext,0);
	};

	parPathCondition() {
	    return this.getTypedRuleContext(ParPathConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryPathCondition(this);
		}
	}


}



class PrimaryConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primaryCondition;
    }

	stateIncExpr() {
	    return this.getTypedRuleContext(StateIncExprContext,0);
	};

	pathPrimaryExpr() {
	    return this.getTypedRuleContext(PathPrimaryExprContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimaryCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimaryCondition(this);
		}
	}


}



class ParPathConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parPathCondition;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	pathCondition() {
	    return this.getTypedRuleContext(PathConditionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParPathCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParPathCondition(this);
		}
	}


}



class StateIncExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateIncExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateIncExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateIncExpr(this);
		}
	}


}



class PathPrimaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathPrimaryExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	pathOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathOpContext);
	    } else {
	        return this.getTypedRuleContext(PathOpContext,i);
	    }
	};

	ARROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.ARROW);
	    } else {
	        return this.getToken(CycloneParser.ARROW, i);
	    }
	};


	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LBRACK);
	    } else {
	        return this.getToken(CycloneParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.RBRACK);
	    } else {
	        return this.getToken(CycloneParser.RBRACK, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	SHIFT_LEFT() {
	    return this.getToken(CycloneParser.SHIFT_LEFT, 0);
	};

	SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.SHIFT_RIGHT, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	HAT() {
	    return this.getToken(CycloneParser.HAT, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	intLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntLiteralContext);
	    } else {
	        return this.getTypedRuleContext(IntLiteralContext,i);
	    }
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathPrimaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathPrimaryExpr(this);
		}
	}


}



class PathOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_pathOp;
    }

	P_OP_ONE() {
	    return this.getToken(CycloneParser.P_OP_ONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPathOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPathOp(this);
		}
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_label;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLabel(this);
		}
	}


}



class StateModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stateModifier;
    }

	START() {
	    return this.getToken(CycloneParser.START, 0);
	};

	FINAL() {
	    return this.getToken(CycloneParser.FINAL, 0);
	};

	ABSTRACT() {
	    return this.getToken(CycloneParser.ABSTRACT, 0);
	};

	NORMAL() {
	    return this.getToken(CycloneParser.NORMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStateModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStateModifier(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_literal;
    }

	intLiteral() {
	    return this.getTypedRuleContext(IntLiteralContext,0);
	};

	realLiteral() {
	    return this.getTypedRuleContext(RealLiteralContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	charLiteral() {
	    return this.getTypedRuleContext(CharLiteralContext,0);
	};

	enumLiteral() {
	    return this.getTypedRuleContext(EnumLiteralContext,0);
	};

	bvLiteral() {
	    return this.getTypedRuleContext(BvLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class IntLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_intLiteral;
    }

	INTLITERAL() {
	    return this.getToken(CycloneParser.INTLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIntLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIntLiteral(this);
		}
	}


}



class RealLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_realLiteral;
    }

	REALLITERAL() {
	    return this.getToken(CycloneParser.REALLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRealLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRealLiteral(this);
		}
	}


}



class BoolLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_boolLiteral;
    }

	BOOLLITERAL() {
	    return this.getToken(CycloneParser.BOOLLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBoolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBoolLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_stringLiteral;
    }

	STRINGLITERAL() {
	    return this.getToken(CycloneParser.STRINGLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class CharLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_charLiteral;
    }

	CHARLITERAL() {
	    return this.getToken(CycloneParser.CHARLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterCharLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitCharLiteral(this);
		}
	}


}



class BvLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bvLiteral;
    }

	BVLITERAL() {
	    return this.getToken(CycloneParser.BVLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBvLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBvLiteral(this);
		}
	}


}



class EnumLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumLiteral;
    }

	ENUMLITERAL() {
	    return this.getToken(CycloneParser.ENUMLITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumLiteral(this);
		}
	}


}



class RecordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_record;
    }

	RECORD() {
	    return this.getToken(CycloneParser.RECORD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	recordScope() {
	    return this.getTypedRuleContext(RecordScopeContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecord(this);
		}
	}


}



class RecordScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordScope;
    }

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	recordVariableDeclGroup() {
	    return this.getTypedRuleContext(RecordVariableDeclGroupContext,0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordScope(this);
		}
	}


}



class RecordVariableDeclGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDeclGroup;
    }

	recordVariableDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordVariableDeclContext);
	    } else {
	        return this.getTypedRuleContext(RecordVariableDeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDeclGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDeclGroup(this);
		}
	}


}



class RecordVariableDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_recordVariableDecl;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator() {
	    return this.getTypedRuleContext(VariableDeclaratorContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRecordVariableDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRecordVariableDecl(this);
		}
	}


}



class GlobalConstantGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalConstantGroup;
    }

	CONST() {
	    return this.getToken(CycloneParser.CONST, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	globalConstantDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GlobalConstantDeclContext);
	    } else {
	        return this.getTypedRuleContext(GlobalConstantDeclContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalConstantGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalConstantGroup(this);
		}
	}


}



class GlobalConstantDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalConstantDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalConstantDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalConstantDecl(this);
		}
	}


}



class GlobalVariableGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_globalVariableGroup;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterGlobalVariableGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitGlobalVariableGroup(this);
		}
	}


}



class LocalVariableGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_localVariableGroup;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterLocalVariableGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitLocalVariableGroup(this);
		}
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_modifier;
    }

	GLOBAL() {
	    return this.getToken(CycloneParser.GLOBAL, 0);
	};

	NATIVE() {
	    return this.getToken(CycloneParser.NATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitModifier(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_type;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enumType() {
	    return this.getTypedRuleContext(EnumTypeContext,0);
	};

	bvType() {
	    return this.getTypedRuleContext(BvTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitType(this);
		}
	}


}



class PrimitiveBvTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primitiveBvType;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	bvType() {
	    return this.getTypedRuleContext(BvTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimitiveBvType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimitiveBvType(this);
		}
	}


}



class BvTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bvType;
    }

	BV() {
	    return this.getToken(CycloneParser.BV, 0);
	};

	LBRACK() {
	    return this.getToken(CycloneParser.LBRACK, 0);
	};

	INTLITERAL() {
	    return this.getToken(CycloneParser.INTLITERAL, 0);
	};

	RBRACK() {
	    return this.getToken(CycloneParser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBvType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBvType(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primitiveType;
    }

	INT() {
	    return this.getToken(CycloneParser.INT, 0);
	};

	BOOL() {
	    return this.getToken(CycloneParser.BOOL, 0);
	};

	REAL() {
	    return this.getToken(CycloneParser.REAL, 0);
	};

	STRING() {
	    return this.getToken(CycloneParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class EnumTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumType;
    }

	ENUM() {
	    return this.getToken(CycloneParser.ENUM, 0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	enumDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumDeclContext);
	    } else {
	        return this.getTypedRuleContext(EnumDeclContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumType(this);
		}
	}


}



class EnumDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_enumDecl;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEnumDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEnumDecl(this);
		}
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableDeclarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}


}



class WhereExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_whereExpr;
    }

	WHERE() {
	    return this.getToken(CycloneParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterWhereExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitWhereExpr(this);
		}
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_variableInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}


}



class AssertExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_assertExpr;
    }

	ASSERT() {
	    return this.getToken(CycloneParser.ASSERT, 0);
	};

	assertMainExpr() {
	    return this.getTypedRuleContext(AssertMainExprContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	annotationExpr() {
	    return this.getTypedRuleContext(AnnotationExprContext,0);
	};

	inExpr() {
	    return this.getTypedRuleContext(InExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAssertExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAssertExpr(this);
		}
	}


}



class AssertMainExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_assertMainExpr;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ALWAYS() {
	    return this.getToken(CycloneParser.ALWAYS, 0);
	};

	SOME() {
	    return this.getToken(CycloneParser.SOME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAssertMainExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAssertMainExpr(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_statement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(CycloneParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_expression;
    }

	conditionalImpliesExpression() {
	    return this.getTypedRuleContext(ConditionalImpliesExpressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EQUAL() {
	    return this.getToken(CycloneParser.EQUAL, 0);
	};

	ASSIGN_PLUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_PLUS_EQ, 0);
	};

	ASSIGN_MINUS_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_MINUS_EQ, 0);
	};

	ASSIGN_TIMES_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_TIMES_EQ, 0);
	};

	ASSIGN_DIV_EQ() {
	    return this.getToken(CycloneParser.ASSIGN_DIV_EQ, 0);
	};

	ASSIGN_SHIFT_LEFT() {
	    return this.getToken(CycloneParser.ASSIGN_SHIFT_LEFT, 0);
	};

	ASSIGN_SHIFT_RIGHT() {
	    return this.getToken(CycloneParser.ASSIGN_SHIFT_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConditionalImpliesExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalImpliesExpression;
    }

	conditionalOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExpressionContext,i);
	    }
	};

	IMPLIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.IMPLIES);
	    } else {
	        return this.getToken(CycloneParser.IMPLIES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalImpliesExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalImpliesExpression(this);
		}
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.OR);
	    } else {
	        return this.getToken(CycloneParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalAndExpression;
    }

	conditionalXorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalXorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalXorExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.AND);
	    } else {
	        return this.getToken(CycloneParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}


}



class ConditionalXorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_conditionalXorExpression;
    }

	bitwiseOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseOrExpressionContext,i);
	    }
	};

	HAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.HAT);
	    } else {
	        return this.getToken(CycloneParser.HAT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterConditionalXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitConditionalXorExpression(this);
		}
	}


}



class BitwiseOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bitwiseOrExpression;
    }

	bitwiseAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseAndExpressionContext,i);
	    }
	};

	BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.BAR);
	    } else {
	        return this.getToken(CycloneParser.BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBitwiseOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBitwiseOrExpression(this);
		}
	}


}



class BitwiseAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bitwiseAndExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	BIT_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.BIT_AND);
	    } else {
	        return this.getToken(CycloneParser.BIT_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBitwiseAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBitwiseAndExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	DOUBLE_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.DOUBLE_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.DOUBLE_EQUAL, i);
	    }
	};


	NOT_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.NOT_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.NOT_EQUAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_relationalExpression;
    }

	bitShiftExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitShiftExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitShiftExpressionContext,i);
	    }
	};

	LESS_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.LESS_EQUAL, i);
	    }
	};


	GREATER_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER_EQUAL);
	    } else {
	        return this.getToken(CycloneParser.GREATER_EQUAL, i);
	    }
	};


	LESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.LESS);
	    } else {
	        return this.getToken(CycloneParser.LESS, i);
	    }
	};


	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.GREATER);
	    } else {
	        return this.getToken(CycloneParser.GREATER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class BitShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_bitShiftExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	SHIFT_LEFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SHIFT_LEFT);
	    } else {
	        return this.getToken(CycloneParser.SHIFT_LEFT, i);
	    }
	};


	SHIFT_RIGHT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SHIFT_RIGHT);
	    } else {
	        return this.getToken(CycloneParser.SHIFT_RIGHT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterBitShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitBitShiftExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.PLUS);
	    } else {
	        return this.getToken(CycloneParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MINUS);
	    } else {
	        return this.getToken(CycloneParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_multiplicativeExpression;
    }

	powExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PowExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PowExpressionContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.STAR);
	    } else {
	        return this.getToken(CycloneParser.STAR, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.SLASH);
	    } else {
	        return this.getToken(CycloneParser.SLASH, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.MOD);
	    } else {
	        return this.getToken(CycloneParser.MOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class PowExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_powExpression;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	TIMES_TIMES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.TIMES_TIMES);
	    } else {
	        return this.getToken(CycloneParser.TIMES_TIMES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPowExpression(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpression;
    }

	PLUS() {
	    return this.getToken(CycloneParser.PLUS, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(CycloneParser.MINUS, 0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class UnaryExpressionNotPlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_unaryExpressionNotPlusMinus;
    }

	NOT() {
	    return this.getToken(CycloneParser.NOT, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	BIT_NEGATION() {
	    return this.getToken(CycloneParser.BIT_NEGATION, 0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	MINUS_MINUS() {
	    return this.getToken(CycloneParser.MINUS_MINUS, 0);
	};

	PLUS_PLUS() {
	    return this.getToken(CycloneParser.PLUS_PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterUnaryExpressionNotPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitUnaryExpressionNotPlusMinus(this);
		}
	}


}



class OneExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_oneExpr;
    }

	ONE() {
	    return this.getToken(CycloneParser.ONE, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterOneExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitOneExpr(this);
		}
	}


}



class FreshExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_freshExpr;
    }

	FRESH() {
	    return this.getToken(CycloneParser.FRESH, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFreshExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFreshExpr(this);
		}
	}


}



class InitialExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_initialExpr;
    }

	INITIAL() {
	    return this.getToken(CycloneParser.INITIAL, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterInitialExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitInitialExpr(this);
		}
	}


}



class PrevExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_prevExpr;
    }

	PREV() {
	    return this.getToken(CycloneParser.PREV, 0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrevExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrevExpr(this);
		}
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionDeclaration;
    }

	FUNCTION() {
	    return this.getToken(CycloneParser.FUNCTION, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	primitiveBvType() {
	    return this.getTypedRuleContext(PrimitiveBvTypeContext,0);
	};

	functionBodyScope() {
	    return this.getTypedRuleContext(FunctionBodyScopeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}


}



class FunctionBodyScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionBodyScope;
    }

	functionParamsDecl() {
	    return this.getTypedRuleContext(FunctionParamsDeclContext,0);
	};

	LBRACE() {
	    return this.getToken(CycloneParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CycloneParser.RBRACE, 0);
	};

	localVariableGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocalVariableGroupContext);
	    } else {
	        return this.getTypedRuleContext(LocalVariableGroupContext,i);
	    }
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionBodyScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionBodyScope(this);
		}
	}


}



class FunctionParamsDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionParamsDecl;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	functionParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParamContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionParamsDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionParamsDecl(this);
		}
	}


}



class FunctionParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_functionParam;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	primitiveBvType() {
	    return this.getTypedRuleContext(PrimitiveBvTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunctionParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunctionParam(this);
		}
	}


}



class ReturnExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_returnExpr;
    }

	RETURN() {
	    return this.getToken(CycloneParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterReturnExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitReturnExpr(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_primary;
    }

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	dotIdentifierExpr() {
	    return this.getTypedRuleContext(DotIdentifierExprContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	initialExpr() {
	    return this.getTypedRuleContext(InitialExprContext,0);
	};

	freshExpr() {
	    return this.getTypedRuleContext(FreshExprContext,0);
	};

	oneExpr() {
	    return this.getTypedRuleContext(OneExprContext,0);
	};

	returnExpr() {
	    return this.getTypedRuleContext(ReturnExprContext,0);
	};

	funCall() {
	    return this.getTypedRuleContext(FunCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class DotIdentifierExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_dotIdentifierExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(CycloneParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterDotIdentifierExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitDotIdentifierExpr(this);
		}
	}


}



class ParExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_parExpression;
    }

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterParExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitParExpression(this);
		}
	}


}



class FunCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_funCall;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(CycloneParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(CycloneParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CycloneParser.COMMA);
	    } else {
	        return this.getToken(CycloneParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterFunCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitFunCall(this);
		}
	}


}



class IteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_iteStatement;
    }

	IF() {
	    return this.getToken(CycloneParser.IF, 0);
	};

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(CycloneParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterIteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitIteStatement(this);
		}
	}


}



class AnnotationExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CycloneParser.RULE_annotationExpr;
    }

	AT_SIGN() {
	    return this.getToken(CycloneParser.AT_SIGN, 0);
	};

	LABEL() {
	    return this.getToken(CycloneParser.LABEL, 0);
	};

	COLON() {
	    return this.getToken(CycloneParser.COLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.enterAnnotationExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CycloneParserListener ) {
	        listener.exitAnnotationExpr(this);
		}
	}


}




CycloneParser.IdentifierContext = IdentifierContext; 
CycloneParser.CompOptionsContext = CompOptionsContext; 
CycloneParser.OptionNameContext = OptionNameContext; 
CycloneParser.ProgramContext = ProgramContext; 
CycloneParser.MachineDeclContext = MachineDeclContext; 
CycloneParser.MachineScopeContext = MachineScopeContext; 
CycloneParser.StateExprContext = StateExprContext; 
CycloneParser.StateScopeContext = StateScopeContext; 
CycloneParser.TransContext = TransContext; 
CycloneParser.TransScopeContext = TransScopeContext; 
CycloneParser.TransOpContext = TransOpContext; 
CycloneParser.TransDefContext = TransDefContext; 
CycloneParser.TransExclExprContext = TransExclExprContext; 
CycloneParser.InvariantExpressionContext = InvariantExpressionContext; 
CycloneParser.InExprContext = InExprContext; 
CycloneParser.InvariantScopeContext = InvariantScopeContext; 
CycloneParser.GoalContext = GoalContext; 
CycloneParser.CheckExprContext = CheckExprContext; 
CycloneParser.ForExprContext = ForExprContext; 
CycloneParser.StopExprContext = StopExprContext; 
CycloneParser.ViaExprContext = ViaExprContext; 
CycloneParser.PathExprListContext = PathExprListContext; 
CycloneParser.WithExprContext = WithExprContext; 
CycloneParser.LetExprContext = LetExprContext; 
CycloneParser.PathAssignStatementContext = PathAssignStatementContext; 
CycloneParser.PathCondAssignExprContext = PathCondAssignExprContext; 
CycloneParser.PathExprContext = PathExprContext; 
CycloneParser.PathConditionContext = PathConditionContext; 
CycloneParser.OrPathConditionContext = OrPathConditionContext; 
CycloneParser.AndPathConditionContext = AndPathConditionContext; 
CycloneParser.XorPathConditionContext = XorPathConditionContext; 
CycloneParser.UnaryPathConditionContext = UnaryPathConditionContext; 
CycloneParser.PrimaryConditionContext = PrimaryConditionContext; 
CycloneParser.ParPathConditionContext = ParPathConditionContext; 
CycloneParser.StateIncExprContext = StateIncExprContext; 
CycloneParser.PathPrimaryExprContext = PathPrimaryExprContext; 
CycloneParser.PathOpContext = PathOpContext; 
CycloneParser.LabelContext = LabelContext; 
CycloneParser.StateModifierContext = StateModifierContext; 
CycloneParser.LiteralContext = LiteralContext; 
CycloneParser.IntLiteralContext = IntLiteralContext; 
CycloneParser.RealLiteralContext = RealLiteralContext; 
CycloneParser.BoolLiteralContext = BoolLiteralContext; 
CycloneParser.StringLiteralContext = StringLiteralContext; 
CycloneParser.CharLiteralContext = CharLiteralContext; 
CycloneParser.BvLiteralContext = BvLiteralContext; 
CycloneParser.EnumLiteralContext = EnumLiteralContext; 
CycloneParser.RecordContext = RecordContext; 
CycloneParser.RecordScopeContext = RecordScopeContext; 
CycloneParser.RecordVariableDeclGroupContext = RecordVariableDeclGroupContext; 
CycloneParser.RecordVariableDeclContext = RecordVariableDeclContext; 
CycloneParser.GlobalConstantGroupContext = GlobalConstantGroupContext; 
CycloneParser.GlobalConstantDeclContext = GlobalConstantDeclContext; 
CycloneParser.GlobalVariableGroupContext = GlobalVariableGroupContext; 
CycloneParser.LocalVariableGroupContext = LocalVariableGroupContext; 
CycloneParser.ModifierContext = ModifierContext; 
CycloneParser.TypeContext = TypeContext; 
CycloneParser.PrimitiveBvTypeContext = PrimitiveBvTypeContext; 
CycloneParser.BvTypeContext = BvTypeContext; 
CycloneParser.PrimitiveTypeContext = PrimitiveTypeContext; 
CycloneParser.EnumTypeContext = EnumTypeContext; 
CycloneParser.EnumDeclContext = EnumDeclContext; 
CycloneParser.VariableDeclaratorContext = VariableDeclaratorContext; 
CycloneParser.WhereExprContext = WhereExprContext; 
CycloneParser.VariableInitializerContext = VariableInitializerContext; 
CycloneParser.AssertExprContext = AssertExprContext; 
CycloneParser.AssertMainExprContext = AssertMainExprContext; 
CycloneParser.StatementContext = StatementContext; 
CycloneParser.ExpressionContext = ExpressionContext; 
CycloneParser.ConditionalImpliesExpressionContext = ConditionalImpliesExpressionContext; 
CycloneParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
CycloneParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
CycloneParser.ConditionalXorExpressionContext = ConditionalXorExpressionContext; 
CycloneParser.BitwiseOrExpressionContext = BitwiseOrExpressionContext; 
CycloneParser.BitwiseAndExpressionContext = BitwiseAndExpressionContext; 
CycloneParser.EqualityExpressionContext = EqualityExpressionContext; 
CycloneParser.RelationalExpressionContext = RelationalExpressionContext; 
CycloneParser.BitShiftExpressionContext = BitShiftExpressionContext; 
CycloneParser.AdditiveExpressionContext = AdditiveExpressionContext; 
CycloneParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
CycloneParser.PowExpressionContext = PowExpressionContext; 
CycloneParser.UnaryExpressionContext = UnaryExpressionContext; 
CycloneParser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext; 
CycloneParser.OneExprContext = OneExprContext; 
CycloneParser.FreshExprContext = FreshExprContext; 
CycloneParser.InitialExprContext = InitialExprContext; 
CycloneParser.PrevExprContext = PrevExprContext; 
CycloneParser.FunctionDeclarationContext = FunctionDeclarationContext; 
CycloneParser.FunctionBodyScopeContext = FunctionBodyScopeContext; 
CycloneParser.FunctionParamsDeclContext = FunctionParamsDeclContext; 
CycloneParser.FunctionParamContext = FunctionParamContext; 
CycloneParser.ReturnExprContext = ReturnExprContext; 
CycloneParser.PrimaryContext = PrimaryContext; 
CycloneParser.DotIdentifierExprContext = DotIdentifierExprContext; 
CycloneParser.ParExpressionContext = ParExpressionContext; 
CycloneParser.FunCallContext = FunCallContext; 
CycloneParser.IteStatementContext = IteStatementContext; 
CycloneParser.AnnotationExprContext = AnnotationExprContext; 
